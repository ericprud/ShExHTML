/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 129:
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var __webpack_unused_export__;
/* parser generated by jison 0.3.0 */
/**
 * Returns a Parser implementing JisonParserApi and a Lexer implementing JisonLexerApi.
 */

  /*
    ShEx parser in the Jison parser generator format.
  */

  const UNBOUNDED = -1;

  const ShExUtil = __webpack_require__(860);

  // Common namespaces and entities
  const RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_FLOAT   = XSD + 'float',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN,
      XSD_PATTERN        = XSD + 'pattern',
      XSD_MININCLUSIVE   = XSD + 'minInclusive',
      XSD_MINEXCLUSIVE   = XSD + 'minExclusive',
      XSD_MAXINCLUSIVE   = XSD + 'maxInclusive',
      XSD_MAXEXCLUSIVE   = XSD + 'maxExclusive',
      XSD_LENGTH         = XSD + 'length',
      XSD_MINLENGTH      = XSD + 'minLength',
      XSD_MAXLENGTH      = XSD + 'maxLength',
      XSD_TOTALDIGITS    = XSD + 'totalDigits',
      XSD_FRACTIONDIGITS = XSD + 'fractionDigits';

  const numericDatatypes = [
      XSD + "integer",
      XSD + "decimal",
      XSD + "float",
      XSD + "double",
      XSD + "string",
      XSD + "boolean",
      XSD + "dateTime",
      XSD + "nonPositiveInteger",
      XSD + "negativeInteger",
      XSD + "long",
      XSD + "int",
      XSD + "short",
      XSD + "byte",
      XSD + "nonNegativeInteger",
      XSD + "unsignedLong",
      XSD + "unsignedInt",
      XSD + "unsignedShort",
      XSD + "unsignedByte",
      XSD + "positiveInteger"
  ];

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i;

  const numericFacets = ["mininclusive", "minexclusive",
                       "maxinclusive", "maxexclusive"];

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (let i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (let name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    let union = [];
    for (let i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    const expression = { expression: expr };
    if (attr)
      for (let a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return { value: value, type: type };
  }

  // Regular expression and replacement strings to escape strings
  const stringEscapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                                   't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      semactEscapeReplacements = { '\\': '\\', '%': '%' },
      pnameEscapeReplacements = {
        '\\': '\\', "'": "'", '"': '"',
        'n': '\n', 'r': '\r', 't': '\t', 'f': '\f', 'b': '\b',
        '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',
        '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',
        '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',
      };


  // Translates string escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    return { value: ShExUtil.unescapeText(string, stringEscapeReplacements) };
  }

  function unescapeLangString(string, trimLength) {
    const at = string.lastIndexOf("@");
    const lang = string.substr(at);
    string = string.substr(0, at);
    const u = unescapeString(string, trimLength);
    return extend(u, { language: lowercase(lang.substr(1)) });
  }

  // Translates regular expression escape codes in the string into their textual equivalent
  function unescapeRegexp (regexp) {
    const end = regexp.lastIndexOf("/");
    let s = regexp.substr(1, end-1);
    const regexpEscapeReplacements = {
      '.': "\\.", '\\': "\\\\", '?': "\\?", '*': "\\*", '+': "\\+",
      '{': "\\{", '}': "\\}", '(': "\\(", ')': "\\)", '|': "\\|",
      '^': "\\^", '$': "\\$", '[': "\\[", ']': "\\]", '/': "\\/",
      't': '\\t', 'n': '\\n', 'r': '\\r', '-': "\\-", '/': '/'
    };
    s = ShExUtil.unescapeText(s, regexpEscapeReplacements)
    const ret = {
      pattern: s
    };
    if (regexp.length > end+1)
      ret.flags = regexp.substr(end+1);
    return ret;
  }

  // Convenience function to return object with p1 key, value p2
  function keyValObject(key, val) {
    const ret = {};
    ret[key] = val;
    return ret;
  }

  // Return object with p1 key, p2 string value
  function unescapeSemanticAction(key, string) {
    string = string.substring(1, string.length - 2);
    return {
      type: "SemAct",
      name: key,
      code: ShExUtil.unescapeText(string, semactEscapeReplacements)
    };
  }

  // shapeJunction judiciously takes a shapeAtom and an optional list of con/disjuncts.
  // No created Shape{And,Or,Not} will have a `nested` shapeExpr.
  // Don't nonest arguments to shapeJunction.
  // shapeAtom emits `nested` so nonest every argument that can be a shapeAtom, i.e.
  //   shapeAtom, inlineShapeAtom, shapeAtomNoRef
  //   {,inline}shape{And,Or,Not}
  //   this does NOT include shapeOrRef or nodeConstraint.
  function shapeJunction (type, shapeAtom, juncts) {
    if (juncts.length === 0) {
      return nonest(shapeAtom);
    } else if (shapeAtom.type === type && !shapeAtom.nested) {
      nonest(shapeAtom).shapeExprs = nonest(shapeAtom).shapeExprs.concat(juncts);
      return shapeAtom;
    } else {
      return { type: type, shapeExprs: [nonest(shapeAtom)].concat(juncts.map(nonest)) };
    }
  }

  // strip out .nested attribute
  function nonest (shapeAtom) {
    delete shapeAtom.nested;
    return shapeAtom;
  }

const { JisonParser, o } = __webpack_require__(298);const $V0=[7,18,19,20,21,23,26,36,193,215,216],$V1=[19,21,215,216],$V2=[2,27],$V3=[1,22],$V4=[1,23],$V5=[2,12],$V6=[2,13],$V7=[2,14],$V8=[7,18,19,20,21,23,26,36,215,216],$V9=[1,29],$Va=[1,32],$Vb=[1,31],$Vc=[2,18],$Vd=[2,19],$Ve=[1,38],$Vf=[1,42],$Vg=[1,41],$Vh=[1,40],$Vi=[1,44],$Vj=[1,47],$Vk=[1,46],$Vl=[2,15],$Vm=[2,17],$Vn=[2,261],$Vo=[2,262],$Vp=[2,263],$Vq=[2,264],$Vr=[19,21,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,161,189,215,227],$Vs=[2,62],$Vt=[1,65],$Vu=[19,21,40,44,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,161,179,189,215,227,229],$Vv=[2,29],$Vw=[2,239],$Vx=[2,240],$Vy=[2,265],$Vz=[193,195],$VA=[1,73],$VB=[1,76],$VC=[1,75],$VD=[2,16],$VE=[7,18,19,20,21,23,26,36,51,215,216],$VF=[2,48],$VG=[7,18,19,20,21,23,26,36,51,53,215,216],$VH=[2,55],$VI=[119,125,127,189,227],$VJ=[2,140],$VK=[1,111],$VL=[1,119],$VM=[1,93],$VN=[1,101],$VO=[1,102],$VP=[1,103],$VQ=[1,110],$VR=[1,115],$VS=[1,116],$VT=[1,117],$VU=[1,120],$VV=[1,121],$VW=[1,122],$VX=[1,123],$VY=[1,124],$VZ=[1,125],$V_=[1,106],$V$=[1,118],$V01=[2,63],$V11=[19,21,69,71,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,161,189,215,227],$V21=[1,138],$V31=[1,137],$V41=[2,230],$V51=[2,231],$V61=[2,232],$V71=[2,20],$V81=[1,145],$V91=[2,54],$Va1=[1,147],$Vb1=[2,61],$Vc1=[2,70],$Vd1=[1,153],$Ve1=[1,154],$Vf1=[1,155],$Vg1=[2,66],$Vh1=[2,72],$Vi1=[1,162],$Vj1=[1,163],$Vk1=[1,164],$Vl1=[1,167],$Vm1=[1,170],$Vn1=[1,172],$Vo1=[1,173],$Vp1=[1,174],$Vq1=[2,69],$Vr1=[7,18,19,20,21,23,26,36,51,53,79,80,81,119,125,127,189,190,193,215,216,227],$Vs1=[2,96],$Vt1=[7,18,19,20,21,23,26,36,51,53,190,193,215,216],$Vu1=[7,18,19,20,21,23,26,36,51,53,96,97,98,101,102,103,104,215,216],$Vv1=[2,88],$Vw1=[2,89],$Vx1=[7,18,19,20,21,23,26,36,51,53,79,80,81,101,102,103,104,119,125,127,189,190,193,215,216,227],$Vy1=[2,109],$Vz1=[2,108],$VA1=[7,18,19,20,21,23,26,36,51,53,101,102,103,104,112,113,114,115,116,117,190,193,215,216],$VB1=[2,103],$VC1=[2,102],$VD1=[7,18,19,20,21,23,26,36,51,53,96,97,98,101,102,103,104,190,193,215,216],$VE1=[2,92],$VF1=[2,93],$VG1=[2,113],$VH1=[2,114],$VI1=[2,115],$VJ1=[2,111],$VK1=[2,238],$VL1=[19,21,71,81,100,108,109,163,185,204,205,206,207,208,209,210,211,212,213,215],$VM1=[2,184],$VN1=[7,18,19,20,21,23,26,36,51,53,112,113,114,115,116,117,190,193,215,216],$VO1=[2,105],$VP1=[1,197],$VQ1=[1,199],$VR1=[1,201],$VS1=[1,200],$VT1=[2,119],$VU1=[1,208],$VV1=[1,209],$VW1=[1,210],$VX1=[1,211],$VY1=[100,108,109,206,207,208,209],$VZ1=[2,26],$V_1=[2,31],$V$1=[2,32],$V02=[2,33],$V12=[79,80,81,119,125,127,189,227],$V22=[1,273],$V32=[1,278],$V42=[1,255],$V52=[1,263],$V62=[1,264],$V72=[1,265],$V82=[1,272],$V92=[1,268],$Va2=[1,277],$Vb2=[2,49],$Vc2=[2,56],$Vd2=[2,65],$Ve2=[2,71],$Vf2=[2,67],$Vg2=[2,73],$Vh2=[7,18,19,20,21,23,26,36,51,53,101,102,103,104,190,193,215,216],$Vi2=[1,332],$Vj2=[1,340],$Vk2=[1,341],$Vl2=[1,342],$Vm2=[1,348],$Vn2=[1,349],$Vo2=[51,53],$Vp2=[7,18,19,20,21,23,26,36,51,53,79,80,81,119,125,127,189,193,215,216,227],$Vq2=[2,228],$Vr2=[7,18,19,20,21,23,26,36,51,53,193,215,216],$Vs2=[1,365],$Vt2=[2,107],$Vu2=[2,112],$Vv2=[2,99],$Vw2=[1,371],$Vx2=[2,100],$Vy2=[2,101],$Vz2=[2,106],$VA2=[7,18,19,20,21,23,26,36,51,53,96,97,98,101,102,103,104,193,215,216],$VB2=[2,94],$VC2=[1,388],$VD2=[1,394],$VE2=[1,383],$VF2=[1,387],$VG2=[1,397],$VH2=[1,398],$VI2=[1,399],$VJ2=[1,386],$VK2=[1,400],$VL2=[1,401],$VM2=[1,406],$VN2=[1,407],$VO2=[1,408],$VP2=[1,409],$VQ2=[1,402],$VR2=[1,403],$VS2=[1,404],$VT2=[1,405],$VU2=[1,393],$VV2=[19,21,69,160,199,215],$VW2=[2,168],$VX2=[2,142],$VY2=[1,422],$VZ2=[1,421],$V_2=[1,432],$V$2=[1,435],$V03=[1,431],$V13=[1,434],$V23=[19,21,44,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,161,189,215,227],$V33=[2,118],$V43=[2,123],$V53=[2,125],$V63=[2,126],$V73=[2,127],$V83=[2,253],$V93=[2,254],$Va3=[2,255],$Vb3=[2,256],$Vc3=[2,124],$Vd3=[2,36],$Ve3=[2,40],$Vf3=[2,43],$Vg3=[2,46],$Vh3=[19,21,40,44,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,161,179,189,190,193,215,227,229],$Vi3=[2,37],$Vj3=[2,75],$Vk3=[2,78],$Vl3=[1,457],$Vm3=[1,459],$Vn3=[1,465],$Vo3=[1,466],$Vp3=[1,467],$Vq3=[1,474],$Vr3=[1,475],$Vs3=[1,476],$Vt3=[1,479],$Vu3=[2,42],$Vv3=[1,557],$Vw3=[2,45],$Vx3=[1,593],$Vy3=[2,68],$Vz3=[51,53,70],$VA3=[1,622],$VB3=[51,53,70,79,80,81,119,125,127,189,190,193,227],$VC3=[51,53,70,190,193],$VD3=[51,53,70,96,97,98,101,102,103,104,190,193],$VE3=[51,53,70,79,80,81,101,102,103,104,119,125,127,189,190,193,227],$VF3=[51,53,70,101,102,103,104,112,113,114,115,116,117,190,193],$VG3=[51,53,70,112,113,114,115,116,117,190,193],$VH3=[51,70],$VI3=[7,18,19,20,21,23,26,36,51,53,79,80,81,119,125,127,189,215,216,227],$VJ3=[2,98],$VK3=[2,97],$VL3=[2,227],$VM3=[1,664],$VN3=[1,667],$VO3=[1,663],$VP3=[1,666],$VQ3=[2,95],$VR3=[2,110],$VS3=[2,104],$VT3=[2,116],$VU3=[2,117],$VV3=[2,135],$VW3=[2,183],$VX3=[1,697],$VY3=[19,21,71,81,100,108,109,163,178,185,204,205,206,207,208,209,210,211,212,213,215],$VZ3=[2,233],$V_3=[2,234],$V$3=[2,235],$V04=[2,246],$V14=[2,249],$V24=[2,243],$V34=[2,244],$V44=[2,245],$V54=[2,251],$V64=[2,252],$V74=[2,257],$V84=[2,258],$V94=[2,259],$Va4=[2,260],$Vb4=[19,21,71,81,100,108,109,111,163,178,185,204,205,206,207,208,209,210,211,212,213,215],$Vc4=[2,147],$Vd4=[2,148],$Ve4=[1,705],$Vf4=[2,149],$Vg4=[121,135],$Vh4=[2,154],$Vi4=[2,155],$Vj4=[2,157],$Vk4=[1,708],$Vl4=[1,709],$Vm4=[19,21,199,215],$Vn4=[2,176],$Vo4=[1,717],$Vp4=[121,135,140,141],$Vq4=[2,166],$Vr4=[51,119,125,127,189,227],$Vs4=[51,53,119,125,127,189,227],$Vt4=[2,274],$Vu4=[1,750],$Vv4=[1,751],$Vw4=[1,752],$Vx4=[1,762],$Vy4=[19,21,119,125,127,189,199,215,227],$Vz4=[2,236],$VA4=[2,237],$VB4=[2,44],$VC4=[2,41],$VD4=[2,47],$VE4=[19,21,40,44,69,71,79,80,81,85,96,97,98,101,102,103,104,112,113,114,115,116,117,119,125,127,161,179,189,193,215,227,229],$VF4=[2,34],$VG4=[2,38],$VH4=[2,74],$VI4=[2,76],$VJ4=[2,35],$VK4=[1,809],$VL4=[1,815],$VM4=[1,855],$VN4=[1,902],$VO4=[51,53,70,101,102,103,104,190,193],$VP4=[51,53,70,79,80,81,119,125,127,189,193,227],$VQ4=[51,53,70,193],$VR4=[1,945],$VS4=[51,53,70,96,97,98,101,102,103,104,193],$VT4=[1,955],$VU4=[1,992],$VV4=[1,1028],$VW4=[2,229],$VX4=[1,1039],$VY4=[1,1045],$VZ4=[1,1044],$V_4=[19,21,100,108,109,204,205,206,207,208,209,210,211,212,213,215],$V$4=[1,1065],$V05=[1,1071],$V15=[1,1070],$V25=[1,1092],$V35=[1,1098],$V45=[1,1097],$V55=[1,1115],$V65=[1,1117],$V75=[1,1119],$V85=[19,21,71,81,100,108,109,163,179,185,204,205,206,207,208,209,210,211,212,213,215],$V95=[1,1123],$Va5=[1,1129],$Vb5=[1,1132],$Vc5=[1,1133],$Vd5=[1,1134],$Ve5=[1,1122],$Vf5=[1,1135],$Vg5=[1,1136],$Vh5=[1,1141],$Vi5=[1,1142],$Vj5=[1,1143],$Vk5=[1,1144],$Vl5=[1,1137],$Vm5=[1,1138],$Vn5=[1,1139],$Vo5=[1,1140],$Vp5=[1,1128],$Vq5=[2,247],$Vr5=[2,250],$Vs5=[2,136],$Vt5=[2,150],$Vu5=[2,152],$Vv5=[2,156],$Vw5=[2,158],$Vx5=[2,159],$Vy5=[2,163],$Vz5=[2,165],$VA5=[2,170],$VB5=[2,171],$VC5=[1,1159],$VD5=[1,1162],$VE5=[1,1158],$VF5=[1,1161],$VG5=[1,1172],$VH5=[2,223],$VI5=[2,241],$VJ5=[2,242],$VK5=[2,272],$VL5=[2,276],$VM5=[2,278],$VN5=[2,86],$VO5=[1,1193],$VP5=[2,281],$VQ5=[79,80,81,101,102,103,104,119,125,127,189,227],$VR5=[51,53,101,102,103,104,112,113,114,115,116,117,119,125,127,189,227],$VS5=[51,53,96,97,98,101,102,103,104,119,125,127,189,227],$VT5=[2,90],$VU5=[2,91],$VV5=[51,53,112,113,114,115,116,117,119,125,127,189,227],$VW5=[2,128],$VX5=[2,77],$VY5=[1,1252],$VZ5=[1,1288],$V_5=[1,1347],$V$5=[1,1353],$V06=[1,1385],$V16=[1,1391],$V26=[51,53,70,79,80,81,119,125,127,189,227],$V36=[51,53,70,96,97,98,101,102,103,104],$V46=[1,1449],$V56=[1,1496],$V66=[2,224],$V76=[2,225],$V86=[2,226],$V96=[7,18,19,20,21,23,26,36,51,53,79,80,81,111,119,125,127,189,190,193,215,216,227],$Va6=[7,18,19,20,21,23,26,36,51,53,111,190,193,215,216],$Vb6=[7,18,19,20,21,23,26,36,51,53,96,97,98,101,102,103,104,111,190,193,215,216],$Vc6=[2,206],$Vd6=[1,1549],$Ve6=[19,21,71,81,100,108,109,163,178,179,185,204,205,206,207,208,209,210,211,212,213,215],$Vf6=[19,21,71,81,100,108,109,111,163,178,179,185,204,205,206,207,208,209,210,211,212,213,215],$Vg6=[2,248],$Vh6=[2,153],$Vi6=[2,151],$Vj6=[2,160],$Vk6=[2,164],$Vl6=[2,161],$Vm6=[2,162],$Vn6=[1,1566],$Vo6=[70,135],$Vp6=[1,1569],$Vq6=[1,1570],$Vr6=[70,135,140,141],$Vs6=[2,275],$Vt6=[2,277],$Vu6=[2,279],$Vv6=[2,87],$Vw6=[51,53,101,102,103,104,119,125,127,189,227],$Vx6=[1,1608],$Vy6=[1,1618],$Vz6=[1,1624],$VA6=[1,1623],$VB6=[1,1661],$VC6=[1,1708],$VD6=[1,1741],$VE6=[1,1747],$VF6=[1,1746],$VG6=[1,1767],$VH6=[1,1773],$VI6=[1,1772],$VJ6=[1,1794],$VK6=[1,1800],$VL6=[1,1799],$VM6=[1,1845],$VN6=[1,1911],$VO6=[1,1917],$VP6=[1,1916],$VQ6=[1,1937],$VR6=[1,1943],$VS6=[1,1942],$VT6=[1,1963],$VU6=[1,1969],$VV6=[1,1968],$VW6=[1,2010],$VX6=[1,2016],$VY6=[1,2048],$VZ6=[1,2054],$V_6=[121,135,140,141,190,193],$V$6=[2,173],$V07=[1,2074],$V17=[1,2075],$V27=[1,2076],$V37=[1,2077],$V47=[121,135,140,141,156,157,158,159,190,193],$V57=[2,39],$V67=[51,121,135,140,141,156,157,158,159,190,193],$V77=[2,52],$V87=[51,53,121,135,140,141,156,157,158,159,190,193],$V97=[2,59],$Va7=[1,2106],$Vb7=[2,273],$Vc7=[2,280],$Vd7=[19,21,40,44,69,71,79,80,81,85,96,97,98,101,102,103,104,111,112,113,114,115,116,117,119,125,127,161,179,189,190,193,215,227,229],$Ve7=[1,2219],$Vf7=[1,2225],$Vg7=[1,2257],$Vh7=[1,2263],$Vi7=[1,2316],$Vj7=[1,2349],$Vk7=[1,2355],$Vl7=[1,2354],$Vm7=[1,2375],$Vn7=[1,2381],$Vo7=[1,2380],$Vp7=[1,2402],$Vq7=[1,2408],$Vr7=[1,2407],$Vs7=[1,2429],$Vt7=[1,2435],$Vu7=[1,2434],$Vv7=[1,2455],$Vw7=[1,2461],$Vx7=[1,2460],$Vy7=[1,2482],$Vz7=[1,2488],$VA7=[1,2487],$VB7=[51,53,70,79,80,81,111,119,125,127,189,190,193,227],$VC7=[51,53,70,111,190,193],$VD7=[51,53,70,96,97,98,101,102,103,104,111,190,193],$VE7=[1,2557],$VF7=[2,174],$VG7=[2,178],$VH7=[2,179],$VI7=[2,180],$VJ7=[2,181],$VK7=[2,50],$VL7=[2,57],$VM7=[2,64],$VN7=[2,84],$VO7=[2,80],$VP7=[1,2640],$VQ7=[2,83],$VR7=[51,53,79,80,81,101,102,103,104,119,121,125,127,135,140,141,156,157,158,159,189,190,193,227],$VS7=[51,53,79,80,81,119,121,125,127,135,140,141,156,157,158,159,189,190,193,227],$VT7=[51,53,101,102,103,104,112,113,114,115,116,117,121,135,140,141,156,157,158,159,190,193],$VU7=[51,53,96,97,98,101,102,103,104,121,135,140,141,156,157,158,159,190,193],$VV7=[51,53,112,113,114,115,116,117,121,135,140,141,156,157,158,159,190,193],$VW7=[1,2690],$VX7=[1,2728],$VY7=[1,2783],$VZ7=[1,2872],$V_7=[1,2878],$V$7=[1,2961],$V08=[1,2994],$V18=[1,3000],$V28=[1,2999],$V38=[1,3020],$V48=[1,3026],$V58=[1,3025],$V68=[1,3047],$V78=[1,3053],$V88=[1,3052],$V98=[1,3074],$Va8=[1,3080],$Vb8=[1,3079],$Vc8=[1,3100],$Vd8=[1,3106],$Ve8=[1,3105],$Vf8=[1,3127],$Vg8=[1,3133],$Vh8=[1,3132],$Vi8=[121,135,140,141,193],$Vj8=[1,3152],$Vk8=[2,53],$Vl8=[2,60],$Vm8=[2,79],$Vn8=[2,85],$Vo8=[2,81],$Vp8=[51,53,101,102,103,104,121,135,140,141,156,157,158,159,190,193],$Vq8=[1,3176],$Vr8=[70,135,140,141,190,193],$Vs8=[1,3185],$Vt8=[1,3186],$Vu8=[1,3187],$Vv8=[1,3188],$Vw8=[70,135,140,141,156,157,158,159,190,193],$Vx8=[51,70,135,140,141,156,157,158,159,190,193],$Vy8=[51,53,70,135,140,141,156,157,158,159,190,193],$Vz8=[1,3217],$VA8=[1,3244],$VB8=[1,3267],$VC8=[1,3298],$VD8=[1,3331],$VE8=[1,3337],$VF8=[1,3336],$VG8=[1,3357],$VH8=[1,3363],$VI8=[1,3362],$VJ8=[1,3384],$VK8=[1,3390],$VL8=[1,3389],$VM8=[1,3411],$VN8=[1,3417],$VO8=[1,3416],$VP8=[1,3437],$VQ8=[1,3443],$VR8=[1,3442],$VS8=[1,3464],$VT8=[1,3470],$VU8=[1,3469],$VV8=[1,3547],$VW8=[1,3553],$VX8=[2,175],$VY8=[2,51],$VZ8=[1,3641],$V_8=[2,58],$V$8=[1,3674],$V09=[2,82],$V19=[2,172],$V29=[1,3719],$V39=[51,53,70,79,80,81,101,102,103,104,119,125,127,135,140,141,156,157,158,159,189,190,193,227],$V49=[51,53,70,79,80,81,119,125,127,135,140,141,156,157,158,159,189,190,193,227],$V59=[51,53,70,101,102,103,104,112,113,114,115,116,117,135,140,141,156,157,158,159,190,193],$V69=[51,53,70,96,97,98,101,102,103,104,135,140,141,156,157,158,159,190,193],$V79=[51,53,70,112,113,114,115,116,117,135,140,141,156,157,158,159,190,193],$V89=[1,3824],$V99=[1,3830],$Va9=[1,3893],$Vb9=[1,3899],$Vc9=[1,3898],$Vd9=[1,3919],$Ve9=[1,3925],$Vf9=[1,3924],$Vg9=[1,3946],$Vh9=[1,3952],$Vi9=[1,3951],$Vj9=[1,4011],$Vk9=[1,4017],$Vl9=[1,4016],$Vm9=[1,4052],$Vn9=[1,4094],$Vo9=[70,135,140,141,193],$Vp9=[1,4124],$Vq9=[51,53,70,101,102,103,104,135,140,141,156,157,158,159,190,193],$Vr9=[1,4148],$Vs9=[1,4171],$Vt9=[1,4265],$Vu9=[1,4271],$Vv9=[1,4270],$Vw9=[1,4291],$Vx9=[1,4297],$Vy9=[1,4296],$Vz9=[1,4318],$VA9=[1,4324],$VB9=[1,4323],$VC9=[111,121,135,140,141,190,193],$VD9=[1,4366],$VE9=[1,4390],$VF9=[1,4432],$VG9=[1,4465],$VH9=[1,4505],$VI9=[1,4528],$VJ9=[1,4534],$VK9=[1,4533],$VL9=[1,4554],$VM9=[1,4560],$VN9=[1,4559],$VO9=[1,4581],$VP9=[1,4587],$VQ9=[1,4586],$VR9=[1,4661],$VS9=[1,4704],$VT9=[1,4710],$VU9=[1,4709],$VV9=[1,4745],$VW9=[1,4787],$VX9=[1,4877],$VY9=[70,111,135,140,141,190,193],$VZ9=[1,4932],$V_9=[1,4956],$V$9=[1,4994],$V0a=[1,5040],$V1a=[1,5118],$V2a=[1,5167];

class ShExJisonParser extends JisonParser {
    constructor(yy = {}, lexer = new ShExJisonLexer(yy)) {
        super(yy, lexer);
        this.symbols_ = {"error":2,"shexDoc":3,"initParser":4,"Qdirective_E_Star":5,"Q_O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C_E_Opt":6,"EOF":7,"directive":8,"O_QnotStartAction_E_Or_QstartActions_E_C":9,"notStartAction":10,"startActions":11,"Qstatement_E_Star":12,"statement":13,"O_QnotStartAction_E_Or_QstartActions_E_S_Qstatement_E_Star_C":14,"baseDecl":15,"prefixDecl":16,"importDecl":17,"IT_BASE":18,"IRIREF":19,"IT_PREFIX":20,"PNAME_NS":21,"iri":22,"IT_IMPORT":23,"start":24,"shapeExprDecl":25,"IT_start":26,"=":27,"shapeAnd":28,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Star":29,"QcodeDecl_E_Plus":30,"codeDecl":31,"QIT_ABSTRACT_E_Opt":32,"shapeExprLabel":33,"Qrestriction_E_Star":34,"O_QshapeExpression_E_Or_QshapeRef_E_Or_QIT_EXTERNAL_E_C":35,"IT_ABSTRACT":36,"restriction":37,"shapeExpression":38,"shapeRef":39,"IT_EXTERNAL":40,"QIT_NOT_E_Opt":41,"shapeAtomNoRef":42,"QshapeOr_E_Opt":43,"IT_NOT":44,"shapeOr":45,"inlineShapeExpression":46,"inlineShapeOr":47,"Q_O_QIT_OR_E_S_QshapeAnd_E_C_E_Plus":48,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Plus":49,"O_QIT_OR_E_S_QshapeAnd_E_C":50,"IT_OR":51,"O_QIT_AND_E_S_QshapeNot_E_C":52,"IT_AND":53,"shapeNot":54,"inlineShapeAnd":55,"Q_O_QIT_OR_E_S_QinlineShapeAnd_E_C_E_Star":56,"O_QIT_OR_E_S_QinlineShapeAnd_E_C":57,"Q_O_QIT_AND_E_S_QshapeNot_E_C_E_Star":58,"inlineShapeNot":59,"Q_O_QIT_AND_E_S_QinlineShapeNot_E_C_E_Star":60,"O_QIT_AND_E_S_QinlineShapeNot_E_C":61,"shapeAtom":62,"inlineShapeAtom":63,"nonLitNodeConstraint":64,"QshapeOrRef_E_Opt":65,"litNodeConstraint":66,"shapeOrRef":67,"QnonLitNodeConstraint_E_Opt":68,"(":69,")":70,".":71,"shapeDefinition":72,"nonLitInlineNodeConstraint":73,"QinlineShapeOrRef_E_Opt":74,"litInlineNodeConstraint":75,"inlineShapeOrRef":76,"QnonLitInlineNodeConstraint_E_Opt":77,"inlineShapeDefinition":78,"ATPNAME_LN":79,"ATPNAME_NS":80,"@":81,"Qannotation_E_Star":82,"semanticActions":83,"annotation":84,"IT_LITERAL":85,"QxsFacet_E_Star":86,"datatype":87,"valueSet":88,"QnumericFacet_E_Plus":89,"xsFacet":90,"numericFacet":91,"nonLiteralKind":92,"QstringFacet_E_Star":93,"QstringFacet_E_Plus":94,"stringFacet":95,"IT_IRI":96,"IT_BNODE":97,"IT_NONLITERAL":98,"stringLength":99,"INTEGER":100,"REGEXP":101,"IT_LENGTH":102,"IT_MINLENGTH":103,"IT_MAXLENGTH":104,"numericRange":105,"rawNumeric":106,"numericLength":107,"DECIMAL":108,"DOUBLE":109,"string":110,"^^":111,"IT_MININCLUSIVE":112,"IT_MINEXCLUSIVE":113,"IT_MAXINCLUSIVE":114,"IT_MAXEXCLUSIVE":115,"IT_TOTALDIGITS":116,"IT_FRACTIONDIGITS":117,"Q_O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C_E_Star":118,"{":119,"QtripleExpression_E_Opt":120,"}":121,"O_Qextension_E_Or_QextraPropertySet_E_Or_QIT_CLOSED_E_C":122,"extension":123,"extraPropertySet":124,"IT_CLOSED":125,"tripleExpression":126,"IT_EXTRA":127,"Qpredicate_E_Plus":128,"predicate":129,"oneOfTripleExpr":130,"groupTripleExpr":131,"multiElementOneOf":132,"Q_O_QGT_PIPE_E_S_QgroupTripleExpr_E_C_E_Plus":133,"O_QGT_PIPE_E_S_QgroupTripleExpr_E_C":134,"|":135,"singleElementGroup":136,"multiElementGroup":137,"unaryTripleExpr":138,"QGT_SEMI_E_Opt":139,",":140,";":141,"Q_O_QGT_SEMI_E_S_QunaryTripleExpr_E_C_E_Plus":142,"O_QGT_SEMI_E_S_QunaryTripleExpr_E_C":143,"Q_O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C_E_Opt":144,"O_QtripleConstraint_E_Or_QbracketedTripleExpr_E_C":145,"include":146,"O_QGT_DOLLAR_E_S_QtripleExprLabel_E_C":147,"$":148,"tripleExprLabel":149,"tripleConstraint":150,"bracketedTripleExpr":151,"Qcardinality_E_Opt":152,"cardinality":153,"QsenseFlags_E_Opt":154,"senseFlags":155,"*":156,"+":157,"?":158,"REPEAT_RANGE":159,"^":160,"[":161,"QvalueSetValue_E_Star":162,"]":163,"valueSetValue":164,"iriRange":165,"literalRange":166,"languageRange":167,"O_QiriExclusion_E_Plus_Or_QliteralExclusion_E_Plus_Or_QlanguageExclusion_E_Plus_C":168,"QiriExclusion_E_Plus":169,"iriExclusion":170,"QliteralExclusion_E_Plus":171,"literalExclusion":172,"QlanguageExclusion_E_Plus":173,"languageExclusion":174,"Q_O_QGT_TILDE_E_S_QiriExclusion_E_Star_C_E_Opt":175,"QiriExclusion_E_Star":176,"O_QGT_TILDE_E_S_QiriExclusion_E_Star_C":177,"~":178,"-":179,"QGT_TILDE_E_Opt":180,"literal":181,"Q_O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C_E_Opt":182,"QliteralExclusion_E_Star":183,"O_QGT_TILDE_E_S_QliteralExclusion_E_Star_C":184,"LANGTAG":185,"Q_O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C_E_Opt":186,"O_QGT_TILDE_E_S_QlanguageExclusion_E_Star_C":187,"QlanguageExclusion_E_Star":188,"&":189,"//":190,"O_Qiri_E_Or_Qliteral_E_C":191,"QcodeDecl_E_Star":192,"%":193,"O_QCODE_E_Or_QGT_MODULO_E_C":194,"CODE":195,"rdfLiteral":196,"numericLiteral":197,"booleanLiteral":198,"a":199,"blankNode":200,"langString":201,"Q_O_QGT_DTYPE_E_S_Qdatatype_E_C_E_Opt":202,"O_QGT_DTYPE_E_S_Qdatatype_E_C":203,"IT_true":204,"IT_false":205,"STRING_LITERAL1":206,"STRING_LITERAL_LONG1":207,"STRING_LITERAL2":208,"STRING_LITERAL_LONG2":209,"LANG_STRING_LITERAL1":210,"LANG_STRING_LITERAL_LONG1":211,"LANG_STRING_LITERAL2":212,"LANG_STRING_LITERAL_LONG2":213,"prefixedName":214,"PNAME_LN":215,"BLANK_NODE_LABEL":216,"O_QIT_EXTENDS_E_Or_QGT_AMP_E_C":217,"extendsShapeExpression":218,"extendsShapeOr":219,"extendsShapeAnd":220,"Q_O_QIT_OR_E_S_QextendsShapeAnd_E_C_E_Star":221,"O_QIT_OR_E_S_QextendsShapeAnd_E_C":222,"extendsShapeNot":223,"Q_O_QIT_AND_E_S_QextendsShapeNot_E_C_E_Star":224,"O_QIT_AND_E_S_QextendsShapeNot_E_C":225,"extendsShapeAtom":226,"IT_EXTENDS":227,"O_QIT_RESTRICTS_E_Or_QGT_MINUS_E_C":228,"IT_RESTRICTS":229,"$accept":0,"$end":1};
        this.terminals_ = {2:"error",7:"EOF",18:"IT_BASE",19:"IRIREF",20:"IT_PREFIX",21:"PNAME_NS",23:"IT_IMPORT",26:"IT_start",27:"=",36:"IT_ABSTRACT",40:"IT_EXTERNAL",44:"IT_NOT",51:"IT_OR",53:"IT_AND",69:"(",70:")",71:".",79:"ATPNAME_LN",80:"ATPNAME_NS",81:"@",85:"IT_LITERAL",96:"IT_IRI",97:"IT_BNODE",98:"IT_NONLITERAL",100:"INTEGER",101:"REGEXP",102:"IT_LENGTH",103:"IT_MINLENGTH",104:"IT_MAXLENGTH",108:"DECIMAL",109:"DOUBLE",111:"^^",112:"IT_MININCLUSIVE",113:"IT_MINEXCLUSIVE",114:"IT_MAXINCLUSIVE",115:"IT_MAXEXCLUSIVE",116:"IT_TOTALDIGITS",117:"IT_FRACTIONDIGITS",119:"{",121:"}",125:"IT_CLOSED",127:"IT_EXTRA",135:"|",140:",",141:";",148:"$",156:"*",157:"+",158:"?",159:"REPEAT_RANGE",160:"^",161:"[",163:"]",178:"~",179:"-",185:"LANGTAG",189:"&",190:"//",193:"%",195:"CODE",199:"a",204:"IT_true",205:"IT_false",206:"STRING_LITERAL1",207:"STRING_LITERAL_LONG1",208:"STRING_LITERAL2",209:"STRING_LITERAL_LONG2",210:"LANG_STRING_LITERAL1",211:"LANG_STRING_LITERAL_LONG1",212:"LANG_STRING_LITERAL2",213:"LANG_STRING_LITERAL_LONG2",215:"PNAME_LN",216:"BLANK_NODE_LABEL",227:"IT_EXTENDS",229:"IT_RESTRICTS"};
        this.productions_ = [0,[3,4],[4,0],[5,0],[5,2],[9,1],[9,1],[12,0],[12,2],[14,2],[6,0],[6,1],[8,1],[8,1],[8,1],[15,2],[16,3],[17,2],[10,1],[10,1],[24,4],[11,1],[30,1],[30,2],[13,1],[13,1],[25,4],[32,0],[32,1],[34,0],[34,2],[35,1],[35,1],[35,1],[38,3],[38,3],[38,2],[43,0],[43,1],[46,1],[45,1],[45,2],[50,2],[48,1],[48,2],[52,2],[49,1],[49,2],[29,0],[29,2],[47,2],[57,2],[56,0],[56,2],[28,2],[58,0],[58,2],[55,2],[61,2],[60,0],[60,2],[54,2],[41,0],[41,1],[59,2],[62,2],[62,1],[62,2],[62,3],[62,1],[65,0],[65,1],[68,0],[68,1],[42,2],[42,1],[42,2],[42,3],[42,1],[63,2],[63,1],[63,2],[63,3],[63,1],[74,0],[74,1],[77,0],[77,1],[67,1],[67,1],[76,1],[76,1],[39,1],[39,1],[39,2],[66,3],[82,0],[82,2],[64,3],[75,2],[75,2],[75,2],[75,1],[86,0],[86,2],[89,1],[89,2],[73,2],[73,1],[93,0],[93,2],[94,1],[94,2],[92,1],[92,1],[92,1],[90,1],[90,1],[95,2],[95,1],[99,1],[99,1],[99,1],[91,2],[91,2],[106,1],[106,1],[106,1],[106,3],[105,1],[105,1],[105,1],[105,1],[107,1],[107,1],[72,3],[78,4],[122,1],[122,1],[122,1],[118,0],[118,2],[120,0],[120,1],[124,2],[128,1],[128,2],[126,1],[130,1],[130,1],[132,2],[134,2],[133,1],[133,2],[131,1],[131,1],[136,2],[139,0],[139,1],[139,1],[137,3],[143,2],[143,2],[142,1],[142,2],[138,2],[138,1],[147,2],[144,0],[144,1],[145,1],[145,1],[151,6],[152,0],[152,1],[150,6],[154,0],[154,1],[153,1],[153,1],[153,1],[153,1],[155,1],[88,3],[162,0],[162,2],[164,1],[164,1],[164,1],[164,2],[169,1],[169,2],[171,1],[171,2],[173,1],[173,2],[168,1],[168,1],[168,1],[165,2],[176,0],[176,2],[177,2],[175,0],[175,1],[170,3],[180,0],[180,1],[166,2],[183,0],[183,2],[184,2],[182,0],[182,1],[172,3],[167,2],[167,2],[188,0],[188,2],[187,2],[186,0],[186,1],[174,3],[146,2],[84,3],[191,1],[191,1],[83,1],[192,0],[192,2],[31,3],[194,1],[194,1],[181,1],[181,1],[181,1],[129,1],[129,1],[87,1],[33,1],[33,1],[149,1],[149,1],[197,1],[197,1],[197,1],[196,1],[196,2],[203,2],[202,0],[202,1],[198,1],[198,1],[110,1],[110,1],[110,1],[110,1],[201,1],[201,1],[201,1],[201,1],[22,1],[22,1],[214,1],[214,1],[200,1],[123,2],[218,1],[219,2],[222,2],[221,0],[221,2],[220,2],[225,2],[224,0],[224,2],[223,2],[226,2],[226,1],[226,2],[226,3],[226,1],[217,1],[217,1],[37,2],[228,1],[228,1]];
        this.table = [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V0,[2,3],{5:3}),o($V1,$V2,{6:4,8:5,14:6,15:7,16:8,17:9,9:10,10:14,11:15,24:16,25:17,30:18,32:20,31:21,7:[2,10],18:[1,11],20:[1,12],23:[1,13],26:[1,19],36:$V3,193:$V4}),{7:[1,24]},o($V0,[2,4]),{7:[2,11]},o($V0,$V5),o($V0,$V6),o($V0,$V7),o($V8,[2,7],{12:25}),{19:[1,26]},{21:[1,27]},{19:$V9,21:$Va,22:28,214:30,215:$Vb},o($V8,[2,5]),o($V8,[2,6]),o($V8,$Vc),o($V8,$Vd),o($V8,[2,21],{31:33,193:$V4}),{27:[1,34]},{19:$Ve,21:$Vf,22:36,33:35,200:37,214:39,215:$Vg,216:$Vh},o($V0,[2,22]),o($V1,[2,28]),{19:$Vi,21:$Vj,22:43,214:45,215:$Vk},{1:[2,1]},o($V1,$V2,{13:48,8:49,10:50,15:51,16:52,17:53,24:54,25:55,32:60,7:[2,9],18:[1,56],20:[1,57],23:[1,58],26:[1,59],36:$V3}),o($V0,$Vl),{19:$V9,21:$Va,22:61,214:30,215:$Vb},o($V0,$Vm),o($V0,$Vn),o($V0,$Vo),o($V0,$Vp),o($V0,$Vq),o($V0,[2,23]),o($Vr,$Vs,{28:62,54:63,41:64,44:$Vt}),o($Vu,$Vv,{34:66}),o($Vu,$Vw),o($Vu,$Vx),o($Vu,$Vn),o($Vu,$Vo),o($Vu,$Vy),o($Vu,$Vp),o($Vu,$Vq),{193:[1,69],194:67,195:[1,68]},o($Vz,$Vn),o($Vz,$Vo),o($Vz,$Vp),o($Vz,$Vq),o($V8,[2,8]),o($V8,[2,24]),o($V8,[2,25]),o($V8,$V5),o($V8,$V6),o($V8,$V7),o($V8,$Vc),o($V8,$Vd),{19:[1,70]},{21:[1,71]},{19:$VA,21:$VB,22:72,214:74,215:$VC},{27:[1,77]},{19:$Ve,21:$Vf,22:36,33:78,200:37,214:39,215:$Vg,216:$Vh},o($V0,$VD),o($VE,$VF,{29:79}),o($VG,$VH,{58:80}),o($VI,$VJ,{62:81,64:82,66:83,67:84,73:87,75:88,72:89,39:90,92:91,94:92,87:94,88:95,89:96,78:97,95:104,22:105,91:107,118:108,99:109,214:112,105:113,107:114,19:$VK,21:$VL,69:[1,85],71:[1,86],79:[1,98],80:[1,99],81:[1,100],85:$VM,96:$VN,97:$VO,98:$VP,101:$VQ,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:$V_,215:$V$}),o($Vr,$V01),o($V11,$Vs,{35:126,37:127,38:128,39:129,228:131,41:132,40:[1,130],44:[1,133],79:[1,134],80:[1,135],81:[1,136],179:$V21,229:$V31}),o($V0,$V41),o($V0,$V51),o($V0,$V61),o($V8,$Vl),{19:$VA,21:$VB,22:139,214:74,215:$VC},o($V8,$Vm),o($V8,$Vn),o($V8,$Vo),o($V8,$Vp),o($V8,$Vq),o($Vr,$Vs,{28:140,54:141,41:142,44:$Vt}),o($Vu,$Vv,{34:143}),o($V8,$V71,{50:144,51:$V81}),o($VE,$V91,{52:146,53:$Va1}),o($VG,$Vb1),o($VG,$Vc1,{65:148,67:149,72:150,39:151,78:152,118:156,79:$Vd1,80:$Ve1,81:$Vf1,119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($VG,$Vg1),o($VG,$Vh1,{68:157,64:158,73:159,92:160,94:161,95:165,99:166,96:$Vi1,97:$Vj1,98:$Vk1,101:$Vl1,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{38:168,41:169,39:171,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($VG,$Vq1),o($Vr1,$Vs1,{82:175}),o($Vt1,$Vs1,{82:176}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:177}),o($Vr1,$Vz1,{99:109,95:178,101:$VQ,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:179}),o($VA1,$VB1,{86:180}),o($VA1,$VB1,{86:181}),o($Vt1,$VC1,{105:113,107:114,91:182,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:183}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,187],21:[1,191],22:185,33:184,200:186,214:188,215:[1,190],216:[1,189]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{162:192}),o($VN1,$VO1),{119:[1,193],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},{100:[1,202]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,204],106:203,108:[1,205],109:[1,206],110:207,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,212]},{100:[2,120]},{100:[2,121]},{100:[2,122]},o($VA1,$Vp),o($VA1,$Vq),o($VY1,[2,129]),o($VY1,[2,130]),o($VY1,[2,131]),o($VY1,[2,132]),{100:[2,133]},{100:[2,134]},o($V8,$VZ1),o($Vu,[2,30]),o($V8,$V_1),o($V8,$V$1,{45:213,48:214,49:215,50:216,52:217,51:$V81,53:$Va1}),o($V8,$V02),o($VI,$VJ,{67:218,72:219,39:220,78:221,118:225,79:[1,222],80:[1,223],81:[1,224]}),o($VI,$VJ,{73:87,75:88,92:91,94:92,87:94,88:95,89:96,78:97,95:104,22:105,91:107,118:108,99:109,214:112,105:113,107:114,42:226,64:227,66:228,72:229,19:$VK,21:$VL,69:[1,230],71:[1,231],85:$VM,96:$VN,97:$VO,98:$VP,101:$VQ,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:$V_,215:$V$}),o($V11,$V01,{39:232,79:$Vd1,80:$Ve1,81:$Vf1}),o($VG,$VE1),o($VG,$VF1),{19:[1,236],21:[1,240],22:234,33:233,200:235,214:237,215:[1,239],216:[1,238]},o($V12,[2,285]),o($V12,[2,286]),o($V8,$VD),o($VE,$VF,{29:241}),o($VG,$VH,{58:242}),o($VI,$VJ,{62:243,64:244,66:245,67:246,73:249,75:250,72:251,39:252,92:253,94:254,87:256,88:257,89:258,78:259,95:266,22:267,91:269,118:270,99:271,214:274,105:275,107:276,19:$V22,21:$V32,69:[1,247],71:[1,248],79:[1,260],80:[1,261],81:[1,262],85:$V42,96:$V52,97:$V62,98:$V72,101:$V82,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:$V92,215:$Va2}),o($V11,$Vs,{37:127,228:131,35:279,38:280,39:281,41:283,40:[1,282],44:[1,284],79:[1,285],80:[1,286],81:[1,287],179:$V21,229:$V31}),o($VE,$Vb2),o($Vr,$Vs,{28:288,54:289,41:290,44:$Vt}),o($VG,$Vc2),o($Vr,$Vs,{54:291,41:292,44:$Vt}),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:293}),o($VG,$VE1),o($VG,$VF1),{19:[1,297],21:[1,301],22:295,33:294,200:296,214:298,215:[1,300],216:[1,299]},{119:[1,302],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:303}),o($Vh2,$Vy1,{93:304}),o($Vt1,$Vz1,{99:166,95:305,101:$Vl1,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,306]},o($Vh2,$VT1),{70:[1,307]},o($VI,$VJ,{42:308,64:309,66:310,72:311,73:314,75:315,78:316,92:317,94:318,87:320,88:321,89:322,118:323,95:327,22:328,91:330,99:331,214:334,105:335,107:336,19:[1,333],21:[1,338],69:[1,312],71:[1,313],85:[1,319],96:[1,324],97:[1,325],98:[1,326],101:$Vi2,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,329],215:[1,337]}),o($V11,$V01,{39:339,79:$Vj2,80:$Vk2,81:$Vl2}),{45:343,48:344,49:345,50:346,51:$Vm2,52:347,53:$Vn2},o($Vo2,$VE1),o($Vo2,$VF1),{19:[1,353],21:[1,357],22:351,33:350,200:352,214:354,215:[1,356],216:[1,355]},o($Vp2,$Vq2,{83:358,84:359,192:360,190:[1,361]}),o($Vr2,$Vq2,{83:362,84:363,192:364,190:$Vs2}),o($Vr1,$Vt2,{99:109,95:366,101:$VQ,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vu2),o($Vt1,$Vv2,{90:367,95:368,91:369,99:370,105:372,107:373,101:$Vw2,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:367,95:368,91:369,99:370,105:372,107:373,101:$Vw2,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vy2,{90:367,95:368,91:369,99:370,105:372,107:373,101:$Vw2,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vz2),o($VA2,$Vq2,{83:374,84:375,192:376,190:[1,377]}),o($Vu1,$VB2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,378],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{120:410,126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,121:$VX2,148:$VY2,189:$VZ2}),o($VI,[2,141]),o($VI,[2,137]),o($VI,[2,138]),o($VI,[2,139]),o($Vr,$Vs,{218:423,219:424,220:425,223:426,41:427,44:$Vt}),{19:$V_2,21:$V$2,22:430,128:428,129:429,199:$V03,214:433,215:$V13},o($V23,[2,282]),o($V23,[2,283]),o($Vx1,$V33),o($VN1,$V43),o($VN1,$V53),o($VN1,$V63),o($VN1,$V73),{111:[1,436]},{111:$V83},{111:$V93},{111:$Va3},{111:$Vb3},o($VN1,$Vc3),o($V8,$Vd3),o($V8,$Ve3,{50:437,51:$V81}),o($VE,$VF,{29:438,52:439,53:$Va1}),o($VE,$Vf3),o($VG,$Vg3),o($Vu,[2,284]),o($Vu,$Vv1),o($Vu,$Vw1),o($Vh3,$Vs1,{82:440}),o($Vu,$VE1),o($Vu,$VF1),{19:[1,444],21:[1,448],22:442,33:441,200:443,214:445,215:[1,447],216:[1,446]},{119:[1,449],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($V8,$Vi3,{48:214,49:215,50:216,52:217,43:450,45:451,51:$V81,53:$Va1}),o($VG,$Vc1,{67:149,72:150,39:151,78:152,118:156,65:452,79:$Vd1,80:$Ve1,81:$Vf1,119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($VG,$Vj3),o($VG,$Vh1,{64:158,73:159,92:160,94:161,95:165,99:166,68:453,96:$Vi1,97:$Vj1,98:$Vk1,101:$Vl1,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:454,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($VG,$Vk3),o($V8,$Vi3,{48:214,49:215,50:216,52:217,45:451,43:455,51:$V81,53:$Va1}),o($VG,$VB2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($V8,$V71,{50:456,51:$Vl3}),o($VE,$V91,{52:458,53:$Vm3}),o($VG,$Vb1),o($VG,$Vc1,{65:460,67:461,72:462,39:463,78:464,118:468,79:$Vn3,80:$Vo3,81:$Vp3,119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($VG,$Vg1),o($VG,$Vh1,{68:469,64:470,73:471,92:472,94:473,95:477,99:478,96:$Vq3,97:$Vr3,98:$Vs3,101:$Vt3,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:480,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($VG,$Vq1),o($Vr1,$Vs1,{82:481}),o($Vt1,$Vs1,{82:482}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:483}),o($Vr1,$Vz1,{99:271,95:484,101:$V82,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:485}),o($VA1,$VB1,{86:486}),o($VA1,$VB1,{86:487}),o($Vt1,$VC1,{105:275,107:276,91:488,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:489}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,493],21:[1,497],22:491,33:490,200:492,214:494,215:[1,496],216:[1,495]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{162:498}),o($VN1,$VO1),{119:[1,499],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},{100:[1,500]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,502],106:501,108:[1,503],109:[1,504],110:505,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,506]},o($VA1,$Vp),o($VA1,$Vq),o($V8,$VZ1),o($V8,$V_1),o($V8,$V$1,{45:507,48:508,49:509,50:510,52:511,51:$Vl3,53:$Vm3}),o($V8,$V02),o($VI,$VJ,{73:249,75:250,92:253,94:254,87:256,88:257,89:258,78:259,95:266,22:267,91:269,118:270,99:271,214:274,105:275,107:276,42:512,64:513,66:514,72:515,19:$V22,21:$V32,69:[1,516],71:[1,517],85:$V42,96:$V52,97:$V62,98:$V72,101:$V82,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:$V92,215:$Va2}),o($V11,$V01,{39:518,79:$Vn3,80:$Vo3,81:$Vp3}),o($VG,$VE1),o($VG,$VF1),{19:[1,522],21:[1,526],22:520,33:519,200:521,214:523,215:[1,525],216:[1,524]},o($VE,$Vu3),o($VG,$VH,{58:527}),o($VI,$VJ,{62:528,64:529,66:530,67:531,73:534,75:535,72:536,39:537,92:538,94:539,87:541,88:542,89:543,78:544,95:551,22:552,91:554,118:555,99:556,214:559,105:560,107:561,19:[1,558],21:[1,563],69:[1,532],71:[1,533],79:[1,545],80:[1,546],81:[1,547],85:[1,540],96:[1,548],97:[1,549],98:[1,550],101:$Vv3,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,553],215:[1,562]}),o($VG,$Vw3),o($VI,$VJ,{62:564,64:565,66:566,67:567,73:570,75:571,72:572,39:573,92:574,94:575,87:577,88:578,89:579,78:580,95:587,22:588,91:590,118:591,99:592,214:595,105:596,107:597,19:[1,594],21:[1,599],69:[1,568],71:[1,569],79:[1,581],80:[1,582],81:[1,583],85:[1,576],96:[1,584],97:[1,585],98:[1,586],101:$Vx3,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,589],215:[1,598]}),o($Vr2,$Vq2,{84:363,192:364,83:600,190:$Vs2}),o($VG,$VB2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:601,121:$VX2,148:$VY2,189:$VZ2}),o($Vr2,$Vq2,{84:363,192:364,83:602,190:$Vs2}),o($Vt1,$Vt2,{99:166,95:603,101:$Vl1,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vu2),o($Vh2,$V33),o($VG,$Vy3),{43:604,45:605,48:344,49:345,50:346,51:$Vm2,52:347,53:$Vn2,70:$Vi3},o($VI,$VJ,{65:606,67:607,72:608,39:609,78:610,118:611,51:$Vc1,53:$Vc1,70:$Vc1,79:$Vj2,80:$Vk2,81:$Vl2}),o($Vz3,$Vj3),o($Vz3,$Vh1,{68:612,64:613,73:614,92:615,94:616,95:620,99:621,96:[1,617],97:[1,618],98:[1,619],101:$VA3,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:623,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($Vz3,$Vk3),o($VB3,$Vs1,{82:624}),o($VC3,$Vs1,{82:625}),o($VD3,$Vs1,{82:626}),o($VE3,$Vy1,{93:627}),o($VB3,$Vz1,{99:331,95:628,101:$Vi2,102:$VR,103:$VS,104:$VT}),o($VF3,$VB1,{86:629}),o($VF3,$VB1,{86:630}),o($VF3,$VB1,{86:631}),o($VC3,$VC1,{105:335,107:336,91:632,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),{119:[1,633],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VE3,$VG1),o($VE3,$VH1),o($VE3,$VI1),o($VE3,$VJ1),o($VF3,$VK1),o($VL1,$VM1,{162:634}),o($VG3,$VO1),{100:[1,635]},o($VE3,$VT1),o($VF3,$Vn),o($VF3,$Vo),{100:[1,637],106:636,108:[1,638],109:[1,639],110:640,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,641]},o($VF3,$Vp),o($VF3,$Vq),{43:642,45:605,48:344,49:345,50:346,51:$Vm2,52:347,53:$Vn2,70:$Vi3},o($Vz3,$VE1),o($Vz3,$VF1),{19:[1,646],21:[1,650],22:644,33:643,200:645,214:647,215:[1,649],216:[1,648]},{70:$Vd3},{50:651,51:$Vm2,70:$Ve3},o($VH3,$VF,{29:652,52:653,53:$Vn2}),o($VH3,$Vf3),o($Vz3,$Vg3),o($Vr,$Vs,{28:654,54:655,41:656,44:$Vt}),o($Vr,$Vs,{54:657,41:658,44:$Vt}),o($Vo2,$VB2),o($Vo2,$Vw),o($Vo2,$Vx),o($Vo2,$Vn),o($Vo2,$Vo),o($Vo2,$Vy),o($Vo2,$Vp),o($Vo2,$Vq),o($VI3,$VJ3),o($Vr1,$VK3),o($VI3,$VL3,{31:659,193:[1,660]}),{19:$VM3,21:$VN3,22:662,129:661,199:$VO3,214:665,215:$VP3},o($VG,$VQ3),o($Vt1,$VK3),o($VG,$VL3,{31:668,193:[1,669]}),{19:$VM3,21:$VN3,22:662,129:670,199:$VO3,214:665,215:$VP3},o($Vx1,$VR3),o($VA1,$VS3),o($VA1,$VT3),o($VA1,$VU3),{100:[1,671]},o($VA1,$VT1),{100:[1,673],106:672,108:[1,674],109:[1,675],110:676,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,677]},o($Vu1,$VV3),o($VD1,$VK3),o($Vu1,$VL3,{31:678,193:[1,679]}),{19:$VM3,21:$VN3,22:662,129:680,199:$VO3,214:665,215:$VP3},o($VA1,$VW3),o($VL1,[2,185]),o($VL1,[2,186]),o($VL1,[2,187]),o($VL1,[2,188]),{168:681,169:682,170:685,171:683,172:686,173:684,174:687,179:[1,688]},o($VL1,[2,203],{175:689,177:690,178:[1,691]}),o($VL1,[2,212],{182:692,184:693,178:[1,694]}),o($VL1,[2,220],{186:695,187:696,178:$VX3}),{178:$VX3,187:698},o($VY3,$Vn),o($VY3,$Vo),o($VY3,$VZ3),o($VY3,$V_3),o($VY3,$V$3),o($VY3,$Vp),o($VY3,$Vq),o($VY3,$V04),o($VY3,$V14,{202:699,203:700,111:[1,701]}),o($VY3,$V24),o($VY3,$V34),o($VY3,$V44),o($VY3,$V54),o($VY3,$V64),o($VY3,$V74),o($VY3,$V84),o($VY3,$V94),o($VY3,$Va4),o($Vb4,$V83),o($Vb4,$V93),o($Vb4,$Va3),o($Vb4,$Vb3),{121:[1,702]},{121:[2,143]},{121:$Vc4},{121:$Vd4,133:703,134:704,135:$Ve4},{121:$Vf4},o($Vg4,$Vh4),o($Vg4,$Vi4),o($Vg4,$Vj4,{139:706,142:707,143:710,140:$Vk4,141:$Vl4}),o($Vm4,$Vn4,{145:711,150:712,151:713,154:714,155:716,69:[1,715],160:$Vo4}),o($Vp4,$Vq4),o($VV2,[2,169]),{19:[1,721],21:[1,725],22:719,149:718,200:720,214:722,215:[1,724],216:[1,723]},{19:[1,729],21:[1,733],22:727,149:726,200:728,214:730,215:[1,732],216:[1,731]},o($VI,[2,266]),o($VI,[2,267]),o($Vr4,[2,270],{221:734}),o($Vs4,$Vt4,{224:735}),o($VI,$VJ,{226:736,73:737,75:738,76:739,92:742,94:743,87:745,88:746,89:747,78:748,39:749,95:753,22:754,91:756,118:757,99:761,214:764,105:765,107:766,19:[1,763],21:[1,768],69:[1,740],71:[1,741],79:[1,758],80:[1,759],81:[1,760],85:[1,744],96:$Vu4,97:$Vv4,98:$Vw4,101:$Vx4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,755],215:[1,767]}),o($VI,[2,144],{22:430,214:433,129:769,19:$V_2,21:$V$2,199:$V03,215:$V13}),o($Vy4,[2,145]),o($Vy4,$Vz4),o($Vy4,$VA4),o($Vy4,$Vn),o($Vy4,$Vo),o($Vy4,$Vp),o($Vy4,$Vq),{19:[1,772],21:[1,775],22:771,87:770,214:773,215:[1,774]},o($VE,$VB4),o($V8,$VC4,{50:144,51:$V81}),o($VG,$VD4),o($VE4,$Vq2,{83:776,84:777,192:778,190:[1,779]}),o($Vu,$VB2),o($Vu,$Vw),o($Vu,$Vx),o($Vu,$Vn),o($Vu,$Vo),o($Vu,$Vy),o($Vu,$Vp),o($Vu,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:780,121:$VX2,148:$VY2,189:$VZ2}),o($V8,$VF4),o($V8,$VG4),o($VG,$VH4),o($VG,$VI4),{70:[1,781]},o($V8,$VJ4),o($VE,$Vb2),o($Vr,$Vs,{28:782,54:783,41:784,44:$Vt}),o($VG,$Vc2),o($Vr,$Vs,{54:785,41:786,44:$Vt}),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:787}),o($VG,$VE1),o($VG,$VF1),{19:[1,791],21:[1,795],22:789,33:788,200:790,214:792,215:[1,794],216:[1,793]},{119:[1,796],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:797}),o($Vh2,$Vy1,{93:798}),o($Vt1,$Vz1,{99:478,95:799,101:$Vt3,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,800]},o($Vh2,$VT1),{70:[1,801]},o($Vp2,$Vq2,{83:802,84:803,192:804,190:[1,805]}),o($Vr2,$Vq2,{83:806,84:807,192:808,190:$VK4}),o($Vr1,$Vt2,{99:271,95:810,101:$V82,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vu2),o($Vt1,$Vv2,{90:811,95:812,91:813,99:814,105:816,107:817,101:$VL4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:811,95:812,91:813,99:814,105:816,107:817,101:$VL4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vy2,{90:811,95:812,91:813,99:814,105:816,107:817,101:$VL4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vz2),o($VA2,$Vq2,{83:818,84:819,192:820,190:[1,821]}),o($Vu1,$VB2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,822],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:823,121:$VX2,148:$VY2,189:$VZ2}),o($Vx1,$V33),o($VN1,$V43),o($VN1,$V53),o($VN1,$V63),o($VN1,$V73),{111:[1,824]},o($VN1,$Vc3),o($V8,$Vd3),o($V8,$Ve3,{50:825,51:$Vl3}),o($VE,$VF,{29:826,52:827,53:$Vm3}),o($VE,$Vf3),o($VG,$Vg3),o($V8,$Vi3,{48:508,49:509,50:510,52:511,43:828,45:829,51:$Vl3,53:$Vm3}),o($VG,$Vc1,{67:461,72:462,39:463,78:464,118:468,65:830,79:$Vn3,80:$Vo3,81:$Vp3,119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($VG,$Vj3),o($VG,$Vh1,{64:470,73:471,92:472,94:473,95:477,99:478,68:831,96:$Vq3,97:$Vr3,98:$Vs3,101:$Vt3,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:832,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($VG,$Vk3),o($V8,$Vi3,{48:508,49:509,50:510,52:511,45:829,43:833,51:$Vl3,53:$Vm3}),o($VG,$VB2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VE,$V91,{52:834,53:[1,835]}),o($VG,$Vb1),o($VG,$Vc1,{65:836,67:837,72:838,39:839,78:840,118:844,79:[1,841],80:[1,842],81:[1,843],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($VG,$Vg1),o($VG,$Vh1,{68:845,64:846,73:847,92:848,94:849,95:853,99:854,96:[1,850],97:[1,851],98:[1,852],101:$VM4,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:856,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($VG,$Vq1),o($Vr1,$Vs1,{82:857}),o($Vt1,$Vs1,{82:858}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:859}),o($Vr1,$Vz1,{99:556,95:860,101:$Vv3,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:861}),o($VA1,$VB1,{86:862}),o($VA1,$VB1,{86:863}),o($Vt1,$VC1,{105:560,107:561,91:864,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:865}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,869],21:[1,873],22:867,33:866,200:868,214:870,215:[1,872],216:[1,871]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{162:874}),o($VN1,$VO1),{119:[1,875],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},{100:[1,876]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,878],106:877,108:[1,879],109:[1,880],110:881,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,882]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$Vb1),o($VG,$Vc1,{65:883,67:884,72:885,39:886,78:887,118:891,79:[1,888],80:[1,889],81:[1,890],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($VG,$Vg1),o($VG,$Vh1,{68:892,64:893,73:894,92:895,94:896,95:900,99:901,96:[1,897],97:[1,898],98:[1,899],101:$VN4,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:903,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($VG,$Vq1),o($Vr1,$Vs1,{82:904}),o($Vt1,$Vs1,{82:905}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:906}),o($Vr1,$Vz1,{99:592,95:907,101:$Vx3,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:908}),o($VA1,$VB1,{86:909}),o($VA1,$VB1,{86:910}),o($Vt1,$VC1,{105:596,107:597,91:911,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:912}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,916],21:[1,920],22:914,33:913,200:915,214:917,215:[1,919],216:[1,918]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{162:921}),o($VN1,$VO1),{119:[1,922],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},{100:[1,923]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,925],106:924,108:[1,926],109:[1,927],110:928,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,929]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$VV3),{121:[1,930]},o($VG,$VJ3),o($Vh2,$VR3),{70:$VF4},{70:$VG4},o($Vz3,$VH4),o($Vz3,$Ve2),o($Vz3,$Vv1),o($Vz3,$Vw1),o($VC3,$Vs1,{82:931}),{119:[1,932],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($Vz3,$VI4),o($Vz3,$Vg2),o($VC3,$Vs1,{82:933}),o($VO4,$Vy1,{93:934}),o($VC3,$Vz1,{99:621,95:935,101:$VA3,102:$VR,103:$VS,104:$VT}),o($VO4,$VG1),o($VO4,$VH1),o($VO4,$VI1),o($VO4,$VJ1),{100:[1,936]},o($VO4,$VT1),{70:[1,937]},o($VP4,$Vq2,{83:938,84:939,192:940,190:[1,941]}),o($VQ4,$Vq2,{83:942,84:943,192:944,190:$VR4}),o($VS4,$Vq2,{83:946,84:947,192:948,190:[1,949]}),o($VB3,$Vt2,{99:331,95:950,101:$Vi2,102:$VR,103:$VS,104:$VT}),o($VE3,$Vu2),o($VC3,$Vv2,{90:951,95:952,91:953,99:954,105:956,107:957,101:$VT4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VC3,$Vx2,{90:951,95:952,91:953,99:954,105:956,107:957,101:$VT4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VC3,$Vy2,{90:951,95:952,91:953,99:954,105:956,107:957,101:$VT4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VG3,$Vz2),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:958,121:$VX2,148:$VY2,189:$VZ2}),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,959],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VE3,$V33),o($VG3,$V43),o($VG3,$V53),o($VG3,$V63),o($VG3,$V73),{111:[1,960]},o($VG3,$Vc3),{70:$VJ4},o($Vz3,$VB2),o($Vz3,$Vw),o($Vz3,$Vx),o($Vz3,$Vn),o($Vz3,$Vo),o($Vz3,$Vy),o($Vz3,$Vp),o($Vz3,$Vq),o($VH3,$VB4),{50:961,51:$Vm2,70:$VC4},o($Vz3,$VD4),o($VH3,$Vu3),o($Vz3,$VH,{58:962}),o($VI,$VJ,{62:963,64:964,66:965,67:966,73:969,75:970,72:971,39:972,92:973,94:974,87:976,88:977,89:978,78:979,95:986,22:987,91:989,118:990,99:991,214:994,105:995,107:996,19:[1,993],21:[1,998],69:[1,967],71:[1,968],79:[1,980],80:[1,981],81:[1,982],85:[1,975],96:[1,983],97:[1,984],98:[1,985],101:$VU4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,988],215:[1,997]}),o($Vz3,$Vw3),o($VI,$VJ,{62:999,64:1000,66:1001,67:1002,73:1005,75:1006,72:1007,39:1008,92:1009,94:1010,87:1012,88:1013,89:1014,78:1015,95:1022,22:1023,91:1025,118:1026,99:1027,214:1030,105:1031,107:1032,19:[1,1029],21:[1,1034],69:[1,1003],71:[1,1004],79:[1,1016],80:[1,1017],81:[1,1018],85:[1,1011],96:[1,1019],97:[1,1020],98:[1,1021],101:$VV4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,1024],215:[1,1033]}),o($Vp2,$VW4),{19:$Vi,21:$Vj,22:1035,214:45,215:$Vk},{19:$VX4,21:$VY4,22:1037,100:[1,1048],108:[1,1049],109:[1,1050],110:1047,181:1038,191:1036,196:1041,197:1042,198:1043,201:1046,204:[1,1051],205:[1,1052],206:[1,1057],207:[1,1058],208:[1,1059],209:[1,1060],210:[1,1053],211:[1,1054],212:[1,1055],213:[1,1056],214:1040,215:$VZ4},o($V_4,$Vz4),o($V_4,$VA4),o($V_4,$Vn),o($V_4,$Vo),o($V_4,$Vp),o($V_4,$Vq),o($Vr2,$VW4),{19:$Vi,21:$Vj,22:1061,214:45,215:$Vk},{19:$V$4,21:$V05,22:1063,100:[1,1074],108:[1,1075],109:[1,1076],110:1073,181:1064,191:1062,196:1067,197:1068,198:1069,201:1072,204:[1,1077],205:[1,1078],206:[1,1083],207:[1,1084],208:[1,1085],209:[1,1086],210:[1,1079],211:[1,1080],212:[1,1081],213:[1,1082],214:1066,215:$V15},o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),o($VA1,$V63),o($VA1,$V73),{111:[1,1087]},o($VA1,$Vc3),o($VA2,$VW4),{19:$Vi,21:$Vj,22:1088,214:45,215:$Vk},{19:$V25,21:$V35,22:1090,100:[1,1101],108:[1,1102],109:[1,1103],110:1100,181:1091,191:1089,196:1094,197:1095,198:1096,201:1099,204:[1,1104],205:[1,1105],206:[1,1110],207:[1,1111],208:[1,1112],209:[1,1113],210:[1,1106],211:[1,1107],212:[1,1108],213:[1,1109],214:1093,215:$V45},o($VL1,[2,189]),o($VL1,[2,196],{170:1114,179:$V55}),o($VL1,[2,197],{172:1116,179:$V65}),o($VL1,[2,198],{174:1118,179:$V75}),o($V85,[2,190]),o($V85,[2,192]),o($V85,[2,194]),{19:$V95,21:$Va5,22:1120,100:$Vb5,108:$Vc5,109:$Vd5,110:1131,181:1121,185:$Ve5,196:1125,197:1126,198:1127,201:1130,204:$Vf5,205:$Vg5,206:$Vh5,207:$Vi5,208:$Vj5,209:$Vk5,210:$Vl5,211:$Vm5,212:$Vn5,213:$Vo5,214:1124,215:$Vp5},o($VL1,[2,199]),o($VL1,[2,204]),o($V85,[2,200],{176:1145}),o($VL1,[2,208]),o($VL1,[2,213]),o($V85,[2,209],{183:1146}),o($VL1,[2,215]),o($VL1,[2,221]),o($V85,[2,217],{188:1147}),o($VL1,[2,216]),o($VY3,$Vq5),o($VY3,$Vr5),{19:$VC2,21:$VD2,22:1149,87:1148,214:389,215:$VU2},o($VD1,$Vs5),{121:$Vt5,134:1150,135:$Ve4},o($Vg4,$Vu5),o($VV2,$VW2,{136:415,137:416,138:417,144:418,146:419,147:420,131:1151,148:$VY2,189:$VZ2}),o($Vg4,$Vv5),o($Vg4,$Vj4,{139:1152,143:1153,140:$Vk4,141:$Vl4}),o($VV2,$VW2,{144:418,146:419,147:420,138:1154,121:$Vw5,135:$Vw5,148:$VY2,189:$VZ2}),o($VV2,$VW2,{144:418,146:419,147:420,138:1155,121:$Vx5,135:$Vx5,148:$VY2,189:$VZ2}),o($Vp4,$Vy5),o($Vp4,$Vz5),o($Vp4,$VA5),o($Vp4,$VB5),{19:$VC5,21:$VD5,22:1157,129:1156,199:$VE5,214:1160,215:$VF5},o($VV2,$VW2,{147:420,126:1163,130:1164,131:1165,132:1166,136:1167,137:1168,138:1169,144:1170,146:1171,148:$VY2,189:$VG5}),o($Vm4,[2,177]),o($Vm4,[2,182]),o($Vp4,$VH5),o($Vp4,$VI5),o($Vp4,$VJ5),o($Vp4,$Vn),o($Vp4,$Vo),o($Vp4,$Vy),o($Vp4,$Vp),o($Vp4,$Vq),o($VV2,[2,167]),o($VV2,$VI5),o($VV2,$VJ5),o($VV2,$Vn),o($VV2,$Vo),o($VV2,$Vy),o($VV2,$Vp),o($VV2,$Vq),o($VI,[2,268],{222:1173,51:[1,1174]}),o($Vr4,$VK5,{225:1175,53:[1,1176]}),o($Vs4,$VL5),o($VI,$VJ,{76:1177,78:1178,39:1179,118:1180,79:[1,1181],80:[1,1182],81:[1,1183]}),o($Vs4,$VM5),o($Vs4,$VN5,{77:1184,73:1185,92:1186,94:1187,95:1191,99:1192,96:[1,1188],97:[1,1189],98:[1,1190],101:$VO5,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:1194,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($Vs4,$VP5),o($VQ5,$Vy1,{93:1195}),o($V12,$Vz1,{99:761,95:1196,101:$Vx4,102:$VR,103:$VS,104:$VT}),o($VR5,$VB1,{86:1197}),o($VR5,$VB1,{86:1198}),o($VR5,$VB1,{86:1199}),o($Vs4,$VC1,{105:765,107:766,91:1200,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VS5,$VT5),o($VS5,$VU5),o($VQ5,$VG1),o($VQ5,$VH1),o($VQ5,$VI1),o($VQ5,$VJ1),o($VR5,$VK1),o($VL1,$VM1,{162:1201}),o($VV5,$VO1),{119:[1,1202],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VS5,$VE1),o($VS5,$VF1),{19:[1,1206],21:[1,1210],22:1204,33:1203,200:1205,214:1207,215:[1,1209],216:[1,1208]},{100:[1,1211]},o($VQ5,$VT1),o($VR5,$Vn),o($VR5,$Vo),{100:[1,1213],106:1212,108:[1,1214],109:[1,1215],110:1216,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,1217]},o($VR5,$Vp),o($VR5,$Vq),o($Vy4,[2,146]),o($VN1,$VW5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($Vu,$VV3),o($Vh3,$VK3),o($Vu,$VL3,{31:1218,193:[1,1219]}),{19:$VM3,21:$VN3,22:662,129:1220,199:$VO3,214:665,215:$VP3},{121:[1,1221]},o($VG,$VX5),o($VE,$Vu3),o($VG,$VH,{58:1222}),o($VI,$VJ,{62:1223,64:1224,66:1225,67:1226,73:1229,75:1230,72:1231,39:1232,92:1233,94:1234,87:1236,88:1237,89:1238,78:1239,95:1246,22:1247,91:1249,118:1250,99:1251,214:1254,105:1255,107:1256,19:[1,1253],21:[1,1258],69:[1,1227],71:[1,1228],79:[1,1240],80:[1,1241],81:[1,1242],85:[1,1235],96:[1,1243],97:[1,1244],98:[1,1245],101:$VY5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,1248],215:[1,1257]}),o($VG,$Vw3),o($VI,$VJ,{62:1259,64:1260,66:1261,67:1262,73:1265,75:1266,72:1267,39:1268,92:1269,94:1270,87:1272,88:1273,89:1274,78:1275,95:1282,22:1283,91:1285,118:1286,99:1287,214:1290,105:1291,107:1292,19:[1,1289],21:[1,1294],69:[1,1263],71:[1,1264],79:[1,1276],80:[1,1277],81:[1,1278],85:[1,1271],96:[1,1279],97:[1,1280],98:[1,1281],101:$VZ5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,1284],215:[1,1293]}),o($Vr2,$Vq2,{84:807,192:808,83:1295,190:$VK4}),o($VG,$VB2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:1296,121:$VX2,148:$VY2,189:$VZ2}),o($Vr2,$Vq2,{84:807,192:808,83:1297,190:$VK4}),o($Vt1,$Vt2,{99:478,95:1298,101:$Vt3,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vu2),o($Vh2,$V33),o($VG,$Vy3),o($VI3,$VJ3),o($Vr1,$VK3),o($VI3,$VL3,{31:1299,193:[1,1300]}),{19:$VM3,21:$VN3,22:662,129:1301,199:$VO3,214:665,215:$VP3},o($VG,$VQ3),o($Vt1,$VK3),o($VG,$VL3,{31:1302,193:[1,1303]}),{19:$VM3,21:$VN3,22:662,129:1304,199:$VO3,214:665,215:$VP3},o($Vx1,$VR3),o($VA1,$VS3),o($VA1,$VT3),o($VA1,$VU3),{100:[1,1305]},o($VA1,$VT1),{100:[1,1307],106:1306,108:[1,1308],109:[1,1309],110:1310,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,1311]},o($Vu1,$VV3),o($VD1,$VK3),o($Vu1,$VL3,{31:1312,193:[1,1313]}),{19:$VM3,21:$VN3,22:662,129:1314,199:$VO3,214:665,215:$VP3},o($VA1,$VW3),{121:[1,1315]},{19:[1,1318],21:[1,1321],22:1317,87:1316,214:1319,215:[1,1320]},o($VE,$VB4),o($V8,$VC4,{50:456,51:$Vl3}),o($VG,$VD4),o($V8,$VF4),o($V8,$VG4),o($VG,$VH4),o($VG,$VI4),{70:[1,1322]},o($V8,$VJ4),o($VG,$Vc2),o($Vr,$Vs,{54:1323,41:1324,44:$Vt}),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:1325}),o($VG,$VE1),o($VG,$VF1),{19:[1,1329],21:[1,1333],22:1327,33:1326,200:1328,214:1330,215:[1,1332],216:[1,1331]},{119:[1,1334],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:1335}),o($Vh2,$Vy1,{93:1336}),o($Vt1,$Vz1,{99:854,95:1337,101:$VM4,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,1338]},o($Vh2,$VT1),{70:[1,1339]},o($Vp2,$Vq2,{83:1340,84:1341,192:1342,190:[1,1343]}),o($Vr2,$Vq2,{83:1344,84:1345,192:1346,190:$V_5}),o($Vr1,$Vt2,{99:556,95:1348,101:$Vv3,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vu2),o($Vt1,$Vv2,{90:1349,95:1350,91:1351,99:1352,105:1354,107:1355,101:$V$5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:1349,95:1350,91:1351,99:1352,105:1354,107:1355,101:$V$5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vy2,{90:1349,95:1350,91:1351,99:1352,105:1354,107:1355,101:$V$5,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vz2),o($VA2,$Vq2,{83:1356,84:1357,192:1358,190:[1,1359]}),o($Vu1,$VB2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,1360],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:1361,121:$VX2,148:$VY2,189:$VZ2}),o($Vx1,$V33),o($VN1,$V43),o($VN1,$V53),o($VN1,$V63),o($VN1,$V73),{111:[1,1362]},o($VN1,$Vc3),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:1363}),o($VG,$VE1),o($VG,$VF1),{19:[1,1367],21:[1,1371],22:1365,33:1364,200:1366,214:1368,215:[1,1370],216:[1,1369]},{119:[1,1372],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:1373}),o($Vh2,$Vy1,{93:1374}),o($Vt1,$Vz1,{99:901,95:1375,101:$VN4,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,1376]},o($Vh2,$VT1),{70:[1,1377]},o($Vp2,$Vq2,{83:1378,84:1379,192:1380,190:[1,1381]}),o($Vr2,$Vq2,{83:1382,84:1383,192:1384,190:$V06}),o($Vr1,$Vt2,{99:592,95:1386,101:$Vx3,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vu2),o($Vt1,$Vv2,{90:1387,95:1388,91:1389,99:1390,105:1392,107:1393,101:$V16,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:1387,95:1388,91:1389,99:1390,105:1392,107:1393,101:$V16,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vy2,{90:1387,95:1388,91:1389,99:1390,105:1392,107:1393,101:$V16,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vz2),o($VA2,$Vq2,{83:1394,84:1395,192:1396,190:[1,1397]}),o($Vu1,$VB2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,1398],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:1399,121:$VX2,148:$VY2,189:$VZ2}),o($Vx1,$V33),o($VN1,$V43),o($VN1,$V53),o($VN1,$V63),o($VN1,$V73),{111:[1,1400]},o($VN1,$Vc3),o($Vt1,$Vs5),o($VQ4,$Vq2,{84:943,192:944,83:1401,190:$VR4}),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:1402,121:$VX2,148:$VY2,189:$VZ2}),o($VQ4,$Vq2,{84:943,192:944,83:1403,190:$VR4}),o($VC3,$Vt2,{99:621,95:1404,101:$VA3,102:$VR,103:$VS,104:$VT}),o($VO4,$Vu2),o($VO4,$V33),o($Vz3,$VX5),o($V26,$VJ3),o($VB3,$VK3),o($V26,$VL3,{31:1405,193:[1,1406]}),{19:$VM3,21:$VN3,22:662,129:1407,199:$VO3,214:665,215:$VP3},o($Vz3,$VQ3),o($VC3,$VK3),o($Vz3,$VL3,{31:1408,193:[1,1409]}),{19:$VM3,21:$VN3,22:662,129:1410,199:$VO3,214:665,215:$VP3},o($V36,$VV3),o($VD3,$VK3),o($V36,$VL3,{31:1411,193:[1,1412]}),{19:$VM3,21:$VN3,22:662,129:1413,199:$VO3,214:665,215:$VP3},o($VE3,$VR3),o($VF3,$VS3),o($VF3,$VT3),o($VF3,$VU3),{100:[1,1414]},o($VF3,$VT1),{100:[1,1416],106:1415,108:[1,1417],109:[1,1418],110:1419,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,1420]},{121:[1,1421]},o($VF3,$VW3),{19:[1,1424],21:[1,1427],22:1423,87:1422,214:1425,215:[1,1426]},o($VH3,$Vb2),o($VH3,$V91,{52:1428,53:[1,1429]}),o($Vz3,$Vb1),o($VI,$VJ,{65:1430,67:1431,72:1432,39:1433,78:1434,118:1438,51:$Vc1,53:$Vc1,70:$Vc1,79:[1,1435],80:[1,1436],81:[1,1437]}),o($Vz3,$Vg1),o($Vz3,$Vh1,{68:1439,64:1440,73:1441,92:1442,94:1443,95:1447,99:1448,96:[1,1444],97:[1,1445],98:[1,1446],101:$V46,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:1450,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($Vz3,$Vq1),o($VB3,$Vs1,{82:1451}),o($VC3,$Vs1,{82:1452}),o($V36,$Vv1),o($V36,$Vw1),o($VE3,$Vy1,{93:1453}),o($VB3,$Vz1,{99:991,95:1454,101:$VU4,102:$VR,103:$VS,104:$VT}),o($VF3,$VB1,{86:1455}),o($VF3,$VB1,{86:1456}),o($VF3,$VB1,{86:1457}),o($VC3,$VC1,{105:995,107:996,91:1458,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD3,$Vs1,{82:1459}),o($V36,$VE1),o($V36,$VF1),{19:[1,1463],21:[1,1467],22:1461,33:1460,200:1462,214:1464,215:[1,1466],216:[1,1465]},o($VE3,$VG1),o($VE3,$VH1),o($VE3,$VI1),o($VE3,$VJ1),o($VF3,$VK1),o($VL1,$VM1,{162:1468}),o($VG3,$VO1),{119:[1,1469],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},{100:[1,1470]},o($VE3,$VT1),o($VF3,$Vn),o($VF3,$Vo),{100:[1,1472],106:1471,108:[1,1473],109:[1,1474],110:1475,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,1476]},o($VF3,$Vp),o($VF3,$Vq),o($Vz3,$Vb1),o($VI,$VJ,{65:1477,67:1478,72:1479,39:1480,78:1481,118:1485,51:$Vc1,53:$Vc1,70:$Vc1,79:[1,1482],80:[1,1483],81:[1,1484]}),o($Vz3,$Vg1),o($Vz3,$Vh1,{68:1486,64:1487,73:1488,92:1489,94:1490,95:1494,99:1495,96:[1,1491],97:[1,1492],98:[1,1493],101:$V56,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:1497,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($Vz3,$Vq1),o($VB3,$Vs1,{82:1498}),o($VC3,$Vs1,{82:1499}),o($V36,$Vv1),o($V36,$Vw1),o($VE3,$Vy1,{93:1500}),o($VB3,$Vz1,{99:1027,95:1501,101:$VV4,102:$VR,103:$VS,104:$VT}),o($VF3,$VB1,{86:1502}),o($VF3,$VB1,{86:1503}),o($VF3,$VB1,{86:1504}),o($VC3,$VC1,{105:1031,107:1032,91:1505,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD3,$Vs1,{82:1506}),o($V36,$VE1),o($V36,$VF1),{19:[1,1510],21:[1,1514],22:1508,33:1507,200:1509,214:1511,215:[1,1513],216:[1,1512]},o($VE3,$VG1),o($VE3,$VH1),o($VE3,$VI1),o($VE3,$VJ1),o($VF3,$VK1),o($VL1,$VM1,{162:1515}),o($VG3,$VO1),{119:[1,1516],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},{100:[1,1517]},o($VE3,$VT1),o($VF3,$Vn),o($VF3,$Vo),{100:[1,1519],106:1518,108:[1,1520],109:[1,1521],110:1522,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,1523]},o($VF3,$Vp),o($VF3,$Vq),{193:[1,1526],194:1524,195:[1,1525]},o($Vr1,$V66),o($Vr1,$V76),o($Vr1,$V86),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VZ3),o($Vr1,$V_3),o($Vr1,$V$3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V04),o($Vr1,$V14,{202:1527,203:1528,111:[1,1529]}),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($Vr1,$V94),o($Vr1,$Va4),o($V96,$V83),o($V96,$V93),o($V96,$Va3),o($V96,$Vb3),{193:[1,1532],194:1530,195:[1,1531]},o($Vt1,$V66),o($Vt1,$V76),o($Vt1,$V86),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VZ3),o($Vt1,$V_3),o($Vt1,$V$3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V04),o($Vt1,$V14,{202:1533,203:1534,111:[1,1535]}),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($Vt1,$V94),o($Vt1,$Va4),o($Va6,$V83),o($Va6,$V93),o($Va6,$Va3),o($Va6,$Vb3),{19:[1,1538],21:[1,1541],22:1537,87:1536,214:1539,215:[1,1540]},{193:[1,1544],194:1542,195:[1,1543]},o($VD1,$V66),o($VD1,$V76),o($VD1,$V86),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VZ3),o($VD1,$V_3),o($VD1,$V$3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V04),o($VD1,$V14,{202:1545,203:1546,111:[1,1547]}),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VD1,$V94),o($VD1,$Va4),o($Vb6,$V83),o($Vb6,$V93),o($Vb6,$Va3),o($Vb6,$Vb3),o($V85,[2,191]),{19:$V95,21:$Va5,22:1120,214:1124,215:$Vp5},o($V85,[2,193]),{100:$Vb5,108:$Vc5,109:$Vd5,110:1131,181:1121,196:1125,197:1126,198:1127,201:1130,204:$Vf5,205:$Vg5,206:$Vh5,207:$Vi5,208:$Vj5,209:$Vk5,210:$Vl5,211:$Vm5,212:$Vn5,213:$Vo5},o($V85,[2,195]),{185:$Ve5},o($V85,$Vc6,{180:1548,178:$Vd6}),o($V85,$Vc6,{180:1550,178:$Vd6}),o($V85,$Vc6,{180:1551,178:$Vd6}),o($Ve6,$Vn),o($Ve6,$Vo),o($Ve6,$VZ3),o($Ve6,$V_3),o($Ve6,$V$3),o($Ve6,$Vp),o($Ve6,$Vq),o($Ve6,$V04),o($Ve6,$V14,{202:1552,203:1553,111:[1,1554]}),o($Ve6,$V24),o($Ve6,$V34),o($Ve6,$V44),o($Ve6,$V54),o($Ve6,$V64),o($Ve6,$V74),o($Ve6,$V84),o($Ve6,$V94),o($Ve6,$Va4),o($Vf6,$V83),o($Vf6,$V93),o($Vf6,$Va3),o($Vf6,$Vb3),o($VL1,[2,202],{170:1555,179:$V55}),o($VL1,[2,211],{172:1556,179:$V65}),o($VL1,[2,219],{174:1557,179:$V75}),o($VY3,$Vg6),o($VY3,$VK1),o($Vg4,$Vh6),o($Vg4,$Vi6),o($Vg4,$Vj6),o($Vp4,$Vk6),o($Vp4,$Vl6),o($Vp4,$Vm6),o($Vr,$Vs,{46:1558,47:1559,55:1560,59:1561,41:1562,44:$Vt}),o($V23,$Vz4),o($V23,$VA4),o($V23,$Vn),o($V23,$Vo),o($V23,$Vp),o($V23,$Vq),{70:[1,1563]},{70:$Vc4},{70:$Vd4,133:1564,134:1565,135:$Vn6},{70:$Vf4},o($Vo6,$Vh4),o($Vo6,$Vi4),o($Vo6,$Vj4,{139:1567,142:1568,143:1571,140:$Vp6,141:$Vq6}),o($Vm4,$Vn4,{155:716,145:1572,150:1573,151:1574,154:1575,69:[1,1576],160:$Vo4}),o($Vr6,$Vq4),{19:[1,1580],21:[1,1584],22:1578,149:1577,200:1579,214:1581,215:[1,1583],216:[1,1582]},o($Vr4,[2,271]),o($Vr,$Vs,{220:1585,223:1586,41:1587,44:$Vt}),o($Vs4,$Vs6),o($Vr,$Vs,{223:1588,41:1589,44:$Vt}),o($Vs4,$Vt6),o($Vs4,$VT5),o($Vs4,$VU5),{119:[1,1590],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($Vs4,$VE1),o($Vs4,$VF1),{19:[1,1594],21:[1,1598],22:1592,33:1591,200:1593,214:1595,215:[1,1597],216:[1,1596]},o($Vs4,$Vu6),o($Vs4,$Vv6),o($Vw6,$Vy1,{93:1599}),o($Vs4,$Vz1,{99:1192,95:1600,101:$VO5,102:$VR,103:$VS,104:$VT}),o($Vw6,$VG1),o($Vw6,$VH1),o($Vw6,$VI1),o($Vw6,$VJ1),{100:[1,1601]},o($Vw6,$VT1),{70:[1,1602]},o($V12,$Vt2,{99:761,95:1603,101:$Vx4,102:$VR,103:$VS,104:$VT}),o($VQ5,$Vu2),o($Vs4,$Vv2,{90:1604,95:1605,91:1606,99:1607,105:1609,107:1610,101:$Vx6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs4,$Vx2,{90:1604,95:1605,91:1606,99:1607,105:1609,107:1610,101:$Vx6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs4,$Vy2,{90:1604,95:1605,91:1606,99:1607,105:1609,107:1610,101:$Vx6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VV5,$Vz2),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,1611],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:1612,121:$VX2,148:$VY2,189:$VZ2}),o($VS5,$VB2),o($VS5,$Vw),o($VS5,$Vx),o($VS5,$Vn),o($VS5,$Vo),o($VS5,$Vy),o($VS5,$Vp),o($VS5,$Vq),o($VQ5,$V33),o($VV5,$V43),o($VV5,$V53),o($VV5,$V63),o($VV5,$V73),{111:[1,1613]},o($VV5,$Vc3),o($VE4,$VW4),{19:$Vi,21:$Vj,22:1614,214:45,215:$Vk},{19:$Vy6,21:$Vz6,22:1616,100:[1,1627],108:[1,1628],109:[1,1629],110:1626,181:1617,191:1615,196:1620,197:1621,198:1622,201:1625,204:[1,1630],205:[1,1631],206:[1,1636],207:[1,1637],208:[1,1638],209:[1,1639],210:[1,1632],211:[1,1633],212:[1,1634],213:[1,1635],214:1619,215:$VA6},o($Vh3,$Vs5),o($VE,$V91,{52:1640,53:[1,1641]}),o($VG,$Vb1),o($VG,$Vc1,{65:1642,67:1643,72:1644,39:1645,78:1646,118:1650,79:[1,1647],80:[1,1648],81:[1,1649],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($VG,$Vg1),o($VG,$Vh1,{68:1651,64:1652,73:1653,92:1654,94:1655,95:1659,99:1660,96:[1,1656],97:[1,1657],98:[1,1658],101:$VB6,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:1662,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($VG,$Vq1),o($Vr1,$Vs1,{82:1663}),o($Vt1,$Vs1,{82:1664}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:1665}),o($Vr1,$Vz1,{99:1251,95:1666,101:$VY5,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:1667}),o($VA1,$VB1,{86:1668}),o($VA1,$VB1,{86:1669}),o($Vt1,$VC1,{105:1255,107:1256,91:1670,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:1671}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,1675],21:[1,1679],22:1673,33:1672,200:1674,214:1676,215:[1,1678],216:[1,1677]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{162:1680}),o($VN1,$VO1),{119:[1,1681],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},{100:[1,1682]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,1684],106:1683,108:[1,1685],109:[1,1686],110:1687,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,1688]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$Vb1),o($VG,$Vc1,{65:1689,67:1690,72:1691,39:1692,78:1693,118:1697,79:[1,1694],80:[1,1695],81:[1,1696],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($VG,$Vg1),o($VG,$Vh1,{68:1698,64:1699,73:1700,92:1701,94:1702,95:1706,99:1707,96:[1,1703],97:[1,1704],98:[1,1705],101:$VC6,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:1709,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($VG,$Vq1),o($Vr1,$Vs1,{82:1710}),o($Vt1,$Vs1,{82:1711}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:1712}),o($Vr1,$Vz1,{99:1287,95:1713,101:$VZ5,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:1714}),o($VA1,$VB1,{86:1715}),o($VA1,$VB1,{86:1716}),o($Vt1,$VC1,{105:1291,107:1292,91:1717,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:1718}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,1722],21:[1,1726],22:1720,33:1719,200:1721,214:1723,215:[1,1725],216:[1,1724]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{162:1727}),o($VN1,$VO1),{119:[1,1728],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},{100:[1,1729]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,1731],106:1730,108:[1,1732],109:[1,1733],110:1734,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,1735]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$VV3),{121:[1,1736]},o($VG,$VJ3),o($Vh2,$VR3),o($Vp2,$VW4),{19:$Vi,21:$Vj,22:1737,214:45,215:$Vk},{19:$VD6,21:$VE6,22:1739,100:[1,1750],108:[1,1751],109:[1,1752],110:1749,181:1740,191:1738,196:1743,197:1744,198:1745,201:1748,204:[1,1753],205:[1,1754],206:[1,1759],207:[1,1760],208:[1,1761],209:[1,1762],210:[1,1755],211:[1,1756],212:[1,1757],213:[1,1758],214:1742,215:$VF6},o($Vr2,$VW4),{19:$Vi,21:$Vj,22:1763,214:45,215:$Vk},{19:$VG6,21:$VH6,22:1765,100:[1,1776],108:[1,1777],109:[1,1778],110:1775,181:1766,191:1764,196:1769,197:1770,198:1771,201:1774,204:[1,1779],205:[1,1780],206:[1,1785],207:[1,1786],208:[1,1787],209:[1,1788],210:[1,1781],211:[1,1782],212:[1,1783],213:[1,1784],214:1768,215:$VI6},o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),o($VA1,$V63),o($VA1,$V73),{111:[1,1789]},o($VA1,$Vc3),o($VA2,$VW4),{19:$Vi,21:$Vj,22:1790,214:45,215:$Vk},{19:$VJ6,21:$VK6,22:1792,100:[1,1803],108:[1,1804],109:[1,1805],110:1802,181:1793,191:1791,196:1796,197:1797,198:1798,201:1801,204:[1,1806],205:[1,1807],206:[1,1812],207:[1,1813],208:[1,1814],209:[1,1815],210:[1,1808],211:[1,1809],212:[1,1810],213:[1,1811],214:1795,215:$VL6},o($VD1,$Vs5),o($VN1,$VW5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($VG,$VX5),o($VG,$Vw3),o($VI,$VJ,{62:1816,64:1817,66:1818,67:1819,73:1822,75:1823,72:1824,39:1825,92:1826,94:1827,87:1829,88:1830,89:1831,78:1832,95:1839,22:1840,91:1842,118:1843,99:1844,214:1847,105:1848,107:1849,19:[1,1846],21:[1,1851],69:[1,1820],71:[1,1821],79:[1,1833],80:[1,1834],81:[1,1835],85:[1,1828],96:[1,1836],97:[1,1837],98:[1,1838],101:$VM6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,1841],215:[1,1850]}),o($Vr2,$Vq2,{84:1345,192:1346,83:1852,190:$V_5}),o($VG,$VB2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:1853,121:$VX2,148:$VY2,189:$VZ2}),o($Vr2,$Vq2,{84:1345,192:1346,83:1854,190:$V_5}),o($Vt1,$Vt2,{99:854,95:1855,101:$VM4,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vu2),o($Vh2,$V33),o($VG,$Vy3),o($VI3,$VJ3),o($Vr1,$VK3),o($VI3,$VL3,{31:1856,193:[1,1857]}),{19:$VM3,21:$VN3,22:662,129:1858,199:$VO3,214:665,215:$VP3},o($VG,$VQ3),o($Vt1,$VK3),o($VG,$VL3,{31:1859,193:[1,1860]}),{19:$VM3,21:$VN3,22:662,129:1861,199:$VO3,214:665,215:$VP3},o($Vx1,$VR3),o($VA1,$VS3),o($VA1,$VT3),o($VA1,$VU3),{100:[1,1862]},o($VA1,$VT1),{100:[1,1864],106:1863,108:[1,1865],109:[1,1866],110:1867,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,1868]},o($Vu1,$VV3),o($VD1,$VK3),o($Vu1,$VL3,{31:1869,193:[1,1870]}),{19:$VM3,21:$VN3,22:662,129:1871,199:$VO3,214:665,215:$VP3},o($VA1,$VW3),{121:[1,1872]},{19:[1,1875],21:[1,1878],22:1874,87:1873,214:1876,215:[1,1877]},o($Vr2,$Vq2,{84:1383,192:1384,83:1879,190:$V06}),o($VG,$VB2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:1880,121:$VX2,148:$VY2,189:$VZ2}),o($Vr2,$Vq2,{84:1383,192:1384,83:1881,190:$V06}),o($Vt1,$Vt2,{99:901,95:1882,101:$VN4,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vu2),o($Vh2,$V33),o($VG,$Vy3),o($VI3,$VJ3),o($Vr1,$VK3),o($VI3,$VL3,{31:1883,193:[1,1884]}),{19:$VM3,21:$VN3,22:662,129:1885,199:$VO3,214:665,215:$VP3},o($VG,$VQ3),o($Vt1,$VK3),o($VG,$VL3,{31:1886,193:[1,1887]}),{19:$VM3,21:$VN3,22:662,129:1888,199:$VO3,214:665,215:$VP3},o($Vx1,$VR3),o($VA1,$VS3),o($VA1,$VT3),o($VA1,$VU3),{100:[1,1889]},o($VA1,$VT1),{100:[1,1891],106:1890,108:[1,1892],109:[1,1893],110:1894,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,1895]},o($Vu1,$VV3),o($VD1,$VK3),o($Vu1,$VL3,{31:1896,193:[1,1897]}),{19:$VM3,21:$VN3,22:662,129:1898,199:$VO3,214:665,215:$VP3},o($VA1,$VW3),{121:[1,1899]},{19:[1,1902],21:[1,1905],22:1901,87:1900,214:1903,215:[1,1904]},o($Vz3,$VV3),{121:[1,1906]},o($Vz3,$VJ3),o($VO4,$VR3),o($VP4,$VW4),{19:$Vi,21:$Vj,22:1907,214:45,215:$Vk},{19:$VN6,21:$VO6,22:1909,100:[1,1920],108:[1,1921],109:[1,1922],110:1919,181:1910,191:1908,196:1913,197:1914,198:1915,201:1918,204:[1,1923],205:[1,1924],206:[1,1929],207:[1,1930],208:[1,1931],209:[1,1932],210:[1,1925],211:[1,1926],212:[1,1927],213:[1,1928],214:1912,215:$VP6},o($VQ4,$VW4),{19:$Vi,21:$Vj,22:1933,214:45,215:$Vk},{19:$VQ6,21:$VR6,22:1935,100:[1,1946],108:[1,1947],109:[1,1948],110:1945,181:1936,191:1934,196:1939,197:1940,198:1941,201:1944,204:[1,1949],205:[1,1950],206:[1,1955],207:[1,1956],208:[1,1957],209:[1,1958],210:[1,1951],211:[1,1952],212:[1,1953],213:[1,1954],214:1938,215:$VS6},o($VS4,$VW4),{19:$Vi,21:$Vj,22:1959,214:45,215:$Vk},{19:$VT6,21:$VU6,22:1961,100:[1,1972],108:[1,1973],109:[1,1974],110:1971,181:1962,191:1960,196:1965,197:1966,198:1967,201:1970,204:[1,1975],205:[1,1976],206:[1,1981],207:[1,1982],208:[1,1983],209:[1,1984],210:[1,1977],211:[1,1978],212:[1,1979],213:[1,1980],214:1964,215:$VV6},o($VF3,$V33),o($VF3,$V43),o($VF3,$V53),o($VF3,$V63),o($VF3,$V73),{111:[1,1985]},o($VF3,$Vc3),o($VD3,$Vs5),o($VG3,$VW5),o($VG3,$VK1),o($VG3,$Vn),o($VG3,$Vo),o($VG3,$Vp),o($VG3,$Vq),o($Vz3,$Vc2),o($Vr,$Vs,{54:1986,41:1987,44:$Vt}),o($Vz3,$Vd2),o($Vz3,$Ve2),o($Vz3,$Vv1),o($Vz3,$Vw1),o($VC3,$Vs1,{82:1988}),o($Vz3,$VE1),o($Vz3,$VF1),{19:[1,1992],21:[1,1996],22:1990,33:1989,200:1991,214:1993,215:[1,1995],216:[1,1994]},{119:[1,1997],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($Vz3,$Vf2),o($Vz3,$Vg2),o($VC3,$Vs1,{82:1998}),o($VO4,$Vy1,{93:1999}),o($VC3,$Vz1,{99:1448,95:2000,101:$V46,102:$VR,103:$VS,104:$VT}),o($VO4,$VG1),o($VO4,$VH1),o($VO4,$VI1),o($VO4,$VJ1),{100:[1,2001]},o($VO4,$VT1),{70:[1,2002]},o($VP4,$Vq2,{83:2003,84:2004,192:2005,190:[1,2006]}),o($VQ4,$Vq2,{83:2007,84:2008,192:2009,190:$VW6}),o($VB3,$Vt2,{99:991,95:2011,101:$VU4,102:$VR,103:$VS,104:$VT}),o($VE3,$Vu2),o($VC3,$Vv2,{90:2012,95:2013,91:2014,99:2015,105:2017,107:2018,101:$VX6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VC3,$Vx2,{90:2012,95:2013,91:2014,99:2015,105:2017,107:2018,101:$VX6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VC3,$Vy2,{90:2012,95:2013,91:2014,99:2015,105:2017,107:2018,101:$VX6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VG3,$Vz2),o($VS4,$Vq2,{83:2019,84:2020,192:2021,190:[1,2022]}),o($V36,$VB2),o($V36,$Vw),o($V36,$Vx),o($V36,$Vn),o($V36,$Vo),o($V36,$Vy),o($V36,$Vp),o($V36,$Vq),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,2023],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:2024,121:$VX2,148:$VY2,189:$VZ2}),o($VE3,$V33),o($VG3,$V43),o($VG3,$V53),o($VG3,$V63),o($VG3,$V73),{111:[1,2025]},o($VG3,$Vc3),o($Vz3,$Vd2),o($Vz3,$Ve2),o($Vz3,$Vv1),o($Vz3,$Vw1),o($VC3,$Vs1,{82:2026}),o($Vz3,$VE1),o($Vz3,$VF1),{19:[1,2030],21:[1,2034],22:2028,33:2027,200:2029,214:2031,215:[1,2033],216:[1,2032]},{119:[1,2035],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($Vz3,$Vf2),o($Vz3,$Vg2),o($VC3,$Vs1,{82:2036}),o($VO4,$Vy1,{93:2037}),o($VC3,$Vz1,{99:1495,95:2038,101:$V56,102:$VR,103:$VS,104:$VT}),o($VO4,$VG1),o($VO4,$VH1),o($VO4,$VI1),o($VO4,$VJ1),{100:[1,2039]},o($VO4,$VT1),{70:[1,2040]},o($VP4,$Vq2,{83:2041,84:2042,192:2043,190:[1,2044]}),o($VQ4,$Vq2,{83:2045,84:2046,192:2047,190:$VY6}),o($VB3,$Vt2,{99:1027,95:2049,101:$VV4,102:$VR,103:$VS,104:$VT}),o($VE3,$Vu2),o($VC3,$Vv2,{90:2050,95:2051,91:2052,99:2053,105:2055,107:2056,101:$VZ6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VC3,$Vx2,{90:2050,95:2051,91:2052,99:2053,105:2055,107:2056,101:$VZ6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VC3,$Vy2,{90:2050,95:2051,91:2052,99:2053,105:2055,107:2056,101:$VZ6,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VG3,$Vz2),o($VS4,$Vq2,{83:2057,84:2058,192:2059,190:[1,2060]}),o($V36,$VB2),o($V36,$Vw),o($V36,$Vx),o($V36,$Vn),o($V36,$Vo),o($V36,$Vy),o($V36,$Vp),o($V36,$Vq),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,2061],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:2062,121:$VX2,148:$VY2,189:$VZ2}),o($VE3,$V33),o($VG3,$V43),o($VG3,$V53),o($VG3,$V63),o($VG3,$V73),{111:[1,2063]},o($VG3,$Vc3),o($Vp2,$V41),o($Vp2,$V51),o($Vp2,$V61),o($Vr1,$Vq5),o($Vr1,$Vr5),{19:$VX4,21:$VY4,22:2065,87:2064,214:1040,215:$VZ4},o($Vr2,$V41),o($Vr2,$V51),o($Vr2,$V61),o($Vt1,$Vq5),o($Vt1,$Vr5),{19:$V$4,21:$V05,22:2067,87:2066,214:1066,215:$V15},o($VA1,$VW5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($VA2,$V41),o($VA2,$V51),o($VA2,$V61),o($VD1,$Vq5),o($VD1,$Vr5),{19:$V25,21:$V35,22:2069,87:2068,214:1093,215:$V45},o($V85,[2,205]),o($V85,[2,207]),o($V85,[2,214]),o($V85,[2,222]),o($Ve6,$Vq5),o($Ve6,$Vr5),{19:$V95,21:$Va5,22:2071,87:2070,214:1124,215:$Vp5},o($V85,[2,201]),o($V85,[2,210]),o($V85,[2,218]),o($V_6,$V$6,{152:2072,153:2073,156:$V07,157:$V17,158:$V27,159:$V37}),o($V47,$V57),o($V67,$V77,{56:2078}),o($V87,$V97,{60:2079}),o($VI,$VJ,{63:2080,73:2081,75:2082,76:2083,92:2086,94:2087,87:2089,88:2090,89:2091,78:2092,39:2093,95:2097,22:2098,91:2100,118:2101,99:2105,214:2108,105:2109,107:2110,19:[1,2107],21:[1,2112],69:[1,2084],71:[1,2085],79:[1,2102],80:[1,2103],81:[1,2104],85:[1,2088],96:[1,2094],97:[1,2095],98:[1,2096],101:$Va7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,2099],215:[1,2111]}),o($V_6,$V$6,{153:2073,152:2113,156:$V07,157:$V17,158:$V27,159:$V37}),{70:$Vt5,134:2114,135:$Vn6},o($Vo6,$Vu5),o($VV2,$VW2,{147:420,136:1167,137:1168,138:1169,144:1170,146:1171,131:2115,148:$VY2,189:$VG5}),o($Vo6,$Vv5),o($Vo6,$Vj4,{139:2116,143:2117,140:$Vp6,141:$Vq6}),o($VV2,$VW2,{147:420,144:1170,146:1171,138:2118,70:$Vw5,135:$Vw5,148:$VY2,189:$VG5}),o($VV2,$VW2,{147:420,144:1170,146:1171,138:2119,70:$Vx5,135:$Vx5,148:$VY2,189:$VG5}),o($Vr6,$Vy5),o($Vr6,$Vz5),o($Vr6,$VA5),o($Vr6,$VB5),{19:$VC5,21:$VD5,22:1157,129:2120,199:$VE5,214:1160,215:$VF5},o($VV2,$VW2,{147:420,130:1164,131:1165,132:1166,136:1167,137:1168,138:1169,144:1170,146:1171,126:2121,148:$VY2,189:$VG5}),o($Vr6,$VH5),o($Vr6,$VI5),o($Vr6,$VJ5),o($Vr6,$Vn),o($Vr6,$Vo),o($Vr6,$Vy),o($Vr6,$Vp),o($Vr6,$Vq),o($Vr4,[2,269]),o($Vs4,$Vt4,{224:2122}),o($VI,$VJ,{92:742,94:743,95:753,99:761,226:2123,73:2124,75:2125,76:2126,87:2130,88:2131,89:2132,78:2133,39:2134,22:2135,91:2137,118:2138,214:2143,105:2144,107:2145,19:[1,2142],21:[1,2147],69:[1,2127],71:[1,2128],79:[1,2139],80:[1,2140],81:[1,2141],85:[1,2129],96:$Vu4,97:$Vv4,98:$Vw4,101:$Vx4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,2136],215:[1,2146]}),o($Vs4,$Vb7),o($VI,$VJ,{92:742,94:743,95:753,99:761,226:2148,73:2149,75:2150,76:2151,87:2155,88:2156,89:2157,78:2158,39:2159,22:2160,91:2162,118:2163,214:2168,105:2169,107:2170,19:[1,2167],21:[1,2172],69:[1,2152],71:[1,2153],79:[1,2164],80:[1,2165],81:[1,2166],85:[1,2154],96:$Vu4,97:$Vv4,98:$Vw4,101:$Vx4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,2161],215:[1,2171]}),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:2173,121:$VX2,148:$VY2,189:$VZ2}),o($Vs4,$VB2),o($Vs4,$Vw),o($Vs4,$Vx),o($Vs4,$Vn),o($Vs4,$Vo),o($Vs4,$Vy),o($Vs4,$Vp),o($Vs4,$Vq),o($Vs4,$Vt2,{99:1192,95:2174,101:$VO5,102:$VR,103:$VS,104:$VT}),o($Vw6,$Vu2),o($Vw6,$V33),o($Vs4,$Vc7),o($VQ5,$VR3),o($VR5,$VS3),o($VR5,$VT3),o($VR5,$VU3),{100:[1,2175]},o($VR5,$VT1),{100:[1,2177],106:2176,108:[1,2178],109:[1,2179],110:2180,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,2181]},o($VR5,$VW3),{121:[1,2182]},{19:[1,2185],21:[1,2188],22:2184,87:2183,214:2186,215:[1,2187]},{193:[1,2191],194:2189,195:[1,2190]},o($Vh3,$V66),o($Vh3,$V76),o($Vh3,$V86),o($Vh3,$Vn),o($Vh3,$Vo),o($Vh3,$VZ3),o($Vh3,$V_3),o($Vh3,$V$3),o($Vh3,$Vp),o($Vh3,$Vq),o($Vh3,$V04),o($Vh3,$V14,{202:2192,203:2193,111:[1,2194]}),o($Vh3,$V24),o($Vh3,$V34),o($Vh3,$V44),o($Vh3,$V54),o($Vh3,$V64),o($Vh3,$V74),o($Vh3,$V84),o($Vh3,$V94),o($Vh3,$Va4),o($Vd7,$V83),o($Vd7,$V93),o($Vd7,$Va3),o($Vd7,$Vb3),o($VG,$Vc2),o($Vr,$Vs,{54:2195,41:2196,44:$Vt}),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:2197}),o($VG,$VE1),o($VG,$VF1),{19:[1,2201],21:[1,2205],22:2199,33:2198,200:2200,214:2202,215:[1,2204],216:[1,2203]},{119:[1,2206],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:2207}),o($Vh2,$Vy1,{93:2208}),o($Vt1,$Vz1,{99:1660,95:2209,101:$VB6,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,2210]},o($Vh2,$VT1),{70:[1,2211]},o($Vp2,$Vq2,{83:2212,84:2213,192:2214,190:[1,2215]}),o($Vr2,$Vq2,{83:2216,84:2217,192:2218,190:$Ve7}),o($Vr1,$Vt2,{99:1251,95:2220,101:$VY5,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vu2),o($Vt1,$Vv2,{90:2221,95:2222,91:2223,99:2224,105:2226,107:2227,101:$Vf7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:2221,95:2222,91:2223,99:2224,105:2226,107:2227,101:$Vf7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vy2,{90:2221,95:2222,91:2223,99:2224,105:2226,107:2227,101:$Vf7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vz2),o($VA2,$Vq2,{83:2228,84:2229,192:2230,190:[1,2231]}),o($Vu1,$VB2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,2232],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:2233,121:$VX2,148:$VY2,189:$VZ2}),o($Vx1,$V33),o($VN1,$V43),o($VN1,$V53),o($VN1,$V63),o($VN1,$V73),{111:[1,2234]},o($VN1,$Vc3),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:2235}),o($VG,$VE1),o($VG,$VF1),{19:[1,2239],21:[1,2243],22:2237,33:2236,200:2238,214:2240,215:[1,2242],216:[1,2241]},{119:[1,2244],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:2245}),o($Vh2,$Vy1,{93:2246}),o($Vt1,$Vz1,{99:1707,95:2247,101:$VC6,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,2248]},o($Vh2,$VT1),{70:[1,2249]},o($Vp2,$Vq2,{83:2250,84:2251,192:2252,190:[1,2253]}),o($Vr2,$Vq2,{83:2254,84:2255,192:2256,190:$Vg7}),o($Vr1,$Vt2,{99:1287,95:2258,101:$VZ5,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vu2),o($Vt1,$Vv2,{90:2259,95:2260,91:2261,99:2262,105:2264,107:2265,101:$Vh7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:2259,95:2260,91:2261,99:2262,105:2264,107:2265,101:$Vh7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vy2,{90:2259,95:2260,91:2261,99:2262,105:2264,107:2265,101:$Vh7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vz2),o($VA2,$Vq2,{83:2266,84:2267,192:2268,190:[1,2269]}),o($Vu1,$VB2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,2270],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:2271,121:$VX2,148:$VY2,189:$VZ2}),o($Vx1,$V33),o($VN1,$V43),o($VN1,$V53),o($VN1,$V63),o($VN1,$V73),{111:[1,2272]},o($VN1,$Vc3),o($Vt1,$Vs5),{193:[1,2275],194:2273,195:[1,2274]},o($Vr1,$V66),o($Vr1,$V76),o($Vr1,$V86),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VZ3),o($Vr1,$V_3),o($Vr1,$V$3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V04),o($Vr1,$V14,{202:2276,203:2277,111:[1,2278]}),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($Vr1,$V94),o($Vr1,$Va4),o($V96,$V83),o($V96,$V93),o($V96,$Va3),o($V96,$Vb3),{193:[1,2281],194:2279,195:[1,2280]},o($Vt1,$V66),o($Vt1,$V76),o($Vt1,$V86),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VZ3),o($Vt1,$V_3),o($Vt1,$V$3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V04),o($Vt1,$V14,{202:2282,203:2283,111:[1,2284]}),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($Vt1,$V94),o($Vt1,$Va4),o($Va6,$V83),o($Va6,$V93),o($Va6,$Va3),o($Va6,$Vb3),{19:[1,2287],21:[1,2290],22:2286,87:2285,214:2288,215:[1,2289]},{193:[1,2293],194:2291,195:[1,2292]},o($VD1,$V66),o($VD1,$V76),o($VD1,$V86),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VZ3),o($VD1,$V_3),o($VD1,$V$3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V04),o($VD1,$V14,{202:2294,203:2295,111:[1,2296]}),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VD1,$V94),o($VD1,$Va4),o($Vb6,$V83),o($Vb6,$V93),o($Vb6,$Va3),o($Vb6,$Vb3),o($VG,$Vb1),o($VG,$Vc1,{65:2297,67:2298,72:2299,39:2300,78:2301,118:2305,79:[1,2302],80:[1,2303],81:[1,2304],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($VG,$Vg1),o($VG,$Vh1,{68:2306,64:2307,73:2308,92:2309,94:2310,95:2314,99:2315,96:[1,2311],97:[1,2312],98:[1,2313],101:$Vi7,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:2317,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($VG,$Vq1),o($Vr1,$Vs1,{82:2318}),o($Vt1,$Vs1,{82:2319}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:2320}),o($Vr1,$Vz1,{99:1844,95:2321,101:$VM6,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:2322}),o($VA1,$VB1,{86:2323}),o($VA1,$VB1,{86:2324}),o($Vt1,$VC1,{105:1848,107:1849,91:2325,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:2326}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,2330],21:[1,2334],22:2328,33:2327,200:2329,214:2331,215:[1,2333],216:[1,2332]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{162:2335}),o($VN1,$VO1),{119:[1,2336],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},{100:[1,2337]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,2339],106:2338,108:[1,2340],109:[1,2341],110:2342,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,2343]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$VV3),{121:[1,2344]},o($VG,$VJ3),o($Vh2,$VR3),o($Vp2,$VW4),{19:$Vi,21:$Vj,22:2345,214:45,215:$Vk},{19:$Vj7,21:$Vk7,22:2347,100:[1,2358],108:[1,2359],109:[1,2360],110:2357,181:2348,191:2346,196:2351,197:2352,198:2353,201:2356,204:[1,2361],205:[1,2362],206:[1,2367],207:[1,2368],208:[1,2369],209:[1,2370],210:[1,2363],211:[1,2364],212:[1,2365],213:[1,2366],214:2350,215:$Vl7},o($Vr2,$VW4),{19:$Vi,21:$Vj,22:2371,214:45,215:$Vk},{19:$Vm7,21:$Vn7,22:2373,100:[1,2384],108:[1,2385],109:[1,2386],110:2383,181:2374,191:2372,196:2377,197:2378,198:2379,201:2382,204:[1,2387],205:[1,2388],206:[1,2393],207:[1,2394],208:[1,2395],209:[1,2396],210:[1,2389],211:[1,2390],212:[1,2391],213:[1,2392],214:2376,215:$Vo7},o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),o($VA1,$V63),o($VA1,$V73),{111:[1,2397]},o($VA1,$Vc3),o($VA2,$VW4),{19:$Vi,21:$Vj,22:2398,214:45,215:$Vk},{19:$Vp7,21:$Vq7,22:2400,100:[1,2411],108:[1,2412],109:[1,2413],110:2410,181:2401,191:2399,196:2404,197:2405,198:2406,201:2409,204:[1,2414],205:[1,2415],206:[1,2420],207:[1,2421],208:[1,2422],209:[1,2423],210:[1,2416],211:[1,2417],212:[1,2418],213:[1,2419],214:2403,215:$Vr7},o($VD1,$Vs5),o($VN1,$VW5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($VG,$VV3),{121:[1,2424]},o($VG,$VJ3),o($Vh2,$VR3),o($Vp2,$VW4),{19:$Vi,21:$Vj,22:2425,214:45,215:$Vk},{19:$Vs7,21:$Vt7,22:2427,100:[1,2438],108:[1,2439],109:[1,2440],110:2437,181:2428,191:2426,196:2431,197:2432,198:2433,201:2436,204:[1,2441],205:[1,2442],206:[1,2447],207:[1,2448],208:[1,2449],209:[1,2450],210:[1,2443],211:[1,2444],212:[1,2445],213:[1,2446],214:2430,215:$Vu7},o($Vr2,$VW4),{19:$Vi,21:$Vj,22:2451,214:45,215:$Vk},{19:$Vv7,21:$Vw7,22:2453,100:[1,2464],108:[1,2465],109:[1,2466],110:2463,181:2454,191:2452,196:2457,197:2458,198:2459,201:2462,204:[1,2467],205:[1,2468],206:[1,2473],207:[1,2474],208:[1,2475],209:[1,2476],210:[1,2469],211:[1,2470],212:[1,2471],213:[1,2472],214:2456,215:$Vx7},o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),o($VA1,$V63),o($VA1,$V73),{111:[1,2477]},o($VA1,$Vc3),o($VA2,$VW4),{19:$Vi,21:$Vj,22:2478,214:45,215:$Vk},{19:$Vy7,21:$Vz7,22:2480,100:[1,2491],108:[1,2492],109:[1,2493],110:2490,181:2481,191:2479,196:2484,197:2485,198:2486,201:2489,204:[1,2494],205:[1,2495],206:[1,2500],207:[1,2501],208:[1,2502],209:[1,2503],210:[1,2496],211:[1,2497],212:[1,2498],213:[1,2499],214:2483,215:$VA7},o($VD1,$Vs5),o($VN1,$VW5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($VC3,$Vs5),{193:[1,2506],194:2504,195:[1,2505]},o($VB3,$V66),o($VB3,$V76),o($VB3,$V86),o($VB3,$Vn),o($VB3,$Vo),o($VB3,$VZ3),o($VB3,$V_3),o($VB3,$V$3),o($VB3,$Vp),o($VB3,$Vq),o($VB3,$V04),o($VB3,$V14,{202:2507,203:2508,111:[1,2509]}),o($VB3,$V24),o($VB3,$V34),o($VB3,$V44),o($VB3,$V54),o($VB3,$V64),o($VB3,$V74),o($VB3,$V84),o($VB3,$V94),o($VB3,$Va4),o($VB7,$V83),o($VB7,$V93),o($VB7,$Va3),o($VB7,$Vb3),{193:[1,2512],194:2510,195:[1,2511]},o($VC3,$V66),o($VC3,$V76),o($VC3,$V86),o($VC3,$Vn),o($VC3,$Vo),o($VC3,$VZ3),o($VC3,$V_3),o($VC3,$V$3),o($VC3,$Vp),o($VC3,$Vq),o($VC3,$V04),o($VC3,$V14,{202:2513,203:2514,111:[1,2515]}),o($VC3,$V24),o($VC3,$V34),o($VC3,$V44),o($VC3,$V54),o($VC3,$V64),o($VC3,$V74),o($VC3,$V84),o($VC3,$V94),o($VC3,$Va4),o($VC7,$V83),o($VC7,$V93),o($VC7,$Va3),o($VC7,$Vb3),{193:[1,2518],194:2516,195:[1,2517]},o($VD3,$V66),o($VD3,$V76),o($VD3,$V86),o($VD3,$Vn),o($VD3,$Vo),o($VD3,$VZ3),o($VD3,$V_3),o($VD3,$V$3),o($VD3,$Vp),o($VD3,$Vq),o($VD3,$V04),o($VD3,$V14,{202:2519,203:2520,111:[1,2521]}),o($VD3,$V24),o($VD3,$V34),o($VD3,$V44),o($VD3,$V54),o($VD3,$V64),o($VD3,$V74),o($VD3,$V84),o($VD3,$V94),o($VD3,$Va4),o($VD7,$V83),o($VD7,$V93),o($VD7,$Va3),o($VD7,$Vb3),{19:[1,2524],21:[1,2527],22:2523,87:2522,214:2525,215:[1,2526]},o($Vz3,$Vw3),o($VI,$VJ,{62:2528,64:2529,66:2530,67:2531,73:2534,75:2535,72:2536,39:2537,92:2538,94:2539,87:2541,88:2542,89:2543,78:2544,95:2551,22:2552,91:2554,118:2555,99:2556,214:2559,105:2560,107:2561,19:[1,2558],21:[1,2563],69:[1,2532],71:[1,2533],79:[1,2545],80:[1,2546],81:[1,2547],85:[1,2540],96:[1,2548],97:[1,2549],98:[1,2550],101:$VE7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,2553],215:[1,2562]}),o($VQ4,$Vq2,{84:2008,192:2009,83:2564,190:$VW6}),o($Vz3,$VB2),o($Vz3,$Vw),o($Vz3,$Vx),o($Vz3,$Vn),o($Vz3,$Vo),o($Vz3,$Vy),o($Vz3,$Vp),o($Vz3,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:2565,121:$VX2,148:$VY2,189:$VZ2}),o($VQ4,$Vq2,{84:2008,192:2009,83:2566,190:$VW6}),o($VC3,$Vt2,{99:1448,95:2567,101:$V46,102:$VR,103:$VS,104:$VT}),o($VO4,$Vu2),o($VO4,$V33),o($Vz3,$Vy3),o($V26,$VJ3),o($VB3,$VK3),o($V26,$VL3,{31:2568,193:[1,2569]}),{19:$VM3,21:$VN3,22:662,129:2570,199:$VO3,214:665,215:$VP3},o($Vz3,$VQ3),o($VC3,$VK3),o($Vz3,$VL3,{31:2571,193:[1,2572]}),{19:$VM3,21:$VN3,22:662,129:2573,199:$VO3,214:665,215:$VP3},o($VE3,$VR3),o($VF3,$VS3),o($VF3,$VT3),o($VF3,$VU3),{100:[1,2574]},o($VF3,$VT1),{100:[1,2576],106:2575,108:[1,2577],109:[1,2578],110:2579,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,2580]},o($V36,$VV3),o($VD3,$VK3),o($V36,$VL3,{31:2581,193:[1,2582]}),{19:$VM3,21:$VN3,22:662,129:2583,199:$VO3,214:665,215:$VP3},o($VF3,$VW3),{121:[1,2584]},{19:[1,2587],21:[1,2590],22:2586,87:2585,214:2588,215:[1,2589]},o($VQ4,$Vq2,{84:2046,192:2047,83:2591,190:$VY6}),o($Vz3,$VB2),o($Vz3,$Vw),o($Vz3,$Vx),o($Vz3,$Vn),o($Vz3,$Vo),o($Vz3,$Vy),o($Vz3,$Vp),o($Vz3,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:2592,121:$VX2,148:$VY2,189:$VZ2}),o($VQ4,$Vq2,{84:2046,192:2047,83:2593,190:$VY6}),o($VC3,$Vt2,{99:1495,95:2594,101:$V56,102:$VR,103:$VS,104:$VT}),o($VO4,$Vu2),o($VO4,$V33),o($Vz3,$Vy3),o($V26,$VJ3),o($VB3,$VK3),o($V26,$VL3,{31:2595,193:[1,2596]}),{19:$VM3,21:$VN3,22:662,129:2597,199:$VO3,214:665,215:$VP3},o($Vz3,$VQ3),o($VC3,$VK3),o($Vz3,$VL3,{31:2598,193:[1,2599]}),{19:$VM3,21:$VN3,22:662,129:2600,199:$VO3,214:665,215:$VP3},o($VE3,$VR3),o($VF3,$VS3),o($VF3,$VT3),o($VF3,$VU3),{100:[1,2601]},o($VF3,$VT1),{100:[1,2603],106:2602,108:[1,2604],109:[1,2605],110:2606,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,2607]},o($V36,$VV3),o($VD3,$VK3),o($V36,$VL3,{31:2608,193:[1,2609]}),{19:$VM3,21:$VN3,22:662,129:2610,199:$VO3,214:665,215:$VP3},o($VF3,$VW3),{121:[1,2611]},{19:[1,2614],21:[1,2617],22:2613,87:2612,214:2615,215:[1,2616]},o($Vr1,$Vg6),o($Vr1,$VK1),o($Vt1,$Vg6),o($Vt1,$VK1),o($VD1,$Vg6),o($VD1,$VK1),o($Ve6,$Vg6),o($Ve6,$VK1),o($V_6,$Vs1,{82:2618}),o($V_6,$VF7),o($V_6,$VG7),o($V_6,$VH7),o($V_6,$VI7),o($V_6,$VJ7),o($V47,$VK7,{57:2619,51:[1,2620]}),o($V67,$VL7,{61:2621,53:[1,2622]}),o($V87,$VM7),o($V87,$VN7,{74:2623,76:2624,78:2625,39:2626,118:2627,79:[1,2628],80:[1,2629],81:[1,2630],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($V87,$VO7),o($V87,$VN5,{77:2631,73:2632,92:2633,94:2634,95:2638,99:2639,96:[1,2635],97:[1,2636],98:[1,2637],101:$VP7,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:2641,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($V87,$VQ7),o($VR7,$Vy1,{93:2642}),o($VS7,$Vz1,{99:2105,95:2643,101:$Va7,102:$VR,103:$VS,104:$VT}),o($VT7,$VB1,{86:2644}),o($VT7,$VB1,{86:2645}),o($VT7,$VB1,{86:2646}),o($V87,$VC1,{105:2109,107:2110,91:2647,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VU7,$VT5),o($VU7,$VU5),o($VR7,$VG1),o($VR7,$VH1),o($VR7,$VI1),o($VR7,$VJ1),o($VT7,$VK1),o($VL1,$VM1,{162:2648}),o($VV7,$VO1),{119:[1,2649],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VU7,$VE1),o($VU7,$VF1),{19:[1,2653],21:[1,2657],22:2651,33:2650,200:2652,214:2654,215:[1,2656],216:[1,2655]},{100:[1,2658]},o($VR7,$VT1),o($VT7,$Vn),o($VT7,$Vo),{100:[1,2660],106:2659,108:[1,2661],109:[1,2662],110:2663,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,2664]},o($VT7,$Vp),o($VT7,$Vq),o($V_6,$Vs1,{82:2665}),o($Vo6,$Vh6),o($Vo6,$Vi6),o($Vo6,$Vj6),o($Vr6,$Vk6),o($Vr6,$Vl6),o($Vr6,$Vm6),o($Vr,$Vs,{46:2666,47:2667,55:2668,59:2669,41:2670,44:$Vt}),{70:[1,2671]},o($Vr4,$VK5,{225:2672,53:[1,2673]}),o($Vs4,$VL5),o($VI,$VJ,{76:2674,78:2675,39:2676,118:2677,79:[1,2678],80:[1,2679],81:[1,2680]}),o($Vs4,$VM5),o($Vs4,$VN5,{77:2681,73:2682,92:2683,94:2684,95:2688,99:2689,96:[1,2685],97:[1,2686],98:[1,2687],101:$VW7,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:2691,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($Vs4,$VP5),o($VR5,$VB1,{86:2692}),o($VR5,$VB1,{86:2693}),o($VR5,$VB1,{86:2694}),o($Vs4,$VC1,{105:2144,107:2145,91:2695,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VS5,$VT5),o($VS5,$VU5),o($VR5,$VK1),o($VL1,$VM1,{162:2696}),o($VV5,$VO1),{119:[1,2697],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VS5,$VE1),o($VS5,$VF1),{19:[1,2701],21:[1,2705],22:2699,33:2698,200:2700,214:2702,215:[1,2704],216:[1,2703]},o($VR5,$Vn),o($VR5,$Vo),{100:[1,2707],106:2706,108:[1,2708],109:[1,2709],110:2710,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,2711]},o($VR5,$Vp),o($VR5,$Vq),o($Vs4,$VL5),o($VI,$VJ,{76:2712,78:2713,39:2714,118:2715,79:[1,2716],80:[1,2717],81:[1,2718]}),o($Vs4,$VM5),o($Vs4,$VN5,{77:2719,73:2720,92:2721,94:2722,95:2726,99:2727,96:[1,2723],97:[1,2724],98:[1,2725],101:$VX7,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:2729,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($Vs4,$VP5),o($VR5,$VB1,{86:2730}),o($VR5,$VB1,{86:2731}),o($VR5,$VB1,{86:2732}),o($Vs4,$VC1,{105:2169,107:2170,91:2733,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VS5,$VT5),o($VS5,$VU5),o($VR5,$VK1),o($VL1,$VM1,{162:2734}),o($VV5,$VO1),{119:[1,2735],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VS5,$VE1),o($VS5,$VF1),{19:[1,2739],21:[1,2743],22:2737,33:2736,200:2738,214:2740,215:[1,2742],216:[1,2741]},o($VR5,$Vn),o($VR5,$Vo),{100:[1,2745],106:2744,108:[1,2746],109:[1,2747],110:2748,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,2749]},o($VR5,$Vp),o($VR5,$Vq),{121:[1,2750]},o($Vw6,$VR3),o($VR5,$V33),o($VR5,$V43),o($VR5,$V53),o($VR5,$V63),o($VR5,$V73),{111:[1,2751]},o($VR5,$Vc3),o($VS5,$Vs5),o($VV5,$VW5),o($VV5,$VK1),o($VV5,$Vn),o($VV5,$Vo),o($VV5,$Vp),o($VV5,$Vq),o($VE4,$V41),o($VE4,$V51),o($VE4,$V61),o($Vh3,$Vq5),o($Vh3,$Vr5),{19:$Vy6,21:$Vz6,22:2753,87:2752,214:1619,215:$VA6},o($VG,$Vw3),o($VI,$VJ,{62:2754,64:2755,66:2756,67:2757,73:2760,75:2761,72:2762,39:2763,92:2764,94:2765,87:2767,88:2768,89:2769,78:2770,95:2777,22:2778,91:2780,118:2781,99:2782,214:2785,105:2786,107:2787,19:[1,2784],21:[1,2789],69:[1,2758],71:[1,2759],79:[1,2771],80:[1,2772],81:[1,2773],85:[1,2766],96:[1,2774],97:[1,2775],98:[1,2776],101:$VY7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,2779],215:[1,2788]}),o($Vr2,$Vq2,{84:2217,192:2218,83:2790,190:$Ve7}),o($VG,$VB2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:2791,121:$VX2,148:$VY2,189:$VZ2}),o($Vr2,$Vq2,{84:2217,192:2218,83:2792,190:$Ve7}),o($Vt1,$Vt2,{99:1660,95:2793,101:$VB6,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vu2),o($Vh2,$V33),o($VG,$Vy3),o($VI3,$VJ3),o($Vr1,$VK3),o($VI3,$VL3,{31:2794,193:[1,2795]}),{19:$VM3,21:$VN3,22:662,129:2796,199:$VO3,214:665,215:$VP3},o($VG,$VQ3),o($Vt1,$VK3),o($VG,$VL3,{31:2797,193:[1,2798]}),{19:$VM3,21:$VN3,22:662,129:2799,199:$VO3,214:665,215:$VP3},o($Vx1,$VR3),o($VA1,$VS3),o($VA1,$VT3),o($VA1,$VU3),{100:[1,2800]},o($VA1,$VT1),{100:[1,2802],106:2801,108:[1,2803],109:[1,2804],110:2805,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,2806]},o($Vu1,$VV3),o($VD1,$VK3),o($Vu1,$VL3,{31:2807,193:[1,2808]}),{19:$VM3,21:$VN3,22:662,129:2809,199:$VO3,214:665,215:$VP3},o($VA1,$VW3),{121:[1,2810]},{19:[1,2813],21:[1,2816],22:2812,87:2811,214:2814,215:[1,2815]},o($Vr2,$Vq2,{84:2255,192:2256,83:2817,190:$Vg7}),o($VG,$VB2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:2818,121:$VX2,148:$VY2,189:$VZ2}),o($Vr2,$Vq2,{84:2255,192:2256,83:2819,190:$Vg7}),o($Vt1,$Vt2,{99:1707,95:2820,101:$VC6,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vu2),o($Vh2,$V33),o($VG,$Vy3),o($VI3,$VJ3),o($Vr1,$VK3),o($VI3,$VL3,{31:2821,193:[1,2822]}),{19:$VM3,21:$VN3,22:662,129:2823,199:$VO3,214:665,215:$VP3},o($VG,$VQ3),o($Vt1,$VK3),o($VG,$VL3,{31:2824,193:[1,2825]}),{19:$VM3,21:$VN3,22:662,129:2826,199:$VO3,214:665,215:$VP3},o($Vx1,$VR3),o($VA1,$VS3),o($VA1,$VT3),o($VA1,$VU3),{100:[1,2827]},o($VA1,$VT1),{100:[1,2829],106:2828,108:[1,2830],109:[1,2831],110:2832,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,2833]},o($Vu1,$VV3),o($VD1,$VK3),o($Vu1,$VL3,{31:2834,193:[1,2835]}),{19:$VM3,21:$VN3,22:662,129:2836,199:$VO3,214:665,215:$VP3},o($VA1,$VW3),{121:[1,2837]},{19:[1,2840],21:[1,2843],22:2839,87:2838,214:2841,215:[1,2842]},o($Vp2,$V41),o($Vp2,$V51),o($Vp2,$V61),o($Vr1,$Vq5),o($Vr1,$Vr5),{19:$VD6,21:$VE6,22:2845,87:2844,214:1742,215:$VF6},o($Vr2,$V41),o($Vr2,$V51),o($Vr2,$V61),o($Vt1,$Vq5),o($Vt1,$Vr5),{19:$VG6,21:$VH6,22:2847,87:2846,214:1768,215:$VI6},o($VA1,$VW5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($VA2,$V41),o($VA2,$V51),o($VA2,$V61),o($VD1,$Vq5),o($VD1,$Vr5),{19:$VJ6,21:$VK6,22:2849,87:2848,214:1795,215:$VL6},o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:2850}),o($VG,$VE1),o($VG,$VF1),{19:[1,2854],21:[1,2858],22:2852,33:2851,200:2853,214:2855,215:[1,2857],216:[1,2856]},{119:[1,2859],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:2860}),o($Vh2,$Vy1,{93:2861}),o($Vt1,$Vz1,{99:2315,95:2862,101:$Vi7,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,2863]},o($Vh2,$VT1),{70:[1,2864]},o($Vp2,$Vq2,{83:2865,84:2866,192:2867,190:[1,2868]}),o($Vr2,$Vq2,{83:2869,84:2870,192:2871,190:$VZ7}),o($Vr1,$Vt2,{99:1844,95:2873,101:$VM6,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vu2),o($Vt1,$Vv2,{90:2874,95:2875,91:2876,99:2877,105:2879,107:2880,101:$V_7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:2874,95:2875,91:2876,99:2877,105:2879,107:2880,101:$V_7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vy2,{90:2874,95:2875,91:2876,99:2877,105:2879,107:2880,101:$V_7,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vz2),o($VA2,$Vq2,{83:2881,84:2882,192:2883,190:[1,2884]}),o($Vu1,$VB2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,2885],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:2886,121:$VX2,148:$VY2,189:$VZ2}),o($Vx1,$V33),o($VN1,$V43),o($VN1,$V53),o($VN1,$V63),o($VN1,$V73),{111:[1,2887]},o($VN1,$Vc3),o($Vt1,$Vs5),{193:[1,2890],194:2888,195:[1,2889]},o($Vr1,$V66),o($Vr1,$V76),o($Vr1,$V86),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VZ3),o($Vr1,$V_3),o($Vr1,$V$3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V04),o($Vr1,$V14,{202:2891,203:2892,111:[1,2893]}),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($Vr1,$V94),o($Vr1,$Va4),o($V96,$V83),o($V96,$V93),o($V96,$Va3),o($V96,$Vb3),{193:[1,2896],194:2894,195:[1,2895]},o($Vt1,$V66),o($Vt1,$V76),o($Vt1,$V86),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VZ3),o($Vt1,$V_3),o($Vt1,$V$3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V04),o($Vt1,$V14,{202:2897,203:2898,111:[1,2899]}),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($Vt1,$V94),o($Vt1,$Va4),o($Va6,$V83),o($Va6,$V93),o($Va6,$Va3),o($Va6,$Vb3),{19:[1,2902],21:[1,2905],22:2901,87:2900,214:2903,215:[1,2904]},{193:[1,2908],194:2906,195:[1,2907]},o($VD1,$V66),o($VD1,$V76),o($VD1,$V86),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VZ3),o($VD1,$V_3),o($VD1,$V$3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V04),o($VD1,$V14,{202:2909,203:2910,111:[1,2911]}),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VD1,$V94),o($VD1,$Va4),o($Vb6,$V83),o($Vb6,$V93),o($Vb6,$Va3),o($Vb6,$Vb3),o($Vt1,$Vs5),{193:[1,2914],194:2912,195:[1,2913]},o($Vr1,$V66),o($Vr1,$V76),o($Vr1,$V86),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VZ3),o($Vr1,$V_3),o($Vr1,$V$3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V04),o($Vr1,$V14,{202:2915,203:2916,111:[1,2917]}),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($Vr1,$V94),o($Vr1,$Va4),o($V96,$V83),o($V96,$V93),o($V96,$Va3),o($V96,$Vb3),{193:[1,2920],194:2918,195:[1,2919]},o($Vt1,$V66),o($Vt1,$V76),o($Vt1,$V86),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VZ3),o($Vt1,$V_3),o($Vt1,$V$3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V04),o($Vt1,$V14,{202:2921,203:2922,111:[1,2923]}),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($Vt1,$V94),o($Vt1,$Va4),o($Va6,$V83),o($Va6,$V93),o($Va6,$Va3),o($Va6,$Vb3),{19:[1,2926],21:[1,2929],22:2925,87:2924,214:2927,215:[1,2928]},{193:[1,2932],194:2930,195:[1,2931]},o($VD1,$V66),o($VD1,$V76),o($VD1,$V86),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VZ3),o($VD1,$V_3),o($VD1,$V$3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V04),o($VD1,$V14,{202:2933,203:2934,111:[1,2935]}),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VD1,$V94),o($VD1,$Va4),o($Vb6,$V83),o($Vb6,$V93),o($Vb6,$Va3),o($Vb6,$Vb3),o($VP4,$V41),o($VP4,$V51),o($VP4,$V61),o($VB3,$Vq5),o($VB3,$Vr5),{19:$VN6,21:$VO6,22:2937,87:2936,214:1912,215:$VP6},o($VQ4,$V41),o($VQ4,$V51),o($VQ4,$V61),o($VC3,$Vq5),o($VC3,$Vr5),{19:$VQ6,21:$VR6,22:2939,87:2938,214:1938,215:$VS6},o($VS4,$V41),o($VS4,$V51),o($VS4,$V61),o($VD3,$Vq5),o($VD3,$Vr5),{19:$VT6,21:$VU6,22:2941,87:2940,214:1964,215:$VV6},o($VF3,$VW5),o($VF3,$VK1),o($VF3,$Vn),o($VF3,$Vo),o($VF3,$Vp),o($VF3,$Vq),o($Vz3,$Vb1),o($VI,$VJ,{65:2942,67:2943,72:2944,39:2945,78:2946,118:2950,51:$Vc1,53:$Vc1,70:$Vc1,79:[1,2947],80:[1,2948],81:[1,2949]}),o($Vz3,$Vg1),o($Vz3,$Vh1,{68:2951,64:2952,73:2953,92:2954,94:2955,95:2959,99:2960,96:[1,2956],97:[1,2957],98:[1,2958],101:$V$7,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:2962,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($Vz3,$Vq1),o($VB3,$Vs1,{82:2963}),o($VC3,$Vs1,{82:2964}),o($V36,$Vv1),o($V36,$Vw1),o($VE3,$Vy1,{93:2965}),o($VB3,$Vz1,{99:2556,95:2966,101:$VE7,102:$VR,103:$VS,104:$VT}),o($VF3,$VB1,{86:2967}),o($VF3,$VB1,{86:2968}),o($VF3,$VB1,{86:2969}),o($VC3,$VC1,{105:2560,107:2561,91:2970,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD3,$Vs1,{82:2971}),o($V36,$VE1),o($V36,$VF1),{19:[1,2975],21:[1,2979],22:2973,33:2972,200:2974,214:2976,215:[1,2978],216:[1,2977]},o($VE3,$VG1),o($VE3,$VH1),o($VE3,$VI1),o($VE3,$VJ1),o($VF3,$VK1),o($VL1,$VM1,{162:2980}),o($VG3,$VO1),{119:[1,2981],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},{100:[1,2982]},o($VE3,$VT1),o($VF3,$Vn),o($VF3,$Vo),{100:[1,2984],106:2983,108:[1,2985],109:[1,2986],110:2987,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,2988]},o($VF3,$Vp),o($VF3,$Vq),o($Vz3,$VV3),{121:[1,2989]},o($Vz3,$VJ3),o($VO4,$VR3),o($VP4,$VW4),{19:$Vi,21:$Vj,22:2990,214:45,215:$Vk},{19:$V08,21:$V18,22:2992,100:[1,3003],108:[1,3004],109:[1,3005],110:3002,181:2993,191:2991,196:2996,197:2997,198:2998,201:3001,204:[1,3006],205:[1,3007],206:[1,3012],207:[1,3013],208:[1,3014],209:[1,3015],210:[1,3008],211:[1,3009],212:[1,3010],213:[1,3011],214:2995,215:$V28},o($VQ4,$VW4),{19:$Vi,21:$Vj,22:3016,214:45,215:$Vk},{19:$V38,21:$V48,22:3018,100:[1,3029],108:[1,3030],109:[1,3031],110:3028,181:3019,191:3017,196:3022,197:3023,198:3024,201:3027,204:[1,3032],205:[1,3033],206:[1,3038],207:[1,3039],208:[1,3040],209:[1,3041],210:[1,3034],211:[1,3035],212:[1,3036],213:[1,3037],214:3021,215:$V58},o($VF3,$V33),o($VF3,$V43),o($VF3,$V53),o($VF3,$V63),o($VF3,$V73),{111:[1,3042]},o($VF3,$Vc3),o($VS4,$VW4),{19:$Vi,21:$Vj,22:3043,214:45,215:$Vk},{19:$V68,21:$V78,22:3045,100:[1,3056],108:[1,3057],109:[1,3058],110:3055,181:3046,191:3044,196:3049,197:3050,198:3051,201:3054,204:[1,3059],205:[1,3060],206:[1,3065],207:[1,3066],208:[1,3067],209:[1,3068],210:[1,3061],211:[1,3062],212:[1,3063],213:[1,3064],214:3048,215:$V88},o($VD3,$Vs5),o($VG3,$VW5),o($VG3,$VK1),o($VG3,$Vn),o($VG3,$Vo),o($VG3,$Vp),o($VG3,$Vq),o($Vz3,$VV3),{121:[1,3069]},o($Vz3,$VJ3),o($VO4,$VR3),o($VP4,$VW4),{19:$Vi,21:$Vj,22:3070,214:45,215:$Vk},{19:$V98,21:$Va8,22:3072,100:[1,3083],108:[1,3084],109:[1,3085],110:3082,181:3073,191:3071,196:3076,197:3077,198:3078,201:3081,204:[1,3086],205:[1,3087],206:[1,3092],207:[1,3093],208:[1,3094],209:[1,3095],210:[1,3088],211:[1,3089],212:[1,3090],213:[1,3091],214:3075,215:$Vb8},o($VQ4,$VW4),{19:$Vi,21:$Vj,22:3096,214:45,215:$Vk},{19:$Vc8,21:$Vd8,22:3098,100:[1,3109],108:[1,3110],109:[1,3111],110:3108,181:3099,191:3097,196:3102,197:3103,198:3104,201:3107,204:[1,3112],205:[1,3113],206:[1,3118],207:[1,3119],208:[1,3120],209:[1,3121],210:[1,3114],211:[1,3115],212:[1,3116],213:[1,3117],214:3101,215:$Ve8},o($VF3,$V33),o($VF3,$V43),o($VF3,$V53),o($VF3,$V63),o($VF3,$V73),{111:[1,3122]},o($VF3,$Vc3),o($VS4,$VW4),{19:$Vi,21:$Vj,22:3123,214:45,215:$Vk},{19:$Vf8,21:$Vg8,22:3125,100:[1,3136],108:[1,3137],109:[1,3138],110:3135,181:3126,191:3124,196:3129,197:3130,198:3131,201:3134,204:[1,3139],205:[1,3140],206:[1,3145],207:[1,3146],208:[1,3147],209:[1,3148],210:[1,3141],211:[1,3142],212:[1,3143],213:[1,3144],214:3128,215:$Vh8},o($VD3,$Vs5),o($VG3,$VW5),o($VG3,$VK1),o($VG3,$Vn),o($VG3,$Vo),o($VG3,$Vp),o($VG3,$Vq),o($Vi8,$Vq2,{83:3149,84:3150,192:3151,190:$Vj8}),o($V67,$Vk8),o($Vr,$Vs,{55:3153,59:3154,41:3155,44:$Vt}),o($V87,$Vl8),o($Vr,$Vs,{59:3156,41:3157,44:$Vt}),o($V87,$Vm8),o($V87,$Vn8),o($V87,$VT5),o($V87,$VU5),{119:[1,3158],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($V87,$VE1),o($V87,$VF1),{19:[1,3162],21:[1,3166],22:3160,33:3159,200:3161,214:3163,215:[1,3165],216:[1,3164]},o($V87,$Vo8),o($V87,$Vv6),o($Vp8,$Vy1,{93:3167}),o($V87,$Vz1,{99:2639,95:3168,101:$VP7,102:$VR,103:$VS,104:$VT}),o($Vp8,$VG1),o($Vp8,$VH1),o($Vp8,$VI1),o($Vp8,$VJ1),{100:[1,3169]},o($Vp8,$VT1),{70:[1,3170]},o($VS7,$Vt2,{99:2105,95:3171,101:$Va7,102:$VR,103:$VS,104:$VT}),o($VR7,$Vu2),o($V87,$Vv2,{90:3172,95:3173,91:3174,99:3175,105:3177,107:3178,101:$Vq8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V87,$Vx2,{90:3172,95:3173,91:3174,99:3175,105:3177,107:3178,101:$Vq8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V87,$Vy2,{90:3172,95:3173,91:3174,99:3175,105:3177,107:3178,101:$Vq8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VV7,$Vz2),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,3179],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:3180,121:$VX2,148:$VY2,189:$VZ2}),o($VU7,$VB2),o($VU7,$Vw),o($VU7,$Vx),o($VU7,$Vn),o($VU7,$Vo),o($VU7,$Vy),o($VU7,$Vp),o($VU7,$Vq),o($VR7,$V33),o($VV7,$V43),o($VV7,$V53),o($VV7,$V63),o($VV7,$V73),{111:[1,3181]},o($VV7,$Vc3),o($Vi8,$Vq2,{84:3150,192:3151,83:3182,190:$Vj8}),o($Vr8,$V$6,{152:3183,153:3184,156:$Vs8,157:$Vt8,158:$Vu8,159:$Vv8}),o($Vw8,$V57),o($Vx8,$V77,{56:3189}),o($Vy8,$V97,{60:3190}),o($VI,$VJ,{63:3191,73:3192,75:3193,76:3194,92:3197,94:3198,87:3200,88:3201,89:3202,78:3203,39:3204,95:3208,22:3209,91:3211,118:3212,99:3216,214:3219,105:3220,107:3221,19:[1,3218],21:[1,3223],69:[1,3195],71:[1,3196],79:[1,3213],80:[1,3214],81:[1,3215],85:[1,3199],96:[1,3205],97:[1,3206],98:[1,3207],101:$Vz8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,3210],215:[1,3222]}),o($Vr8,$V$6,{153:3184,152:3224,156:$Vs8,157:$Vt8,158:$Vu8,159:$Vv8}),o($Vs4,$Vs6),o($Vr,$Vs,{223:3225,41:3226,44:$Vt}),o($Vs4,$Vt6),o($Vs4,$VT5),o($Vs4,$VU5),{119:[1,3227],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($Vs4,$VE1),o($Vs4,$VF1),{19:[1,3231],21:[1,3235],22:3229,33:3228,200:3230,214:3232,215:[1,3234],216:[1,3233]},o($Vs4,$Vu6),o($Vs4,$Vv6),o($Vw6,$Vy1,{93:3236}),o($Vs4,$Vz1,{99:2689,95:3237,101:$VW7,102:$VR,103:$VS,104:$VT}),o($Vw6,$VG1),o($Vw6,$VH1),o($Vw6,$VI1),o($Vw6,$VJ1),{100:[1,3238]},o($Vw6,$VT1),{70:[1,3239]},o($Vs4,$Vv2,{90:3240,95:3241,91:3242,99:3243,105:3245,107:3246,101:$VA8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs4,$Vx2,{90:3240,95:3241,91:3242,99:3243,105:3245,107:3246,101:$VA8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs4,$Vy2,{90:3240,95:3241,91:3242,99:3243,105:3245,107:3246,101:$VA8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VV5,$Vz2),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,3247],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:3248,121:$VX2,148:$VY2,189:$VZ2}),o($VS5,$VB2),o($VS5,$Vw),o($VS5,$Vx),o($VS5,$Vn),o($VS5,$Vo),o($VS5,$Vy),o($VS5,$Vp),o($VS5,$Vq),o($VV5,$V43),o($VV5,$V53),o($VV5,$V63),o($VV5,$V73),{111:[1,3249]},o($VV5,$Vc3),o($Vs4,$Vt6),o($Vs4,$VT5),o($Vs4,$VU5),{119:[1,3250],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($Vs4,$VE1),o($Vs4,$VF1),{19:[1,3254],21:[1,3258],22:3252,33:3251,200:3253,214:3255,215:[1,3257],216:[1,3256]},o($Vs4,$Vu6),o($Vs4,$Vv6),o($Vw6,$Vy1,{93:3259}),o($Vs4,$Vz1,{99:2727,95:3260,101:$VX7,102:$VR,103:$VS,104:$VT}),o($Vw6,$VG1),o($Vw6,$VH1),o($Vw6,$VI1),o($Vw6,$VJ1),{100:[1,3261]},o($Vw6,$VT1),{70:[1,3262]},o($Vs4,$Vv2,{90:3263,95:3264,91:3265,99:3266,105:3268,107:3269,101:$VB8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs4,$Vx2,{90:3263,95:3264,91:3265,99:3266,105:3268,107:3269,101:$VB8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs4,$Vy2,{90:3263,95:3264,91:3265,99:3266,105:3268,107:3269,101:$VB8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VV5,$Vz2),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,3270],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:3271,121:$VX2,148:$VY2,189:$VZ2}),o($VS5,$VB2),o($VS5,$Vw),o($VS5,$Vx),o($VS5,$Vn),o($VS5,$Vo),o($VS5,$Vy),o($VS5,$Vp),o($VS5,$Vq),o($VV5,$V43),o($VV5,$V53),o($VV5,$V63),o($VV5,$V73),{111:[1,3272]},o($VV5,$Vc3),o($Vs4,$Vs5),{19:[1,3275],21:[1,3278],22:3274,87:3273,214:3276,215:[1,3277]},o($Vh3,$Vg6),o($Vh3,$VK1),o($VG,$Vb1),o($VG,$Vc1,{65:3279,67:3280,72:3281,39:3282,78:3283,118:3287,79:[1,3284],80:[1,3285],81:[1,3286],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($VG,$Vg1),o($VG,$Vh1,{68:3288,64:3289,73:3290,92:3291,94:3292,95:3296,99:3297,96:[1,3293],97:[1,3294],98:[1,3295],101:$VC8,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:3299,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($VG,$Vq1),o($Vr1,$Vs1,{82:3300}),o($Vt1,$Vs1,{82:3301}),o($Vu1,$Vv1),o($Vu1,$Vw1),o($Vx1,$Vy1,{93:3302}),o($Vr1,$Vz1,{99:2782,95:3303,101:$VY7,102:$VR,103:$VS,104:$VT}),o($VA1,$VB1,{86:3304}),o($VA1,$VB1,{86:3305}),o($VA1,$VB1,{86:3306}),o($Vt1,$VC1,{105:2786,107:2787,91:3307,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VD1,$Vs1,{82:3308}),o($Vu1,$VE1),o($Vu1,$VF1),{19:[1,3312],21:[1,3316],22:3310,33:3309,200:3311,214:3313,215:[1,3315],216:[1,3314]},o($Vx1,$VG1),o($Vx1,$VH1),o($Vx1,$VI1),o($Vx1,$VJ1),o($VA1,$VK1),o($VL1,$VM1,{162:3317}),o($VN1,$VO1),{119:[1,3318],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},{100:[1,3319]},o($Vx1,$VT1),o($VA1,$Vn),o($VA1,$Vo),{100:[1,3321],106:3320,108:[1,3322],109:[1,3323],110:3324,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,3325]},o($VA1,$Vp),o($VA1,$Vq),o($VG,$VV3),{121:[1,3326]},o($VG,$VJ3),o($Vh2,$VR3),o($Vp2,$VW4),{19:$Vi,21:$Vj,22:3327,214:45,215:$Vk},{19:$VD8,21:$VE8,22:3329,100:[1,3340],108:[1,3341],109:[1,3342],110:3339,181:3330,191:3328,196:3333,197:3334,198:3335,201:3338,204:[1,3343],205:[1,3344],206:[1,3349],207:[1,3350],208:[1,3351],209:[1,3352],210:[1,3345],211:[1,3346],212:[1,3347],213:[1,3348],214:3332,215:$VF8},o($Vr2,$VW4),{19:$Vi,21:$Vj,22:3353,214:45,215:$Vk},{19:$VG8,21:$VH8,22:3355,100:[1,3366],108:[1,3367],109:[1,3368],110:3365,181:3356,191:3354,196:3359,197:3360,198:3361,201:3364,204:[1,3369],205:[1,3370],206:[1,3375],207:[1,3376],208:[1,3377],209:[1,3378],210:[1,3371],211:[1,3372],212:[1,3373],213:[1,3374],214:3358,215:$VI8},o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),o($VA1,$V63),o($VA1,$V73),{111:[1,3379]},o($VA1,$Vc3),o($VA2,$VW4),{19:$Vi,21:$Vj,22:3380,214:45,215:$Vk},{19:$VJ8,21:$VK8,22:3382,100:[1,3393],108:[1,3394],109:[1,3395],110:3392,181:3383,191:3381,196:3386,197:3387,198:3388,201:3391,204:[1,3396],205:[1,3397],206:[1,3402],207:[1,3403],208:[1,3404],209:[1,3405],210:[1,3398],211:[1,3399],212:[1,3400],213:[1,3401],214:3385,215:$VL8},o($VD1,$Vs5),o($VN1,$VW5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($VG,$VV3),{121:[1,3406]},o($VG,$VJ3),o($Vh2,$VR3),o($Vp2,$VW4),{19:$Vi,21:$Vj,22:3407,214:45,215:$Vk},{19:$VM8,21:$VN8,22:3409,100:[1,3420],108:[1,3421],109:[1,3422],110:3419,181:3410,191:3408,196:3413,197:3414,198:3415,201:3418,204:[1,3423],205:[1,3424],206:[1,3429],207:[1,3430],208:[1,3431],209:[1,3432],210:[1,3425],211:[1,3426],212:[1,3427],213:[1,3428],214:3412,215:$VO8},o($Vr2,$VW4),{19:$Vi,21:$Vj,22:3433,214:45,215:$Vk},{19:$VP8,21:$VQ8,22:3435,100:[1,3446],108:[1,3447],109:[1,3448],110:3445,181:3436,191:3434,196:3439,197:3440,198:3441,201:3444,204:[1,3449],205:[1,3450],206:[1,3455],207:[1,3456],208:[1,3457],209:[1,3458],210:[1,3451],211:[1,3452],212:[1,3453],213:[1,3454],214:3438,215:$VR8},o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),o($VA1,$V63),o($VA1,$V73),{111:[1,3459]},o($VA1,$Vc3),o($VA2,$VW4),{19:$Vi,21:$Vj,22:3460,214:45,215:$Vk},{19:$VS8,21:$VT8,22:3462,100:[1,3473],108:[1,3474],109:[1,3475],110:3472,181:3463,191:3461,196:3466,197:3467,198:3468,201:3471,204:[1,3476],205:[1,3477],206:[1,3482],207:[1,3483],208:[1,3484],209:[1,3485],210:[1,3478],211:[1,3479],212:[1,3480],213:[1,3481],214:3465,215:$VU8},o($VD1,$Vs5),o($VN1,$VW5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($Vr1,$Vg6),o($Vr1,$VK1),o($Vt1,$Vg6),o($Vt1,$VK1),o($VD1,$Vg6),o($VD1,$VK1),o($Vr2,$Vq2,{84:2870,192:2871,83:3486,190:$VZ7}),o($VG,$VB2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:3487,121:$VX2,148:$VY2,189:$VZ2}),o($Vr2,$Vq2,{84:2870,192:2871,83:3488,190:$VZ7}),o($Vt1,$Vt2,{99:2315,95:3489,101:$Vi7,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vu2),o($Vh2,$V33),o($VG,$Vy3),o($VI3,$VJ3),o($Vr1,$VK3),o($VI3,$VL3,{31:3490,193:[1,3491]}),{19:$VM3,21:$VN3,22:662,129:3492,199:$VO3,214:665,215:$VP3},o($VG,$VQ3),o($Vt1,$VK3),o($VG,$VL3,{31:3493,193:[1,3494]}),{19:$VM3,21:$VN3,22:662,129:3495,199:$VO3,214:665,215:$VP3},o($Vx1,$VR3),o($VA1,$VS3),o($VA1,$VT3),o($VA1,$VU3),{100:[1,3496]},o($VA1,$VT1),{100:[1,3498],106:3497,108:[1,3499],109:[1,3500],110:3501,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,3502]},o($Vu1,$VV3),o($VD1,$VK3),o($Vu1,$VL3,{31:3503,193:[1,3504]}),{19:$VM3,21:$VN3,22:662,129:3505,199:$VO3,214:665,215:$VP3},o($VA1,$VW3),{121:[1,3506]},{19:[1,3509],21:[1,3512],22:3508,87:3507,214:3510,215:[1,3511]},o($Vp2,$V41),o($Vp2,$V51),o($Vp2,$V61),o($Vr1,$Vq5),o($Vr1,$Vr5),{19:$Vj7,21:$Vk7,22:3514,87:3513,214:2350,215:$Vl7},o($Vr2,$V41),o($Vr2,$V51),o($Vr2,$V61),o($Vt1,$Vq5),o($Vt1,$Vr5),{19:$Vm7,21:$Vn7,22:3516,87:3515,214:2376,215:$Vo7},o($VA1,$VW5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($VA2,$V41),o($VA2,$V51),o($VA2,$V61),o($VD1,$Vq5),o($VD1,$Vr5),{19:$Vp7,21:$Vq7,22:3518,87:3517,214:2403,215:$Vr7},o($Vp2,$V41),o($Vp2,$V51),o($Vp2,$V61),o($Vr1,$Vq5),o($Vr1,$Vr5),{19:$Vs7,21:$Vt7,22:3520,87:3519,214:2430,215:$Vu7},o($Vr2,$V41),o($Vr2,$V51),o($Vr2,$V61),o($Vt1,$Vq5),o($Vt1,$Vr5),{19:$Vv7,21:$Vw7,22:3522,87:3521,214:2456,215:$Vx7},o($VA1,$VW5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($VA2,$V41),o($VA2,$V51),o($VA2,$V61),o($VD1,$Vq5),o($VD1,$Vr5),{19:$Vy7,21:$Vz7,22:3524,87:3523,214:2483,215:$VA7},o($VB3,$Vg6),o($VB3,$VK1),o($VC3,$Vg6),o($VC3,$VK1),o($VD3,$Vg6),o($VD3,$VK1),o($Vz3,$Vd2),o($Vz3,$Ve2),o($Vz3,$Vv1),o($Vz3,$Vw1),o($VC3,$Vs1,{82:3525}),o($Vz3,$VE1),o($Vz3,$VF1),{19:[1,3529],21:[1,3533],22:3527,33:3526,200:3528,214:3530,215:[1,3532],216:[1,3531]},{119:[1,3534],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($Vz3,$Vf2),o($Vz3,$Vg2),o($VC3,$Vs1,{82:3535}),o($VO4,$Vy1,{93:3536}),o($VC3,$Vz1,{99:2960,95:3537,101:$V$7,102:$VR,103:$VS,104:$VT}),o($VO4,$VG1),o($VO4,$VH1),o($VO4,$VI1),o($VO4,$VJ1),{100:[1,3538]},o($VO4,$VT1),{70:[1,3539]},o($VP4,$Vq2,{83:3540,84:3541,192:3542,190:[1,3543]}),o($VQ4,$Vq2,{83:3544,84:3545,192:3546,190:$VV8}),o($VB3,$Vt2,{99:2556,95:3548,101:$VE7,102:$VR,103:$VS,104:$VT}),o($VE3,$Vu2),o($VC3,$Vv2,{90:3549,95:3550,91:3551,99:3552,105:3554,107:3555,101:$VW8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VC3,$Vx2,{90:3549,95:3550,91:3551,99:3552,105:3554,107:3555,101:$VW8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VC3,$Vy2,{90:3549,95:3550,91:3551,99:3552,105:3554,107:3555,101:$VW8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VG3,$Vz2),o($VS4,$Vq2,{83:3556,84:3557,192:3558,190:[1,3559]}),o($V36,$VB2),o($V36,$Vw),o($V36,$Vx),o($V36,$Vn),o($V36,$Vo),o($V36,$Vy),o($V36,$Vp),o($V36,$Vq),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,3560],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:3561,121:$VX2,148:$VY2,189:$VZ2}),o($VE3,$V33),o($VG3,$V43),o($VG3,$V53),o($VG3,$V63),o($VG3,$V73),{111:[1,3562]},o($VG3,$Vc3),o($VC3,$Vs5),{193:[1,3565],194:3563,195:[1,3564]},o($VB3,$V66),o($VB3,$V76),o($VB3,$V86),o($VB3,$Vn),o($VB3,$Vo),o($VB3,$VZ3),o($VB3,$V_3),o($VB3,$V$3),o($VB3,$Vp),o($VB3,$Vq),o($VB3,$V04),o($VB3,$V14,{202:3566,203:3567,111:[1,3568]}),o($VB3,$V24),o($VB3,$V34),o($VB3,$V44),o($VB3,$V54),o($VB3,$V64),o($VB3,$V74),o($VB3,$V84),o($VB3,$V94),o($VB3,$Va4),o($VB7,$V83),o($VB7,$V93),o($VB7,$Va3),o($VB7,$Vb3),{193:[1,3571],194:3569,195:[1,3570]},o($VC3,$V66),o($VC3,$V76),o($VC3,$V86),o($VC3,$Vn),o($VC3,$Vo),o($VC3,$VZ3),o($VC3,$V_3),o($VC3,$V$3),o($VC3,$Vp),o($VC3,$Vq),o($VC3,$V04),o($VC3,$V14,{202:3572,203:3573,111:[1,3574]}),o($VC3,$V24),o($VC3,$V34),o($VC3,$V44),o($VC3,$V54),o($VC3,$V64),o($VC3,$V74),o($VC3,$V84),o($VC3,$V94),o($VC3,$Va4),o($VC7,$V83),o($VC7,$V93),o($VC7,$Va3),o($VC7,$Vb3),{19:[1,3577],21:[1,3580],22:3576,87:3575,214:3578,215:[1,3579]},{193:[1,3583],194:3581,195:[1,3582]},o($VD3,$V66),o($VD3,$V76),o($VD3,$V86),o($VD3,$Vn),o($VD3,$Vo),o($VD3,$VZ3),o($VD3,$V_3),o($VD3,$V$3),o($VD3,$Vp),o($VD3,$Vq),o($VD3,$V04),o($VD3,$V14,{202:3584,203:3585,111:[1,3586]}),o($VD3,$V24),o($VD3,$V34),o($VD3,$V44),o($VD3,$V54),o($VD3,$V64),o($VD3,$V74),o($VD3,$V84),o($VD3,$V94),o($VD3,$Va4),o($VD7,$V83),o($VD7,$V93),o($VD7,$Va3),o($VD7,$Vb3),o($VC3,$Vs5),{193:[1,3589],194:3587,195:[1,3588]},o($VB3,$V66),o($VB3,$V76),o($VB3,$V86),o($VB3,$Vn),o($VB3,$Vo),o($VB3,$VZ3),o($VB3,$V_3),o($VB3,$V$3),o($VB3,$Vp),o($VB3,$Vq),o($VB3,$V04),o($VB3,$V14,{202:3590,203:3591,111:[1,3592]}),o($VB3,$V24),o($VB3,$V34),o($VB3,$V44),o($VB3,$V54),o($VB3,$V64),o($VB3,$V74),o($VB3,$V84),o($VB3,$V94),o($VB3,$Va4),o($VB7,$V83),o($VB7,$V93),o($VB7,$Va3),o($VB7,$Vb3),{193:[1,3595],194:3593,195:[1,3594]},o($VC3,$V66),o($VC3,$V76),o($VC3,$V86),o($VC3,$Vn),o($VC3,$Vo),o($VC3,$VZ3),o($VC3,$V_3),o($VC3,$V$3),o($VC3,$Vp),o($VC3,$Vq),o($VC3,$V04),o($VC3,$V14,{202:3596,203:3597,111:[1,3598]}),o($VC3,$V24),o($VC3,$V34),o($VC3,$V44),o($VC3,$V54),o($VC3,$V64),o($VC3,$V74),o($VC3,$V84),o($VC3,$V94),o($VC3,$Va4),o($VC7,$V83),o($VC7,$V93),o($VC7,$Va3),o($VC7,$Vb3),{19:[1,3601],21:[1,3604],22:3600,87:3599,214:3602,215:[1,3603]},{193:[1,3607],194:3605,195:[1,3606]},o($VD3,$V66),o($VD3,$V76),o($VD3,$V86),o($VD3,$Vn),o($VD3,$Vo),o($VD3,$VZ3),o($VD3,$V_3),o($VD3,$V$3),o($VD3,$Vp),o($VD3,$Vq),o($VD3,$V04),o($VD3,$V14,{202:3608,203:3609,111:[1,3610]}),o($VD3,$V24),o($VD3,$V34),o($VD3,$V44),o($VD3,$V54),o($VD3,$V64),o($VD3,$V74),o($VD3,$V84),o($VD3,$V94),o($VD3,$Va4),o($VD7,$V83),o($VD7,$V93),o($VD7,$Va3),o($VD7,$Vb3),o($Vp4,$VX8),o($V_6,$VK3),o($Vp4,$VL3,{31:3611,193:[1,3612]}),{19:$VM3,21:$VN3,22:662,129:3613,199:$VO3,214:665,215:$VP3},o($V67,$VY8),o($V87,$V97,{60:3614}),o($VI,$VJ,{63:3615,73:3616,75:3617,76:3618,92:3621,94:3622,87:3624,88:3625,89:3626,78:3627,39:3628,95:3632,22:3633,91:3635,118:3636,99:3640,214:3643,105:3644,107:3645,19:[1,3642],21:[1,3647],69:[1,3619],71:[1,3620],79:[1,3637],80:[1,3638],81:[1,3639],85:[1,3623],96:[1,3629],97:[1,3630],98:[1,3631],101:$VZ8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,3634],215:[1,3646]}),o($V87,$V_8),o($VI,$VJ,{63:3648,73:3649,75:3650,76:3651,92:3654,94:3655,87:3657,88:3658,89:3659,78:3660,39:3661,95:3665,22:3666,91:3668,118:3669,99:3673,214:3676,105:3677,107:3678,19:[1,3675],21:[1,3680],69:[1,3652],71:[1,3653],79:[1,3670],80:[1,3671],81:[1,3672],85:[1,3656],96:[1,3662],97:[1,3663],98:[1,3664],101:$V$8,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,3667],215:[1,3679]}),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:3681,121:$VX2,148:$VY2,189:$VZ2}),o($V87,$VB2),o($V87,$Vw),o($V87,$Vx),o($V87,$Vn),o($V87,$Vo),o($V87,$Vy),o($V87,$Vp),o($V87,$Vq),o($V87,$Vt2,{99:2639,95:3682,101:$VP7,102:$VR,103:$VS,104:$VT}),o($Vp8,$Vu2),o($Vp8,$V33),o($V87,$V09),o($VR7,$VR3),o($VT7,$VS3),o($VT7,$VT3),o($VT7,$VU3),{100:[1,3683]},o($VT7,$VT1),{100:[1,3685],106:3684,108:[1,3686],109:[1,3687],110:3688,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,3689]},o($VT7,$VW3),{121:[1,3690]},{19:[1,3693],21:[1,3696],22:3692,87:3691,214:3694,215:[1,3695]},o($Vp4,$V19),o($Vr8,$Vs1,{82:3697}),o($Vr8,$VF7),o($Vr8,$VG7),o($Vr8,$VH7),o($Vr8,$VI7),o($Vr8,$VJ7),o($Vw8,$VK7,{57:3698,51:[1,3699]}),o($Vx8,$VL7,{61:3700,53:[1,3701]}),o($Vy8,$VM7),o($Vy8,$VN7,{74:3702,76:3703,78:3704,39:3705,118:3706,79:[1,3707],80:[1,3708],81:[1,3709],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($Vy8,$VO7),o($Vy8,$VN5,{77:3710,73:3711,92:3712,94:3713,95:3717,99:3718,96:[1,3714],97:[1,3715],98:[1,3716],101:$V29,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:3720,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($Vy8,$VQ7),o($V39,$Vy1,{93:3721}),o($V49,$Vz1,{99:3216,95:3722,101:$Vz8,102:$VR,103:$VS,104:$VT}),o($V59,$VB1,{86:3723}),o($V59,$VB1,{86:3724}),o($V59,$VB1,{86:3725}),o($Vy8,$VC1,{105:3220,107:3221,91:3726,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V69,$VT5),o($V69,$VU5),o($V39,$VG1),o($V39,$VH1),o($V39,$VI1),o($V39,$VJ1),o($V59,$VK1),o($VL1,$VM1,{162:3727}),o($V79,$VO1),{119:[1,3728],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($V69,$VE1),o($V69,$VF1),{19:[1,3732],21:[1,3736],22:3730,33:3729,200:3731,214:3733,215:[1,3735],216:[1,3734]},{100:[1,3737]},o($V39,$VT1),o($V59,$Vn),o($V59,$Vo),{100:[1,3739],106:3738,108:[1,3740],109:[1,3741],110:3742,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,3743]},o($V59,$Vp),o($V59,$Vq),o($Vr8,$Vs1,{82:3744}),o($Vs4,$Vb7),o($VI,$VJ,{92:742,94:743,95:753,99:761,226:3745,73:3746,75:3747,76:3748,87:3752,88:3753,89:3754,78:3755,39:3756,22:3757,91:3759,118:3760,214:3765,105:3766,107:3767,19:[1,3764],21:[1,3769],69:[1,3749],71:[1,3750],79:[1,3761],80:[1,3762],81:[1,3763],85:[1,3751],96:$Vu4,97:$Vv4,98:$Vw4,101:$Vx4,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,3758],215:[1,3768]}),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:3770,121:$VX2,148:$VY2,189:$VZ2}),o($Vs4,$VB2),o($Vs4,$Vw),o($Vs4,$Vx),o($Vs4,$Vn),o($Vs4,$Vo),o($Vs4,$Vy),o($Vs4,$Vp),o($Vs4,$Vq),o($Vs4,$Vt2,{99:2689,95:3771,101:$VW7,102:$VR,103:$VS,104:$VT}),o($Vw6,$Vu2),o($Vw6,$V33),o($Vs4,$Vc7),o($VR5,$VS3),o($VR5,$VT3),o($VR5,$VU3),{100:[1,3772]},o($VR5,$VT1),{100:[1,3774],106:3773,108:[1,3775],109:[1,3776],110:3777,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,3778]},o($VR5,$VW3),{121:[1,3779]},{19:[1,3782],21:[1,3785],22:3781,87:3780,214:3783,215:[1,3784]},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:3786,121:$VX2,148:$VY2,189:$VZ2}),o($Vs4,$VB2),o($Vs4,$Vw),o($Vs4,$Vx),o($Vs4,$Vn),o($Vs4,$Vo),o($Vs4,$Vy),o($Vs4,$Vp),o($Vs4,$Vq),o($Vs4,$Vt2,{99:2727,95:3787,101:$VX7,102:$VR,103:$VS,104:$VT}),o($Vw6,$Vu2),o($Vw6,$V33),o($Vs4,$Vc7),o($VR5,$VS3),o($VR5,$VT3),o($VR5,$VU3),{100:[1,3788]},o($VR5,$VT1),{100:[1,3790],106:3789,108:[1,3791],109:[1,3792],110:3793,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,3794]},o($VR5,$VW3),{121:[1,3795]},{19:[1,3798],21:[1,3801],22:3797,87:3796,214:3799,215:[1,3800]},o($VR5,$VW5),o($VR5,$VK1),o($VR5,$Vn),o($VR5,$Vo),o($VR5,$Vp),o($VR5,$Vq),o($VG,$Vd2),o($VG,$Ve2),o($VG,$Vv1),o($VG,$Vw1),o($Vt1,$Vs1,{82:3802}),o($VG,$VE1),o($VG,$VF1),{19:[1,3806],21:[1,3810],22:3804,33:3803,200:3805,214:3807,215:[1,3809],216:[1,3808]},{119:[1,3811],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VG,$Vf2),o($VG,$Vg2),o($Vt1,$Vs1,{82:3812}),o($Vh2,$Vy1,{93:3813}),o($Vt1,$Vz1,{99:3297,95:3814,101:$VC8,102:$VR,103:$VS,104:$VT}),o($Vh2,$VG1),o($Vh2,$VH1),o($Vh2,$VI1),o($Vh2,$VJ1),{100:[1,3815]},o($Vh2,$VT1),{70:[1,3816]},o($Vp2,$Vq2,{83:3817,84:3818,192:3819,190:[1,3820]}),o($Vr2,$Vq2,{83:3821,84:3822,192:3823,190:$V89}),o($Vr1,$Vt2,{99:2782,95:3825,101:$VY7,102:$VR,103:$VS,104:$VT}),o($Vx1,$Vu2),o($Vt1,$Vv2,{90:3826,95:3827,91:3828,99:3829,105:3831,107:3832,101:$V99,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vx2,{90:3826,95:3827,91:3828,99:3829,105:3831,107:3832,101:$V99,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vt1,$Vy2,{90:3826,95:3827,91:3828,99:3829,105:3831,107:3832,101:$V99,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VN1,$Vz2),o($VA2,$Vq2,{83:3833,84:3834,192:3835,190:[1,3836]}),o($Vu1,$VB2),o($Vu1,$Vw),o($Vu1,$Vx),o($Vu1,$Vn),o($Vu1,$Vo),o($Vu1,$Vy),o($Vu1,$Vp),o($Vu1,$Vq),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,3837],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:3838,121:$VX2,148:$VY2,189:$VZ2}),o($Vx1,$V33),o($VN1,$V43),o($VN1,$V53),o($VN1,$V63),o($VN1,$V73),{111:[1,3839]},o($VN1,$Vc3),o($Vt1,$Vs5),{193:[1,3842],194:3840,195:[1,3841]},o($Vr1,$V66),o($Vr1,$V76),o($Vr1,$V86),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VZ3),o($Vr1,$V_3),o($Vr1,$V$3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V04),o($Vr1,$V14,{202:3843,203:3844,111:[1,3845]}),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($Vr1,$V94),o($Vr1,$Va4),o($V96,$V83),o($V96,$V93),o($V96,$Va3),o($V96,$Vb3),{193:[1,3848],194:3846,195:[1,3847]},o($Vt1,$V66),o($Vt1,$V76),o($Vt1,$V86),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VZ3),o($Vt1,$V_3),o($Vt1,$V$3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V04),o($Vt1,$V14,{202:3849,203:3850,111:[1,3851]}),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($Vt1,$V94),o($Vt1,$Va4),o($Va6,$V83),o($Va6,$V93),o($Va6,$Va3),o($Va6,$Vb3),{19:[1,3854],21:[1,3857],22:3853,87:3852,214:3855,215:[1,3856]},{193:[1,3860],194:3858,195:[1,3859]},o($VD1,$V66),o($VD1,$V76),o($VD1,$V86),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VZ3),o($VD1,$V_3),o($VD1,$V$3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V04),o($VD1,$V14,{202:3861,203:3862,111:[1,3863]}),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VD1,$V94),o($VD1,$Va4),o($Vb6,$V83),o($Vb6,$V93),o($Vb6,$Va3),o($Vb6,$Vb3),o($Vt1,$Vs5),{193:[1,3866],194:3864,195:[1,3865]},o($Vr1,$V66),o($Vr1,$V76),o($Vr1,$V86),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VZ3),o($Vr1,$V_3),o($Vr1,$V$3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V04),o($Vr1,$V14,{202:3867,203:3868,111:[1,3869]}),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($Vr1,$V94),o($Vr1,$Va4),o($V96,$V83),o($V96,$V93),o($V96,$Va3),o($V96,$Vb3),{193:[1,3872],194:3870,195:[1,3871]},o($Vt1,$V66),o($Vt1,$V76),o($Vt1,$V86),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VZ3),o($Vt1,$V_3),o($Vt1,$V$3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V04),o($Vt1,$V14,{202:3873,203:3874,111:[1,3875]}),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($Vt1,$V94),o($Vt1,$Va4),o($Va6,$V83),o($Va6,$V93),o($Va6,$Va3),o($Va6,$Vb3),{19:[1,3878],21:[1,3881],22:3877,87:3876,214:3879,215:[1,3880]},{193:[1,3884],194:3882,195:[1,3883]},o($VD1,$V66),o($VD1,$V76),o($VD1,$V86),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VZ3),o($VD1,$V_3),o($VD1,$V$3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V04),o($VD1,$V14,{202:3885,203:3886,111:[1,3887]}),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VD1,$V94),o($VD1,$Va4),o($Vb6,$V83),o($Vb6,$V93),o($Vb6,$Va3),o($Vb6,$Vb3),o($VG,$VV3),{121:[1,3888]},o($VG,$VJ3),o($Vh2,$VR3),o($Vp2,$VW4),{19:$Vi,21:$Vj,22:3889,214:45,215:$Vk},{19:$Va9,21:$Vb9,22:3891,100:[1,3902],108:[1,3903],109:[1,3904],110:3901,181:3892,191:3890,196:3895,197:3896,198:3897,201:3900,204:[1,3905],205:[1,3906],206:[1,3911],207:[1,3912],208:[1,3913],209:[1,3914],210:[1,3907],211:[1,3908],212:[1,3909],213:[1,3910],214:3894,215:$Vc9},o($Vr2,$VW4),{19:$Vi,21:$Vj,22:3915,214:45,215:$Vk},{19:$Vd9,21:$Ve9,22:3917,100:[1,3928],108:[1,3929],109:[1,3930],110:3927,181:3918,191:3916,196:3921,197:3922,198:3923,201:3926,204:[1,3931],205:[1,3932],206:[1,3937],207:[1,3938],208:[1,3939],209:[1,3940],210:[1,3933],211:[1,3934],212:[1,3935],213:[1,3936],214:3920,215:$Vf9},o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),o($VA1,$V63),o($VA1,$V73),{111:[1,3941]},o($VA1,$Vc3),o($VA2,$VW4),{19:$Vi,21:$Vj,22:3942,214:45,215:$Vk},{19:$Vg9,21:$Vh9,22:3944,100:[1,3955],108:[1,3956],109:[1,3957],110:3954,181:3945,191:3943,196:3948,197:3949,198:3950,201:3953,204:[1,3958],205:[1,3959],206:[1,3964],207:[1,3965],208:[1,3966],209:[1,3967],210:[1,3960],211:[1,3961],212:[1,3962],213:[1,3963],214:3947,215:$Vi9},o($VD1,$Vs5),o($VN1,$VW5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($Vr1,$Vg6),o($Vr1,$VK1),o($Vt1,$Vg6),o($Vt1,$VK1),o($VD1,$Vg6),o($VD1,$VK1),o($Vr1,$Vg6),o($Vr1,$VK1),o($Vt1,$Vg6),o($Vt1,$VK1),o($VD1,$Vg6),o($VD1,$VK1),o($VQ4,$Vq2,{84:3545,192:3546,83:3968,190:$VV8}),o($Vz3,$VB2),o($Vz3,$Vw),o($Vz3,$Vx),o($Vz3,$Vn),o($Vz3,$Vo),o($Vz3,$Vy),o($Vz3,$Vp),o($Vz3,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:3969,121:$VX2,148:$VY2,189:$VZ2}),o($VQ4,$Vq2,{84:3545,192:3546,83:3970,190:$VV8}),o($VC3,$Vt2,{99:2960,95:3971,101:$V$7,102:$VR,103:$VS,104:$VT}),o($VO4,$Vu2),o($VO4,$V33),o($Vz3,$Vy3),o($V26,$VJ3),o($VB3,$VK3),o($V26,$VL3,{31:3972,193:[1,3973]}),{19:$VM3,21:$VN3,22:662,129:3974,199:$VO3,214:665,215:$VP3},o($Vz3,$VQ3),o($VC3,$VK3),o($Vz3,$VL3,{31:3975,193:[1,3976]}),{19:$VM3,21:$VN3,22:662,129:3977,199:$VO3,214:665,215:$VP3},o($VE3,$VR3),o($VF3,$VS3),o($VF3,$VT3),o($VF3,$VU3),{100:[1,3978]},o($VF3,$VT1),{100:[1,3980],106:3979,108:[1,3981],109:[1,3982],110:3983,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,3984]},o($V36,$VV3),o($VD3,$VK3),o($V36,$VL3,{31:3985,193:[1,3986]}),{19:$VM3,21:$VN3,22:662,129:3987,199:$VO3,214:665,215:$VP3},o($VF3,$VW3),{121:[1,3988]},{19:[1,3991],21:[1,3994],22:3990,87:3989,214:3992,215:[1,3993]},o($VP4,$V41),o($VP4,$V51),o($VP4,$V61),o($VB3,$Vq5),o($VB3,$Vr5),{19:$V08,21:$V18,22:3996,87:3995,214:2995,215:$V28},o($VQ4,$V41),o($VQ4,$V51),o($VQ4,$V61),o($VC3,$Vq5),o($VC3,$Vr5),{19:$V38,21:$V48,22:3998,87:3997,214:3021,215:$V58},o($VF3,$VW5),o($VF3,$VK1),o($VF3,$Vn),o($VF3,$Vo),o($VF3,$Vp),o($VF3,$Vq),o($VS4,$V41),o($VS4,$V51),o($VS4,$V61),o($VD3,$Vq5),o($VD3,$Vr5),{19:$V68,21:$V78,22:4000,87:3999,214:3048,215:$V88},o($VP4,$V41),o($VP4,$V51),o($VP4,$V61),o($VB3,$Vq5),o($VB3,$Vr5),{19:$V98,21:$Va8,22:4002,87:4001,214:3075,215:$Vb8},o($VQ4,$V41),o($VQ4,$V51),o($VQ4,$V61),o($VC3,$Vq5),o($VC3,$Vr5),{19:$Vc8,21:$Vd8,22:4004,87:4003,214:3101,215:$Ve8},o($VF3,$VW5),o($VF3,$VK1),o($VF3,$Vn),o($VF3,$Vo),o($VF3,$Vp),o($VF3,$Vq),o($VS4,$V41),o($VS4,$V51),o($VS4,$V61),o($VD3,$Vq5),o($VD3,$Vr5),{19:$Vf8,21:$Vg8,22:4006,87:4005,214:3128,215:$Vh8},o($Vi8,$VW4),{19:$Vi,21:$Vj,22:4007,214:45,215:$Vk},{19:$Vj9,21:$Vk9,22:4009,100:[1,4020],108:[1,4021],109:[1,4022],110:4019,181:4010,191:4008,196:4013,197:4014,198:4015,201:4018,204:[1,4023],205:[1,4024],206:[1,4029],207:[1,4030],208:[1,4031],209:[1,4032],210:[1,4025],211:[1,4026],212:[1,4027],213:[1,4028],214:4012,215:$Vl9},o($V67,$VL7,{61:4033,53:[1,4034]}),o($V87,$VM7),o($V87,$VN7,{74:4035,76:4036,78:4037,39:4038,118:4039,79:[1,4040],80:[1,4041],81:[1,4042],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($V87,$VO7),o($V87,$VN5,{77:4043,73:4044,92:4045,94:4046,95:4050,99:4051,96:[1,4047],97:[1,4048],98:[1,4049],101:$Vm9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:4053,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($V87,$VQ7),o($VR7,$Vy1,{93:4054}),o($VS7,$Vz1,{99:3640,95:4055,101:$VZ8,102:$VR,103:$VS,104:$VT}),o($VT7,$VB1,{86:4056}),o($VT7,$VB1,{86:4057}),o($VT7,$VB1,{86:4058}),o($V87,$VC1,{105:3644,107:3645,91:4059,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VU7,$VT5),o($VU7,$VU5),o($VR7,$VG1),o($VR7,$VH1),o($VR7,$VI1),o($VR7,$VJ1),o($VT7,$VK1),o($VL1,$VM1,{162:4060}),o($VV7,$VO1),{119:[1,4061],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VU7,$VE1),o($VU7,$VF1),{19:[1,4065],21:[1,4069],22:4063,33:4062,200:4064,214:4066,215:[1,4068],216:[1,4067]},{100:[1,4070]},o($VR7,$VT1),o($VT7,$Vn),o($VT7,$Vo),{100:[1,4072],106:4071,108:[1,4073],109:[1,4074],110:4075,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,4076]},o($VT7,$Vp),o($VT7,$Vq),o($V87,$VM7),o($V87,$VN7,{74:4077,76:4078,78:4079,39:4080,118:4081,79:[1,4082],80:[1,4083],81:[1,4084],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($V87,$VO7),o($V87,$VN5,{77:4085,73:4086,92:4087,94:4088,95:4092,99:4093,96:[1,4089],97:[1,4090],98:[1,4091],101:$Vn9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:4095,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($V87,$VQ7),o($VR7,$Vy1,{93:4096}),o($VS7,$Vz1,{99:3673,95:4097,101:$V$8,102:$VR,103:$VS,104:$VT}),o($VT7,$VB1,{86:4098}),o($VT7,$VB1,{86:4099}),o($VT7,$VB1,{86:4100}),o($V87,$VC1,{105:3677,107:3678,91:4101,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VU7,$VT5),o($VU7,$VU5),o($VR7,$VG1),o($VR7,$VH1),o($VR7,$VI1),o($VR7,$VJ1),o($VT7,$VK1),o($VL1,$VM1,{162:4102}),o($VV7,$VO1),{119:[1,4103],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VU7,$VE1),o($VU7,$VF1),{19:[1,4107],21:[1,4111],22:4105,33:4104,200:4106,214:4108,215:[1,4110],216:[1,4109]},{100:[1,4112]},o($VR7,$VT1),o($VT7,$Vn),o($VT7,$Vo),{100:[1,4114],106:4113,108:[1,4115],109:[1,4116],110:4117,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,4118]},o($VT7,$Vp),o($VT7,$Vq),{121:[1,4119]},o($Vp8,$VR3),o($VT7,$V33),o($VT7,$V43),o($VT7,$V53),o($VT7,$V63),o($VT7,$V73),{111:[1,4120]},o($VT7,$Vc3),o($VU7,$Vs5),o($VV7,$VW5),o($VV7,$VK1),o($VV7,$Vn),o($VV7,$Vo),o($VV7,$Vp),o($VV7,$Vq),o($Vo9,$Vq2,{83:4121,84:4122,192:4123,190:$Vp9}),o($Vx8,$Vk8),o($Vr,$Vs,{55:4125,59:4126,41:4127,44:$Vt}),o($Vy8,$Vl8),o($Vr,$Vs,{59:4128,41:4129,44:$Vt}),o($Vy8,$Vm8),o($Vy8,$Vn8),o($Vy8,$VT5),o($Vy8,$VU5),{119:[1,4130],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($Vy8,$VE1),o($Vy8,$VF1),{19:[1,4134],21:[1,4138],22:4132,33:4131,200:4133,214:4135,215:[1,4137],216:[1,4136]},o($Vy8,$Vo8),o($Vy8,$Vv6),o($Vq9,$Vy1,{93:4139}),o($Vy8,$Vz1,{99:3718,95:4140,101:$V29,102:$VR,103:$VS,104:$VT}),o($Vq9,$VG1),o($Vq9,$VH1),o($Vq9,$VI1),o($Vq9,$VJ1),{100:[1,4141]},o($Vq9,$VT1),{70:[1,4142]},o($V49,$Vt2,{99:3216,95:4143,101:$Vz8,102:$VR,103:$VS,104:$VT}),o($V39,$Vu2),o($Vy8,$Vv2,{90:4144,95:4145,91:4146,99:4147,105:4149,107:4150,101:$Vr9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vy8,$Vx2,{90:4144,95:4145,91:4146,99:4147,105:4149,107:4150,101:$Vr9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vy8,$Vy2,{90:4144,95:4145,91:4146,99:4147,105:4149,107:4150,101:$Vr9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V79,$Vz2),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,4151],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:4152,121:$VX2,148:$VY2,189:$VZ2}),o($V69,$VB2),o($V69,$Vw),o($V69,$Vx),o($V69,$Vn),o($V69,$Vo),o($V69,$Vy),o($V69,$Vp),o($V69,$Vq),o($V39,$V33),o($V79,$V43),o($V79,$V53),o($V79,$V63),o($V79,$V73),{111:[1,4153]},o($V79,$Vc3),o($Vo9,$Vq2,{84:4122,192:4123,83:4154,190:$Vp9}),o($Vs4,$VL5),o($VI,$VJ,{76:4155,78:4156,39:4157,118:4158,79:[1,4159],80:[1,4160],81:[1,4161]}),o($Vs4,$VM5),o($Vs4,$VN5,{77:4162,73:4163,92:4164,94:4165,95:4169,99:4170,96:[1,4166],97:[1,4167],98:[1,4168],101:$Vs9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:4172,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($Vs4,$VP5),o($VR5,$VB1,{86:4173}),o($VR5,$VB1,{86:4174}),o($VR5,$VB1,{86:4175}),o($Vs4,$VC1,{105:3766,107:3767,91:4176,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VS5,$VT5),o($VS5,$VU5),o($VR5,$VK1),o($VL1,$VM1,{162:4177}),o($VV5,$VO1),{119:[1,4178],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VS5,$VE1),o($VS5,$VF1),{19:[1,4182],21:[1,4186],22:4180,33:4179,200:4181,214:4183,215:[1,4185],216:[1,4184]},o($VR5,$Vn),o($VR5,$Vo),{100:[1,4188],106:4187,108:[1,4189],109:[1,4190],110:4191,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,4192]},o($VR5,$Vp),o($VR5,$Vq),{121:[1,4193]},o($Vw6,$VR3),o($VR5,$V33),o($VR5,$V43),o($VR5,$V53),o($VR5,$V63),o($VR5,$V73),{111:[1,4194]},o($VR5,$Vc3),o($VS5,$Vs5),o($VV5,$VW5),o($VV5,$VK1),o($VV5,$Vn),o($VV5,$Vo),o($VV5,$Vp),o($VV5,$Vq),{121:[1,4195]},o($Vw6,$VR3),o($VR5,$V33),o($VR5,$V43),o($VR5,$V53),o($VR5,$V63),o($VR5,$V73),{111:[1,4196]},o($VR5,$Vc3),o($VS5,$Vs5),o($VV5,$VW5),o($VV5,$VK1),o($VV5,$Vn),o($VV5,$Vo),o($VV5,$Vp),o($VV5,$Vq),o($Vr2,$Vq2,{84:3822,192:3823,83:4197,190:$V89}),o($VG,$VB2),o($VG,$Vw),o($VG,$Vx),o($VG,$Vn),o($VG,$Vo),o($VG,$Vy),o($VG,$Vp),o($VG,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:4198,121:$VX2,148:$VY2,189:$VZ2}),o($Vr2,$Vq2,{84:3822,192:3823,83:4199,190:$V89}),o($Vt1,$Vt2,{99:3297,95:4200,101:$VC8,102:$VR,103:$VS,104:$VT}),o($Vh2,$Vu2),o($Vh2,$V33),o($VG,$Vy3),o($VI3,$VJ3),o($Vr1,$VK3),o($VI3,$VL3,{31:4201,193:[1,4202]}),{19:$VM3,21:$VN3,22:662,129:4203,199:$VO3,214:665,215:$VP3},o($VG,$VQ3),o($Vt1,$VK3),o($VG,$VL3,{31:4204,193:[1,4205]}),{19:$VM3,21:$VN3,22:662,129:4206,199:$VO3,214:665,215:$VP3},o($Vx1,$VR3),o($VA1,$VS3),o($VA1,$VT3),o($VA1,$VU3),{100:[1,4207]},o($VA1,$VT1),{100:[1,4209],106:4208,108:[1,4210],109:[1,4211],110:4212,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,4213]},o($Vu1,$VV3),o($VD1,$VK3),o($Vu1,$VL3,{31:4214,193:[1,4215]}),{19:$VM3,21:$VN3,22:662,129:4216,199:$VO3,214:665,215:$VP3},o($VA1,$VW3),{121:[1,4217]},{19:[1,4220],21:[1,4223],22:4219,87:4218,214:4221,215:[1,4222]},o($Vp2,$V41),o($Vp2,$V51),o($Vp2,$V61),o($Vr1,$Vq5),o($Vr1,$Vr5),{19:$VD8,21:$VE8,22:4225,87:4224,214:3332,215:$VF8},o($Vr2,$V41),o($Vr2,$V51),o($Vr2,$V61),o($Vt1,$Vq5),o($Vt1,$Vr5),{19:$VG8,21:$VH8,22:4227,87:4226,214:3358,215:$VI8},o($VA1,$VW5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($VA2,$V41),o($VA2,$V51),o($VA2,$V61),o($VD1,$Vq5),o($VD1,$Vr5),{19:$VJ8,21:$VK8,22:4229,87:4228,214:3385,215:$VL8},o($Vp2,$V41),o($Vp2,$V51),o($Vp2,$V61),o($Vr1,$Vq5),o($Vr1,$Vr5),{19:$VM8,21:$VN8,22:4231,87:4230,214:3412,215:$VO8},o($Vr2,$V41),o($Vr2,$V51),o($Vr2,$V61),o($Vt1,$Vq5),o($Vt1,$Vr5),{19:$VP8,21:$VQ8,22:4233,87:4232,214:3438,215:$VR8},o($VA1,$VW5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($VA2,$V41),o($VA2,$V51),o($VA2,$V61),o($VD1,$Vq5),o($VD1,$Vr5),{19:$VS8,21:$VT8,22:4235,87:4234,214:3465,215:$VU8},o($Vt1,$Vs5),{193:[1,4238],194:4236,195:[1,4237]},o($Vr1,$V66),o($Vr1,$V76),o($Vr1,$V86),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VZ3),o($Vr1,$V_3),o($Vr1,$V$3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V04),o($Vr1,$V14,{202:4239,203:4240,111:[1,4241]}),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($Vr1,$V94),o($Vr1,$Va4),o($V96,$V83),o($V96,$V93),o($V96,$Va3),o($V96,$Vb3),{193:[1,4244],194:4242,195:[1,4243]},o($Vt1,$V66),o($Vt1,$V76),o($Vt1,$V86),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VZ3),o($Vt1,$V_3),o($Vt1,$V$3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V04),o($Vt1,$V14,{202:4245,203:4246,111:[1,4247]}),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($Vt1,$V94),o($Vt1,$Va4),o($Va6,$V83),o($Va6,$V93),o($Va6,$Va3),o($Va6,$Vb3),{19:[1,4250],21:[1,4253],22:4249,87:4248,214:4251,215:[1,4252]},{193:[1,4256],194:4254,195:[1,4255]},o($VD1,$V66),o($VD1,$V76),o($VD1,$V86),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VZ3),o($VD1,$V_3),o($VD1,$V$3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V04),o($VD1,$V14,{202:4257,203:4258,111:[1,4259]}),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VD1,$V94),o($VD1,$Va4),o($Vb6,$V83),o($Vb6,$V93),o($Vb6,$Va3),o($Vb6,$Vb3),o($Vz3,$VV3),{121:[1,4260]},o($Vz3,$VJ3),o($VO4,$VR3),o($VP4,$VW4),{19:$Vi,21:$Vj,22:4261,214:45,215:$Vk},{19:$Vt9,21:$Vu9,22:4263,100:[1,4274],108:[1,4275],109:[1,4276],110:4273,181:4264,191:4262,196:4267,197:4268,198:4269,201:4272,204:[1,4277],205:[1,4278],206:[1,4283],207:[1,4284],208:[1,4285],209:[1,4286],210:[1,4279],211:[1,4280],212:[1,4281],213:[1,4282],214:4266,215:$Vv9},o($VQ4,$VW4),{19:$Vi,21:$Vj,22:4287,214:45,215:$Vk},{19:$Vw9,21:$Vx9,22:4289,100:[1,4300],108:[1,4301],109:[1,4302],110:4299,181:4290,191:4288,196:4293,197:4294,198:4295,201:4298,204:[1,4303],205:[1,4304],206:[1,4309],207:[1,4310],208:[1,4311],209:[1,4312],210:[1,4305],211:[1,4306],212:[1,4307],213:[1,4308],214:4292,215:$Vy9},o($VF3,$V33),o($VF3,$V43),o($VF3,$V53),o($VF3,$V63),o($VF3,$V73),{111:[1,4313]},o($VF3,$Vc3),o($VS4,$VW4),{19:$Vi,21:$Vj,22:4314,214:45,215:$Vk},{19:$Vz9,21:$VA9,22:4316,100:[1,4327],108:[1,4328],109:[1,4329],110:4326,181:4317,191:4315,196:4320,197:4321,198:4322,201:4325,204:[1,4330],205:[1,4331],206:[1,4336],207:[1,4337],208:[1,4338],209:[1,4339],210:[1,4332],211:[1,4333],212:[1,4334],213:[1,4335],214:4319,215:$VB9},o($VD3,$Vs5),o($VG3,$VW5),o($VG3,$VK1),o($VG3,$Vn),o($VG3,$Vo),o($VG3,$Vp),o($VG3,$Vq),o($VB3,$Vg6),o($VB3,$VK1),o($VC3,$Vg6),o($VC3,$VK1),o($VD3,$Vg6),o($VD3,$VK1),o($VB3,$Vg6),o($VB3,$VK1),o($VC3,$Vg6),o($VC3,$VK1),o($VD3,$Vg6),o($VD3,$VK1),{193:[1,4342],194:4340,195:[1,4341]},o($V_6,$V66),o($V_6,$V76),o($V_6,$V86),o($V_6,$Vn),o($V_6,$Vo),o($V_6,$VZ3),o($V_6,$V_3),o($V_6,$V$3),o($V_6,$Vp),o($V_6,$Vq),o($V_6,$V04),o($V_6,$V14,{202:4343,203:4344,111:[1,4345]}),o($V_6,$V24),o($V_6,$V34),o($V_6,$V44),o($V_6,$V54),o($V_6,$V64),o($V_6,$V74),o($V_6,$V84),o($V_6,$V94),o($V_6,$Va4),o($VC9,$V83),o($VC9,$V93),o($VC9,$Va3),o($VC9,$Vb3),o($V87,$Vl8),o($Vr,$Vs,{59:4346,41:4347,44:$Vt}),o($V87,$Vm8),o($V87,$Vn8),o($V87,$VT5),o($V87,$VU5),{119:[1,4348],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($V87,$VE1),o($V87,$VF1),{19:[1,4352],21:[1,4356],22:4350,33:4349,200:4351,214:4353,215:[1,4355],216:[1,4354]},o($V87,$Vo8),o($V87,$Vv6),o($Vp8,$Vy1,{93:4357}),o($V87,$Vz1,{99:4051,95:4358,101:$Vm9,102:$VR,103:$VS,104:$VT}),o($Vp8,$VG1),o($Vp8,$VH1),o($Vp8,$VI1),o($Vp8,$VJ1),{100:[1,4359]},o($Vp8,$VT1),{70:[1,4360]},o($VS7,$Vt2,{99:3640,95:4361,101:$VZ8,102:$VR,103:$VS,104:$VT}),o($VR7,$Vu2),o($V87,$Vv2,{90:4362,95:4363,91:4364,99:4365,105:4367,107:4368,101:$VD9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V87,$Vx2,{90:4362,95:4363,91:4364,99:4365,105:4367,107:4368,101:$VD9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V87,$Vy2,{90:4362,95:4363,91:4364,99:4365,105:4367,107:4368,101:$VD9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VV7,$Vz2),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,4369],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:4370,121:$VX2,148:$VY2,189:$VZ2}),o($VU7,$VB2),o($VU7,$Vw),o($VU7,$Vx),o($VU7,$Vn),o($VU7,$Vo),o($VU7,$Vy),o($VU7,$Vp),o($VU7,$Vq),o($VR7,$V33),o($VV7,$V43),o($VV7,$V53),o($VV7,$V63),o($VV7,$V73),{111:[1,4371]},o($VV7,$Vc3),o($V87,$Vm8),o($V87,$Vn8),o($V87,$VT5),o($V87,$VU5),{119:[1,4372],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($V87,$VE1),o($V87,$VF1),{19:[1,4376],21:[1,4380],22:4374,33:4373,200:4375,214:4377,215:[1,4379],216:[1,4378]},o($V87,$Vo8),o($V87,$Vv6),o($Vp8,$Vy1,{93:4381}),o($V87,$Vz1,{99:4093,95:4382,101:$Vn9,102:$VR,103:$VS,104:$VT}),o($Vp8,$VG1),o($Vp8,$VH1),o($Vp8,$VI1),o($Vp8,$VJ1),{100:[1,4383]},o($Vp8,$VT1),{70:[1,4384]},o($VS7,$Vt2,{99:3673,95:4385,101:$V$8,102:$VR,103:$VS,104:$VT}),o($VR7,$Vu2),o($V87,$Vv2,{90:4386,95:4387,91:4388,99:4389,105:4391,107:4392,101:$VE9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V87,$Vx2,{90:4386,95:4387,91:4388,99:4389,105:4391,107:4392,101:$VE9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V87,$Vy2,{90:4386,95:4387,91:4388,99:4389,105:4391,107:4392,101:$VE9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VV7,$Vz2),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,4393],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:4394,121:$VX2,148:$VY2,189:$VZ2}),o($VU7,$VB2),o($VU7,$Vw),o($VU7,$Vx),o($VU7,$Vn),o($VU7,$Vo),o($VU7,$Vy),o($VU7,$Vp),o($VU7,$Vq),o($VR7,$V33),o($VV7,$V43),o($VV7,$V53),o($VV7,$V63),o($VV7,$V73),{111:[1,4395]},o($VV7,$Vc3),o($V87,$Vs5),{19:[1,4398],21:[1,4401],22:4397,87:4396,214:4399,215:[1,4400]},o($Vr6,$VX8),o($Vr8,$VK3),o($Vr6,$VL3,{31:4402,193:[1,4403]}),{19:$VM3,21:$VN3,22:662,129:4404,199:$VO3,214:665,215:$VP3},o($Vx8,$VY8),o($Vy8,$V97,{60:4405}),o($VI,$VJ,{63:4406,73:4407,75:4408,76:4409,92:4412,94:4413,87:4415,88:4416,89:4417,78:4418,39:4419,95:4423,22:4424,91:4426,118:4427,99:4431,214:4434,105:4435,107:4436,19:[1,4433],21:[1,4438],69:[1,4410],71:[1,4411],79:[1,4428],80:[1,4429],81:[1,4430],85:[1,4414],96:[1,4420],97:[1,4421],98:[1,4422],101:$VF9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,4425],215:[1,4437]}),o($Vy8,$V_8),o($VI,$VJ,{63:4439,73:4440,75:4441,76:4442,92:4445,94:4446,87:4448,88:4449,89:4450,78:4451,39:4452,95:4456,22:4457,91:4459,118:4460,99:4464,214:4467,105:4468,107:4469,19:[1,4466],21:[1,4471],69:[1,4443],71:[1,4444],79:[1,4461],80:[1,4462],81:[1,4463],85:[1,4447],96:[1,4453],97:[1,4454],98:[1,4455],101:$VG9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,4458],215:[1,4470]}),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:4472,121:$VX2,148:$VY2,189:$VZ2}),o($Vy8,$VB2),o($Vy8,$Vw),o($Vy8,$Vx),o($Vy8,$Vn),o($Vy8,$Vo),o($Vy8,$Vy),o($Vy8,$Vp),o($Vy8,$Vq),o($Vy8,$Vt2,{99:3718,95:4473,101:$V29,102:$VR,103:$VS,104:$VT}),o($Vq9,$Vu2),o($Vq9,$V33),o($Vy8,$V09),o($V39,$VR3),o($V59,$VS3),o($V59,$VT3),o($V59,$VU3),{100:[1,4474]},o($V59,$VT1),{100:[1,4476],106:4475,108:[1,4477],109:[1,4478],110:4479,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,4480]},o($V59,$VW3),{121:[1,4481]},{19:[1,4484],21:[1,4487],22:4483,87:4482,214:4485,215:[1,4486]},o($Vr6,$V19),o($Vs4,$Vt6),o($Vs4,$VT5),o($Vs4,$VU5),{119:[1,4488],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($Vs4,$VE1),o($Vs4,$VF1),{19:[1,4492],21:[1,4496],22:4490,33:4489,200:4491,214:4493,215:[1,4495],216:[1,4494]},o($Vs4,$Vu6),o($Vs4,$Vv6),o($Vw6,$Vy1,{93:4497}),o($Vs4,$Vz1,{99:4170,95:4498,101:$Vs9,102:$VR,103:$VS,104:$VT}),o($Vw6,$VG1),o($Vw6,$VH1),o($Vw6,$VI1),o($Vw6,$VJ1),{100:[1,4499]},o($Vw6,$VT1),{70:[1,4500]},o($Vs4,$Vv2,{90:4501,95:4502,91:4503,99:4504,105:4506,107:4507,101:$VH9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs4,$Vx2,{90:4501,95:4502,91:4503,99:4504,105:4506,107:4507,101:$VH9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vs4,$Vy2,{90:4501,95:4502,91:4503,99:4504,105:4506,107:4507,101:$VH9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VV5,$Vz2),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,4508],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:4509,121:$VX2,148:$VY2,189:$VZ2}),o($VS5,$VB2),o($VS5,$Vw),o($VS5,$Vx),o($VS5,$Vn),o($VS5,$Vo),o($VS5,$Vy),o($VS5,$Vp),o($VS5,$Vq),o($VV5,$V43),o($VV5,$V53),o($VV5,$V63),o($VV5,$V73),{111:[1,4510]},o($VV5,$Vc3),o($Vs4,$Vs5),{19:[1,4513],21:[1,4516],22:4512,87:4511,214:4514,215:[1,4515]},o($Vs4,$Vs5),{19:[1,4519],21:[1,4522],22:4518,87:4517,214:4520,215:[1,4521]},o($VG,$VV3),{121:[1,4523]},o($VG,$VJ3),o($Vh2,$VR3),o($Vp2,$VW4),{19:$Vi,21:$Vj,22:4524,214:45,215:$Vk},{19:$VI9,21:$VJ9,22:4526,100:[1,4537],108:[1,4538],109:[1,4539],110:4536,181:4527,191:4525,196:4530,197:4531,198:4532,201:4535,204:[1,4540],205:[1,4541],206:[1,4546],207:[1,4547],208:[1,4548],209:[1,4549],210:[1,4542],211:[1,4543],212:[1,4544],213:[1,4545],214:4529,215:$VK9},o($Vr2,$VW4),{19:$Vi,21:$Vj,22:4550,214:45,215:$Vk},{19:$VL9,21:$VM9,22:4552,100:[1,4563],108:[1,4564],109:[1,4565],110:4562,181:4553,191:4551,196:4556,197:4557,198:4558,201:4561,204:[1,4566],205:[1,4567],206:[1,4572],207:[1,4573],208:[1,4574],209:[1,4575],210:[1,4568],211:[1,4569],212:[1,4570],213:[1,4571],214:4555,215:$VN9},o($VA1,$V33),o($VA1,$V43),o($VA1,$V53),o($VA1,$V63),o($VA1,$V73),{111:[1,4576]},o($VA1,$Vc3),o($VA2,$VW4),{19:$Vi,21:$Vj,22:4577,214:45,215:$Vk},{19:$VO9,21:$VP9,22:4579,100:[1,4590],108:[1,4591],109:[1,4592],110:4589,181:4580,191:4578,196:4583,197:4584,198:4585,201:4588,204:[1,4593],205:[1,4594],206:[1,4599],207:[1,4600],208:[1,4601],209:[1,4602],210:[1,4595],211:[1,4596],212:[1,4597],213:[1,4598],214:4582,215:$VQ9},o($VD1,$Vs5),o($VN1,$VW5),o($VN1,$VK1),o($VN1,$Vn),o($VN1,$Vo),o($VN1,$Vp),o($VN1,$Vq),o($Vr1,$Vg6),o($Vr1,$VK1),o($Vt1,$Vg6),o($Vt1,$VK1),o($VD1,$Vg6),o($VD1,$VK1),o($Vr1,$Vg6),o($Vr1,$VK1),o($Vt1,$Vg6),o($Vt1,$VK1),o($VD1,$Vg6),o($VD1,$VK1),o($Vp2,$V41),o($Vp2,$V51),o($Vp2,$V61),o($Vr1,$Vq5),o($Vr1,$Vr5),{19:$Va9,21:$Vb9,22:4604,87:4603,214:3894,215:$Vc9},o($Vr2,$V41),o($Vr2,$V51),o($Vr2,$V61),o($Vt1,$Vq5),o($Vt1,$Vr5),{19:$Vd9,21:$Ve9,22:4606,87:4605,214:3920,215:$Vf9},o($VA1,$VW5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($VA2,$V41),o($VA2,$V51),o($VA2,$V61),o($VD1,$Vq5),o($VD1,$Vr5),{19:$Vg9,21:$Vh9,22:4608,87:4607,214:3947,215:$Vi9},o($VC3,$Vs5),{193:[1,4611],194:4609,195:[1,4610]},o($VB3,$V66),o($VB3,$V76),o($VB3,$V86),o($VB3,$Vn),o($VB3,$Vo),o($VB3,$VZ3),o($VB3,$V_3),o($VB3,$V$3),o($VB3,$Vp),o($VB3,$Vq),o($VB3,$V04),o($VB3,$V14,{202:4612,203:4613,111:[1,4614]}),o($VB3,$V24),o($VB3,$V34),o($VB3,$V44),o($VB3,$V54),o($VB3,$V64),o($VB3,$V74),o($VB3,$V84),o($VB3,$V94),o($VB3,$Va4),o($VB7,$V83),o($VB7,$V93),o($VB7,$Va3),o($VB7,$Vb3),{193:[1,4617],194:4615,195:[1,4616]},o($VC3,$V66),o($VC3,$V76),o($VC3,$V86),o($VC3,$Vn),o($VC3,$Vo),o($VC3,$VZ3),o($VC3,$V_3),o($VC3,$V$3),o($VC3,$Vp),o($VC3,$Vq),o($VC3,$V04),o($VC3,$V14,{202:4618,203:4619,111:[1,4620]}),o($VC3,$V24),o($VC3,$V34),o($VC3,$V44),o($VC3,$V54),o($VC3,$V64),o($VC3,$V74),o($VC3,$V84),o($VC3,$V94),o($VC3,$Va4),o($VC7,$V83),o($VC7,$V93),o($VC7,$Va3),o($VC7,$Vb3),{19:[1,4623],21:[1,4626],22:4622,87:4621,214:4624,215:[1,4625]},{193:[1,4629],194:4627,195:[1,4628]},o($VD3,$V66),o($VD3,$V76),o($VD3,$V86),o($VD3,$Vn),o($VD3,$Vo),o($VD3,$VZ3),o($VD3,$V_3),o($VD3,$V$3),o($VD3,$Vp),o($VD3,$Vq),o($VD3,$V04),o($VD3,$V14,{202:4630,203:4631,111:[1,4632]}),o($VD3,$V24),o($VD3,$V34),o($VD3,$V44),o($VD3,$V54),o($VD3,$V64),o($VD3,$V74),o($VD3,$V84),o($VD3,$V94),o($VD3,$Va4),o($VD7,$V83),o($VD7,$V93),o($VD7,$Va3),o($VD7,$Vb3),o($Vi8,$V41),o($Vi8,$V51),o($Vi8,$V61),o($V_6,$Vq5),o($V_6,$Vr5),{19:$Vj9,21:$Vk9,22:4634,87:4633,214:4012,215:$Vl9},o($V87,$V_8),o($VI,$VJ,{63:4635,73:4636,75:4637,76:4638,92:4641,94:4642,87:4644,88:4645,89:4646,78:4647,39:4648,95:4652,22:4653,91:4655,118:4656,99:4660,214:4663,105:4664,107:4665,19:[1,4662],21:[1,4667],69:[1,4639],71:[1,4640],79:[1,4657],80:[1,4658],81:[1,4659],85:[1,4643],96:[1,4649],97:[1,4650],98:[1,4651],101:$VR9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,4654],215:[1,4666]}),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:4668,121:$VX2,148:$VY2,189:$VZ2}),o($V87,$VB2),o($V87,$Vw),o($V87,$Vx),o($V87,$Vn),o($V87,$Vo),o($V87,$Vy),o($V87,$Vp),o($V87,$Vq),o($V87,$Vt2,{99:4051,95:4669,101:$Vm9,102:$VR,103:$VS,104:$VT}),o($Vp8,$Vu2),o($Vp8,$V33),o($V87,$V09),o($VR7,$VR3),o($VT7,$VS3),o($VT7,$VT3),o($VT7,$VU3),{100:[1,4670]},o($VT7,$VT1),{100:[1,4672],106:4671,108:[1,4673],109:[1,4674],110:4675,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,4676]},o($VT7,$VW3),{121:[1,4677]},{19:[1,4680],21:[1,4683],22:4679,87:4678,214:4681,215:[1,4682]},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:4684,121:$VX2,148:$VY2,189:$VZ2}),o($V87,$VB2),o($V87,$Vw),o($V87,$Vx),o($V87,$Vn),o($V87,$Vo),o($V87,$Vy),o($V87,$Vp),o($V87,$Vq),o($V87,$Vt2,{99:4093,95:4685,101:$Vn9,102:$VR,103:$VS,104:$VT}),o($Vp8,$Vu2),o($Vp8,$V33),o($V87,$V09),o($VR7,$VR3),o($VT7,$VS3),o($VT7,$VT3),o($VT7,$VU3),{100:[1,4686]},o($VT7,$VT1),{100:[1,4688],106:4687,108:[1,4689],109:[1,4690],110:4691,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,4692]},o($VT7,$VW3),{121:[1,4693]},{19:[1,4696],21:[1,4699],22:4695,87:4694,214:4697,215:[1,4698]},o($VT7,$VW5),o($VT7,$VK1),o($VT7,$Vn),o($VT7,$Vo),o($VT7,$Vp),o($VT7,$Vq),o($Vo9,$VW4),{19:$Vi,21:$Vj,22:4700,214:45,215:$Vk},{19:$VS9,21:$VT9,22:4702,100:[1,4713],108:[1,4714],109:[1,4715],110:4712,181:4703,191:4701,196:4706,197:4707,198:4708,201:4711,204:[1,4716],205:[1,4717],206:[1,4722],207:[1,4723],208:[1,4724],209:[1,4725],210:[1,4718],211:[1,4719],212:[1,4720],213:[1,4721],214:4705,215:$VU9},o($Vx8,$VL7,{61:4726,53:[1,4727]}),o($Vy8,$VM7),o($Vy8,$VN7,{74:4728,76:4729,78:4730,39:4731,118:4732,79:[1,4733],80:[1,4734],81:[1,4735],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($Vy8,$VO7),o($Vy8,$VN5,{77:4736,73:4737,92:4738,94:4739,95:4743,99:4744,96:[1,4740],97:[1,4741],98:[1,4742],101:$VV9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:4746,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($Vy8,$VQ7),o($V39,$Vy1,{93:4747}),o($V49,$Vz1,{99:4431,95:4748,101:$VF9,102:$VR,103:$VS,104:$VT}),o($V59,$VB1,{86:4749}),o($V59,$VB1,{86:4750}),o($V59,$VB1,{86:4751}),o($Vy8,$VC1,{105:4435,107:4436,91:4752,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V69,$VT5),o($V69,$VU5),o($V39,$VG1),o($V39,$VH1),o($V39,$VI1),o($V39,$VJ1),o($V59,$VK1),o($VL1,$VM1,{162:4753}),o($V79,$VO1),{119:[1,4754],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($V69,$VE1),o($V69,$VF1),{19:[1,4758],21:[1,4762],22:4756,33:4755,200:4757,214:4759,215:[1,4761],216:[1,4760]},{100:[1,4763]},o($V39,$VT1),o($V59,$Vn),o($V59,$Vo),{100:[1,4765],106:4764,108:[1,4766],109:[1,4767],110:4768,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,4769]},o($V59,$Vp),o($V59,$Vq),o($Vy8,$VM7),o($Vy8,$VN7,{74:4770,76:4771,78:4772,39:4773,118:4774,79:[1,4775],80:[1,4776],81:[1,4777],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($Vy8,$VO7),o($Vy8,$VN5,{77:4778,73:4779,92:4780,94:4781,95:4785,99:4786,96:[1,4782],97:[1,4783],98:[1,4784],101:$VW9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:4788,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($Vy8,$VQ7),o($V39,$Vy1,{93:4789}),o($V49,$Vz1,{99:4464,95:4790,101:$VG9,102:$VR,103:$VS,104:$VT}),o($V59,$VB1,{86:4791}),o($V59,$VB1,{86:4792}),o($V59,$VB1,{86:4793}),o($Vy8,$VC1,{105:4468,107:4469,91:4794,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V69,$VT5),o($V69,$VU5),o($V39,$VG1),o($V39,$VH1),o($V39,$VI1),o($V39,$VJ1),o($V59,$VK1),o($VL1,$VM1,{162:4795}),o($V79,$VO1),{119:[1,4796],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($V69,$VE1),o($V69,$VF1),{19:[1,4800],21:[1,4804],22:4798,33:4797,200:4799,214:4801,215:[1,4803],216:[1,4802]},{100:[1,4805]},o($V39,$VT1),o($V59,$Vn),o($V59,$Vo),{100:[1,4807],106:4806,108:[1,4808],109:[1,4809],110:4810,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,4811]},o($V59,$Vp),o($V59,$Vq),{121:[1,4812]},o($Vq9,$VR3),o($V59,$V33),o($V59,$V43),o($V59,$V53),o($V59,$V63),o($V59,$V73),{111:[1,4813]},o($V59,$Vc3),o($V69,$Vs5),o($V79,$VW5),o($V79,$VK1),o($V79,$Vn),o($V79,$Vo),o($V79,$Vp),o($V79,$Vq),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:4814,121:$VX2,148:$VY2,189:$VZ2}),o($Vs4,$VB2),o($Vs4,$Vw),o($Vs4,$Vx),o($Vs4,$Vn),o($Vs4,$Vo),o($Vs4,$Vy),o($Vs4,$Vp),o($Vs4,$Vq),o($Vs4,$Vt2,{99:4170,95:4815,101:$Vs9,102:$VR,103:$VS,104:$VT}),o($Vw6,$Vu2),o($Vw6,$V33),o($Vs4,$Vc7),o($VR5,$VS3),o($VR5,$VT3),o($VR5,$VU3),{100:[1,4816]},o($VR5,$VT1),{100:[1,4818],106:4817,108:[1,4819],109:[1,4820],110:4821,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,4822]},o($VR5,$VW3),{121:[1,4823]},{19:[1,4826],21:[1,4829],22:4825,87:4824,214:4827,215:[1,4828]},o($VR5,$VW5),o($VR5,$VK1),o($VR5,$Vn),o($VR5,$Vo),o($VR5,$Vp),o($VR5,$Vq),o($VR5,$VW5),o($VR5,$VK1),o($VR5,$Vn),o($VR5,$Vo),o($VR5,$Vp),o($VR5,$Vq),o($Vt1,$Vs5),{193:[1,4832],194:4830,195:[1,4831]},o($Vr1,$V66),o($Vr1,$V76),o($Vr1,$V86),o($Vr1,$Vn),o($Vr1,$Vo),o($Vr1,$VZ3),o($Vr1,$V_3),o($Vr1,$V$3),o($Vr1,$Vp),o($Vr1,$Vq),o($Vr1,$V04),o($Vr1,$V14,{202:4833,203:4834,111:[1,4835]}),o($Vr1,$V24),o($Vr1,$V34),o($Vr1,$V44),o($Vr1,$V54),o($Vr1,$V64),o($Vr1,$V74),o($Vr1,$V84),o($Vr1,$V94),o($Vr1,$Va4),o($V96,$V83),o($V96,$V93),o($V96,$Va3),o($V96,$Vb3),{193:[1,4838],194:4836,195:[1,4837]},o($Vt1,$V66),o($Vt1,$V76),o($Vt1,$V86),o($Vt1,$Vn),o($Vt1,$Vo),o($Vt1,$VZ3),o($Vt1,$V_3),o($Vt1,$V$3),o($Vt1,$Vp),o($Vt1,$Vq),o($Vt1,$V04),o($Vt1,$V14,{202:4839,203:4840,111:[1,4841]}),o($Vt1,$V24),o($Vt1,$V34),o($Vt1,$V44),o($Vt1,$V54),o($Vt1,$V64),o($Vt1,$V74),o($Vt1,$V84),o($Vt1,$V94),o($Vt1,$Va4),o($Va6,$V83),o($Va6,$V93),o($Va6,$Va3),o($Va6,$Vb3),{19:[1,4844],21:[1,4847],22:4843,87:4842,214:4845,215:[1,4846]},{193:[1,4850],194:4848,195:[1,4849]},o($VD1,$V66),o($VD1,$V76),o($VD1,$V86),o($VD1,$Vn),o($VD1,$Vo),o($VD1,$VZ3),o($VD1,$V_3),o($VD1,$V$3),o($VD1,$Vp),o($VD1,$Vq),o($VD1,$V04),o($VD1,$V14,{202:4851,203:4852,111:[1,4853]}),o($VD1,$V24),o($VD1,$V34),o($VD1,$V44),o($VD1,$V54),o($VD1,$V64),o($VD1,$V74),o($VD1,$V84),o($VD1,$V94),o($VD1,$Va4),o($Vb6,$V83),o($Vb6,$V93),o($Vb6,$Va3),o($Vb6,$Vb3),o($Vr1,$Vg6),o($Vr1,$VK1),o($Vt1,$Vg6),o($Vt1,$VK1),o($VD1,$Vg6),o($VD1,$VK1),o($VP4,$V41),o($VP4,$V51),o($VP4,$V61),o($VB3,$Vq5),o($VB3,$Vr5),{19:$Vt9,21:$Vu9,22:4855,87:4854,214:4266,215:$Vv9},o($VQ4,$V41),o($VQ4,$V51),o($VQ4,$V61),o($VC3,$Vq5),o($VC3,$Vr5),{19:$Vw9,21:$Vx9,22:4857,87:4856,214:4292,215:$Vy9},o($VF3,$VW5),o($VF3,$VK1),o($VF3,$Vn),o($VF3,$Vo),o($VF3,$Vp),o($VF3,$Vq),o($VS4,$V41),o($VS4,$V51),o($VS4,$V61),o($VD3,$Vq5),o($VD3,$Vr5),{19:$Vz9,21:$VA9,22:4859,87:4858,214:4319,215:$VB9},o($V_6,$Vg6),o($V_6,$VK1),o($V87,$VM7),o($V87,$VN7,{74:4860,76:4861,78:4862,39:4863,118:4864,79:[1,4865],80:[1,4866],81:[1,4867],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($V87,$VO7),o($V87,$VN5,{77:4868,73:4869,92:4870,94:4871,95:4875,99:4876,96:[1,4872],97:[1,4873],98:[1,4874],101:$VX9,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:4878,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($V87,$VQ7),o($VR7,$Vy1,{93:4879}),o($VS7,$Vz1,{99:4660,95:4880,101:$VR9,102:$VR,103:$VS,104:$VT}),o($VT7,$VB1,{86:4881}),o($VT7,$VB1,{86:4882}),o($VT7,$VB1,{86:4883}),o($V87,$VC1,{105:4664,107:4665,91:4884,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VU7,$VT5),o($VU7,$VU5),o($VR7,$VG1),o($VR7,$VH1),o($VR7,$VI1),o($VR7,$VJ1),o($VT7,$VK1),o($VL1,$VM1,{162:4885}),o($VV7,$VO1),{119:[1,4886],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($VU7,$VE1),o($VU7,$VF1),{19:[1,4890],21:[1,4894],22:4888,33:4887,200:4889,214:4891,215:[1,4893],216:[1,4892]},{100:[1,4895]},o($VR7,$VT1),o($VT7,$Vn),o($VT7,$Vo),{100:[1,4897],106:4896,108:[1,4898],109:[1,4899],110:4900,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,4901]},o($VT7,$Vp),o($VT7,$Vq),{121:[1,4902]},o($Vp8,$VR3),o($VT7,$V33),o($VT7,$V43),o($VT7,$V53),o($VT7,$V63),o($VT7,$V73),{111:[1,4903]},o($VT7,$Vc3),o($VU7,$Vs5),o($VV7,$VW5),o($VV7,$VK1),o($VV7,$Vn),o($VV7,$Vo),o($VV7,$Vp),o($VV7,$Vq),{121:[1,4904]},o($Vp8,$VR3),o($VT7,$V33),o($VT7,$V43),o($VT7,$V53),o($VT7,$V63),o($VT7,$V73),{111:[1,4905]},o($VT7,$Vc3),o($VU7,$Vs5),o($VV7,$VW5),o($VV7,$VK1),o($VV7,$Vn),o($VV7,$Vo),o($VV7,$Vp),o($VV7,$Vq),{193:[1,4908],194:4906,195:[1,4907]},o($Vr8,$V66),o($Vr8,$V76),o($Vr8,$V86),o($Vr8,$Vn),o($Vr8,$Vo),o($Vr8,$VZ3),o($Vr8,$V_3),o($Vr8,$V$3),o($Vr8,$Vp),o($Vr8,$Vq),o($Vr8,$V04),o($Vr8,$V14,{202:4909,203:4910,111:[1,4911]}),o($Vr8,$V24),o($Vr8,$V34),o($Vr8,$V44),o($Vr8,$V54),o($Vr8,$V64),o($Vr8,$V74),o($Vr8,$V84),o($Vr8,$V94),o($Vr8,$Va4),o($VY9,$V83),o($VY9,$V93),o($VY9,$Va3),o($VY9,$Vb3),o($Vy8,$Vl8),o($Vr,$Vs,{59:4912,41:4913,44:$Vt}),o($Vy8,$Vm8),o($Vy8,$Vn8),o($Vy8,$VT5),o($Vy8,$VU5),{119:[1,4914],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($Vy8,$VE1),o($Vy8,$VF1),{19:[1,4918],21:[1,4922],22:4916,33:4915,200:4917,214:4919,215:[1,4921],216:[1,4920]},o($Vy8,$Vo8),o($Vy8,$Vv6),o($Vq9,$Vy1,{93:4923}),o($Vy8,$Vz1,{99:4744,95:4924,101:$VV9,102:$VR,103:$VS,104:$VT}),o($Vq9,$VG1),o($Vq9,$VH1),o($Vq9,$VI1),o($Vq9,$VJ1),{100:[1,4925]},o($Vq9,$VT1),{70:[1,4926]},o($V49,$Vt2,{99:4431,95:4927,101:$VF9,102:$VR,103:$VS,104:$VT}),o($V39,$Vu2),o($Vy8,$Vv2,{90:4928,95:4929,91:4930,99:4931,105:4933,107:4934,101:$VZ9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vy8,$Vx2,{90:4928,95:4929,91:4930,99:4931,105:4933,107:4934,101:$VZ9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vy8,$Vy2,{90:4928,95:4929,91:4930,99:4931,105:4933,107:4934,101:$VZ9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V79,$Vz2),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,4935],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:4936,121:$VX2,148:$VY2,189:$VZ2}),o($V69,$VB2),o($V69,$Vw),o($V69,$Vx),o($V69,$Vn),o($V69,$Vo),o($V69,$Vy),o($V69,$Vp),o($V69,$Vq),o($V39,$V33),o($V79,$V43),o($V79,$V53),o($V79,$V63),o($V79,$V73),{111:[1,4937]},o($V79,$Vc3),o($Vy8,$Vm8),o($Vy8,$Vn8),o($Vy8,$VT5),o($Vy8,$VU5),{119:[1,4938],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($Vy8,$VE1),o($Vy8,$VF1),{19:[1,4942],21:[1,4946],22:4940,33:4939,200:4941,214:4943,215:[1,4945],216:[1,4944]},o($Vy8,$Vo8),o($Vy8,$Vv6),o($Vq9,$Vy1,{93:4947}),o($Vy8,$Vz1,{99:4786,95:4948,101:$VW9,102:$VR,103:$VS,104:$VT}),o($Vq9,$VG1),o($Vq9,$VH1),o($Vq9,$VI1),o($Vq9,$VJ1),{100:[1,4949]},o($Vq9,$VT1),{70:[1,4950]},o($V49,$Vt2,{99:4464,95:4951,101:$VG9,102:$VR,103:$VS,104:$VT}),o($V39,$Vu2),o($Vy8,$Vv2,{90:4952,95:4953,91:4954,99:4955,105:4957,107:4958,101:$V_9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vy8,$Vx2,{90:4952,95:4953,91:4954,99:4955,105:4957,107:4958,101:$V_9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vy8,$Vy2,{90:4952,95:4953,91:4954,99:4955,105:4957,107:4958,101:$V_9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V79,$Vz2),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,4959],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:4960,121:$VX2,148:$VY2,189:$VZ2}),o($V69,$VB2),o($V69,$Vw),o($V69,$Vx),o($V69,$Vn),o($V69,$Vo),o($V69,$Vy),o($V69,$Vp),o($V69,$Vq),o($V39,$V33),o($V79,$V43),o($V79,$V53),o($V79,$V63),o($V79,$V73),{111:[1,4961]},o($V79,$Vc3),o($Vy8,$Vs5),{19:[1,4964],21:[1,4967],22:4963,87:4962,214:4965,215:[1,4966]},{121:[1,4968]},o($Vw6,$VR3),o($VR5,$V33),o($VR5,$V43),o($VR5,$V53),o($VR5,$V63),o($VR5,$V73),{111:[1,4969]},o($VR5,$Vc3),o($VS5,$Vs5),o($VV5,$VW5),o($VV5,$VK1),o($VV5,$Vn),o($VV5,$Vo),o($VV5,$Vp),o($VV5,$Vq),o($Vp2,$V41),o($Vp2,$V51),o($Vp2,$V61),o($Vr1,$Vq5),o($Vr1,$Vr5),{19:$VI9,21:$VJ9,22:4971,87:4970,214:4529,215:$VK9},o($Vr2,$V41),o($Vr2,$V51),o($Vr2,$V61),o($Vt1,$Vq5),o($Vt1,$Vr5),{19:$VL9,21:$VM9,22:4973,87:4972,214:4555,215:$VN9},o($VA1,$VW5),o($VA1,$VK1),o($VA1,$Vn),o($VA1,$Vo),o($VA1,$Vp),o($VA1,$Vq),o($VA2,$V41),o($VA2,$V51),o($VA2,$V61),o($VD1,$Vq5),o($VD1,$Vr5),{19:$VO9,21:$VP9,22:4975,87:4974,214:4582,215:$VQ9},o($VB3,$Vg6),o($VB3,$VK1),o($VC3,$Vg6),o($VC3,$VK1),o($VD3,$Vg6),o($VD3,$VK1),o($V87,$Vm8),o($V87,$Vn8),o($V87,$VT5),o($V87,$VU5),{119:[1,4976],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($V87,$VE1),o($V87,$VF1),{19:[1,4980],21:[1,4984],22:4978,33:4977,200:4979,214:4981,215:[1,4983],216:[1,4982]},o($V87,$Vo8),o($V87,$Vv6),o($Vp8,$Vy1,{93:4985}),o($V87,$Vz1,{99:4876,95:4986,101:$VX9,102:$VR,103:$VS,104:$VT}),o($Vp8,$VG1),o($Vp8,$VH1),o($Vp8,$VI1),o($Vp8,$VJ1),{100:[1,4987]},o($Vp8,$VT1),{70:[1,4988]},o($VS7,$Vt2,{99:4660,95:4989,101:$VR9,102:$VR,103:$VS,104:$VT}),o($VR7,$Vu2),o($V87,$Vv2,{90:4990,95:4991,91:4992,99:4993,105:4995,107:4996,101:$V$9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V87,$Vx2,{90:4990,95:4991,91:4992,99:4993,105:4995,107:4996,101:$V$9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V87,$Vy2,{90:4990,95:4991,91:4992,99:4993,105:4995,107:4996,101:$V$9,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($VV7,$Vz2),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,4997],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:4998,121:$VX2,148:$VY2,189:$VZ2}),o($VU7,$VB2),o($VU7,$Vw),o($VU7,$Vx),o($VU7,$Vn),o($VU7,$Vo),o($VU7,$Vy),o($VU7,$Vp),o($VU7,$Vq),o($VR7,$V33),o($VV7,$V43),o($VV7,$V53),o($VV7,$V63),o($VV7,$V73),{111:[1,4999]},o($VV7,$Vc3),o($V87,$Vs5),{19:[1,5002],21:[1,5005],22:5001,87:5000,214:5003,215:[1,5004]},o($V87,$Vs5),{19:[1,5008],21:[1,5011],22:5007,87:5006,214:5009,215:[1,5010]},o($Vo9,$V41),o($Vo9,$V51),o($Vo9,$V61),o($Vr8,$Vq5),o($Vr8,$Vr5),{19:$VS9,21:$VT9,22:5013,87:5012,214:4705,215:$VU9},o($Vy8,$V_8),o($VI,$VJ,{63:5014,73:5015,75:5016,76:5017,92:5020,94:5021,87:5023,88:5024,89:5025,78:5026,39:5027,95:5031,22:5032,91:5034,118:5035,99:5039,214:5042,105:5043,107:5044,19:[1,5041],21:[1,5046],69:[1,5018],71:[1,5019],79:[1,5036],80:[1,5037],81:[1,5038],85:[1,5022],96:[1,5028],97:[1,5029],98:[1,5030],101:$V0a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ,161:[1,5033],215:[1,5045]}),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:5047,121:$VX2,148:$VY2,189:$VZ2}),o($Vy8,$VB2),o($Vy8,$Vw),o($Vy8,$Vx),o($Vy8,$Vn),o($Vy8,$Vo),o($Vy8,$Vy),o($Vy8,$Vp),o($Vy8,$Vq),o($Vy8,$Vt2,{99:4744,95:5048,101:$VV9,102:$VR,103:$VS,104:$VT}),o($Vq9,$Vu2),o($Vq9,$V33),o($Vy8,$V09),o($V39,$VR3),o($V59,$VS3),o($V59,$VT3),o($V59,$VU3),{100:[1,5049]},o($V59,$VT1),{100:[1,5051],106:5050,108:[1,5052],109:[1,5053],110:5054,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,5055]},o($V59,$VW3),{121:[1,5056]},{19:[1,5059],21:[1,5062],22:5058,87:5057,214:5060,215:[1,5061]},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:5063,121:$VX2,148:$VY2,189:$VZ2}),o($Vy8,$VB2),o($Vy8,$Vw),o($Vy8,$Vx),o($Vy8,$Vn),o($Vy8,$Vo),o($Vy8,$Vy),o($Vy8,$Vp),o($Vy8,$Vq),o($Vy8,$Vt2,{99:4786,95:5064,101:$VW9,102:$VR,103:$VS,104:$VT}),o($Vq9,$Vu2),o($Vq9,$V33),o($Vy8,$V09),o($V39,$VR3),o($V59,$VS3),o($V59,$VT3),o($V59,$VU3),{100:[1,5065]},o($V59,$VT1),{100:[1,5067],106:5066,108:[1,5068],109:[1,5069],110:5070,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,5071]},o($V59,$VW3),{121:[1,5072]},{19:[1,5075],21:[1,5078],22:5074,87:5073,214:5076,215:[1,5077]},o($V59,$VW5),o($V59,$VK1),o($V59,$Vn),o($V59,$Vo),o($V59,$Vp),o($V59,$Vq),o($Vs4,$Vs5),{19:[1,5081],21:[1,5084],22:5080,87:5079,214:5082,215:[1,5083]},o($Vr1,$Vg6),o($Vr1,$VK1),o($Vt1,$Vg6),o($Vt1,$VK1),o($VD1,$Vg6),o($VD1,$VK1),o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:5085,121:$VX2,148:$VY2,189:$VZ2}),o($V87,$VB2),o($V87,$Vw),o($V87,$Vx),o($V87,$Vn),o($V87,$Vo),o($V87,$Vy),o($V87,$Vp),o($V87,$Vq),o($V87,$Vt2,{99:4876,95:5086,101:$VX9,102:$VR,103:$VS,104:$VT}),o($Vp8,$Vu2),o($Vp8,$V33),o($V87,$V09),o($VR7,$VR3),o($VT7,$VS3),o($VT7,$VT3),o($VT7,$VU3),{100:[1,5087]},o($VT7,$VT1),{100:[1,5089],106:5088,108:[1,5090],109:[1,5091],110:5092,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,5093]},o($VT7,$VW3),{121:[1,5094]},{19:[1,5097],21:[1,5100],22:5096,87:5095,214:5098,215:[1,5099]},o($VT7,$VW5),o($VT7,$VK1),o($VT7,$Vn),o($VT7,$Vo),o($VT7,$Vp),o($VT7,$Vq),o($VT7,$VW5),o($VT7,$VK1),o($VT7,$Vn),o($VT7,$Vo),o($VT7,$Vp),o($VT7,$Vq),o($Vr8,$Vg6),o($Vr8,$VK1),o($Vy8,$VM7),o($Vy8,$VN7,{74:5101,76:5102,78:5103,39:5104,118:5105,79:[1,5106],80:[1,5107],81:[1,5108],119:$VJ,125:$VJ,127:$VJ,189:$VJ,227:$VJ}),o($Vy8,$VO7),o($Vy8,$VN5,{77:5109,73:5110,92:5111,94:5112,95:5116,99:5117,96:[1,5113],97:[1,5114],98:[1,5115],101:$V1a,102:$VR,103:$VS,104:$VT}),o($V11,$Vs,{41:169,39:171,38:5119,44:$Vm1,79:$Vn1,80:$Vo1,81:$Vp1}),o($Vy8,$VQ7),o($V39,$Vy1,{93:5120}),o($V49,$Vz1,{99:5039,95:5121,101:$V0a,102:$VR,103:$VS,104:$VT}),o($V59,$VB1,{86:5122}),o($V59,$VB1,{86:5123}),o($V59,$VB1,{86:5124}),o($Vy8,$VC1,{105:5043,107:5044,91:5125,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V69,$VT5),o($V69,$VU5),o($V39,$VG1),o($V39,$VH1),o($V39,$VI1),o($V39,$VJ1),o($V59,$VK1),o($VL1,$VM1,{162:5126}),o($V79,$VO1),{119:[1,5127],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($V69,$VE1),o($V69,$VF1),{19:[1,5131],21:[1,5135],22:5129,33:5128,200:5130,214:5132,215:[1,5134],216:[1,5133]},{100:[1,5136]},o($V39,$VT1),o($V59,$Vn),o($V59,$Vo),{100:[1,5138],106:5137,108:[1,5139],109:[1,5140],110:5141,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,5142]},o($V59,$Vp),o($V59,$Vq),{121:[1,5143]},o($Vq9,$VR3),o($V59,$V33),o($V59,$V43),o($V59,$V53),o($V59,$V63),o($V59,$V73),{111:[1,5144]},o($V59,$Vc3),o($V69,$Vs5),o($V79,$VW5),o($V79,$VK1),o($V79,$Vn),o($V79,$Vo),o($V79,$Vp),o($V79,$Vq),{121:[1,5145]},o($Vq9,$VR3),o($V59,$V33),o($V59,$V43),o($V59,$V53),o($V59,$V63),o($V59,$V73),{111:[1,5146]},o($V59,$Vc3),o($V69,$Vs5),o($V79,$VW5),o($V79,$VK1),o($V79,$Vn),o($V79,$Vo),o($V79,$Vp),o($V79,$Vq),o($VR5,$VW5),o($VR5,$VK1),o($VR5,$Vn),o($VR5,$Vo),o($VR5,$Vp),o($VR5,$Vq),{121:[1,5147]},o($Vp8,$VR3),o($VT7,$V33),o($VT7,$V43),o($VT7,$V53),o($VT7,$V63),o($VT7,$V73),{111:[1,5148]},o($VT7,$Vc3),o($VU7,$Vs5),o($VV7,$VW5),o($VV7,$VK1),o($VV7,$Vn),o($VV7,$Vo),o($VV7,$Vp),o($VV7,$Vq),o($Vy8,$Vm8),o($Vy8,$Vn8),o($Vy8,$VT5),o($Vy8,$VU5),{119:[1,5149],122:194,123:195,124:196,125:$VP1,127:$VQ1,189:$VR1,217:198,227:$VS1},o($Vy8,$VE1),o($Vy8,$VF1),{19:[1,5153],21:[1,5157],22:5151,33:5150,200:5152,214:5154,215:[1,5156],216:[1,5155]},o($Vy8,$Vo8),o($Vy8,$Vv6),o($Vq9,$Vy1,{93:5158}),o($Vy8,$Vz1,{99:5117,95:5159,101:$V1a,102:$VR,103:$VS,104:$VT}),o($Vq9,$VG1),o($Vq9,$VH1),o($Vq9,$VI1),o($Vq9,$VJ1),{100:[1,5160]},o($Vq9,$VT1),{70:[1,5161]},o($V49,$Vt2,{99:5039,95:5162,101:$V0a,102:$VR,103:$VS,104:$VT}),o($V39,$Vu2),o($Vy8,$Vv2,{90:5163,95:5164,91:5165,99:5166,105:5168,107:5169,101:$V2a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vy8,$Vx2,{90:5163,95:5164,91:5165,99:5166,105:5168,107:5169,101:$V2a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($Vy8,$Vy2,{90:5163,95:5164,91:5165,99:5166,105:5168,107:5169,101:$V2a,102:$VR,103:$VS,104:$VT,112:$VU,113:$VV,114:$VW,115:$VX,116:$VY,117:$VZ}),o($V79,$Vz2),{19:$VC2,21:$VD2,22:384,71:$VE2,81:$VF2,100:$VG2,108:$VH2,109:$VI2,110:396,163:[1,5170],164:379,165:380,166:381,167:382,181:385,185:$VJ2,196:390,197:391,198:392,201:395,204:$VK2,205:$VL2,206:$VM2,207:$VN2,208:$VO2,209:$VP2,210:$VQ2,211:$VR2,212:$VS2,213:$VT2,214:389,215:$VU2},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:5171,121:$VX2,148:$VY2,189:$VZ2}),o($V69,$VB2),o($V69,$Vw),o($V69,$Vx),o($V69,$Vn),o($V69,$Vo),o($V69,$Vy),o($V69,$Vp),o($V69,$Vq),o($V39,$V33),o($V79,$V43),o($V79,$V53),o($V79,$V63),o($V79,$V73),{111:[1,5172]},o($V79,$Vc3),o($Vy8,$Vs5),{19:[1,5175],21:[1,5178],22:5174,87:5173,214:5176,215:[1,5177]},o($Vy8,$Vs5),{19:[1,5181],21:[1,5184],22:5180,87:5179,214:5182,215:[1,5183]},o($V87,$Vs5),{19:[1,5187],21:[1,5190],22:5186,87:5185,214:5188,215:[1,5189]},o($VV2,$VW2,{126:411,130:412,131:413,132:414,136:415,137:416,138:417,144:418,146:419,147:420,120:5191,121:$VX2,148:$VY2,189:$VZ2}),o($Vy8,$VB2),o($Vy8,$Vw),o($Vy8,$Vx),o($Vy8,$Vn),o($Vy8,$Vo),o($Vy8,$Vy),o($Vy8,$Vp),o($Vy8,$Vq),o($Vy8,$Vt2,{99:5117,95:5192,101:$V1a,102:$VR,103:$VS,104:$VT}),o($Vq9,$Vu2),o($Vq9,$V33),o($Vy8,$V09),o($V39,$VR3),o($V59,$VS3),o($V59,$VT3),o($V59,$VU3),{100:[1,5193]},o($V59,$VT1),{100:[1,5195],106:5194,108:[1,5196],109:[1,5197],110:5198,206:$VU1,207:$VV1,208:$VW1,209:$VX1},{100:[1,5199]},o($V59,$VW3),{121:[1,5200]},{19:[1,5203],21:[1,5206],22:5202,87:5201,214:5204,215:[1,5205]},o($V59,$VW5),o($V59,$VK1),o($V59,$Vn),o($V59,$Vo),o($V59,$Vp),o($V59,$Vq),o($V59,$VW5),o($V59,$VK1),o($V59,$Vn),o($V59,$Vo),o($V59,$Vp),o($V59,$Vq),o($VT7,$VW5),o($VT7,$VK1),o($VT7,$Vn),o($VT7,$Vo),o($VT7,$Vp),o($VT7,$Vq),{121:[1,5207]},o($Vq9,$VR3),o($V59,$V33),o($V59,$V43),o($V59,$V53),o($V59,$V63),o($V59,$V73),{111:[1,5208]},o($V59,$Vc3),o($V69,$Vs5),o($V79,$VW5),o($V79,$VK1),o($V79,$Vn),o($V79,$Vo),o($V79,$Vp),o($V79,$Vq),o($Vy8,$Vs5),{19:[1,5211],21:[1,5214],22:5210,87:5209,214:5212,215:[1,5213]},o($V59,$VW5),o($V59,$VK1),o($V59,$Vn),o($V59,$Vo),o($V59,$Vp),o($V59,$Vq)];
        this.defaultActions = {6:[2,11],24:[2,1],115:[2,120],116:[2,121],117:[2,122],124:[2,133],125:[2,134],208:[2,253],209:[2,254],210:[2,255],211:[2,256],343:[2,36],411:[2,143],412:[2,147],414:[2,149],604:[2,34],605:[2,38],642:[2,35],1164:[2,147],1166:[2,149]};
    }
    performAction (yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */
          const $0 = $$.length - 1;
        switch (yystate) {
case 1:

        let imports = Object.keys(yy._imports).length ? { imports: yy._imports } : {}
        const startObj = yy.start ? { start: yy.start } : {};
        const startActs = yy.startActs ? { startActs: yy.startActs } : {};
        let shapes = yy.shapes ? { shapes: Object.values(yy.shapes) } : {};
        const shexj = Object.assign(
          { type: "Schema" }, imports, startActs, startObj, shapes
        )
        if (yy.options.index) {
          if (yy._base !== null)
            shexj._base = yy._base;
          shexj._prefixes = yy._prefixes;
          shexj._index = {
            shapeExprs: yy.shapes || {},
            tripleExprs: yy.productions || {}
          };
          shexj._sourceMap = yy._sourceMap;
        }
        return shexj;
      
break;
case 2:
 yy.parser.yy = { lexer: yy.lexer} ; 
break;
case 15:
 // t: @@
        yy._setBase(yy._base === null ||
                    absoluteIRI.test($$[$0].slice(1, -1)) ? $$[$0].slice(1, -1) : yy._resolveIRI($$[$0].slice(1, -1)));
      
break;
case 16:
 // t: ShExParser-test.js/with pre-defined prefixes
        yy._prefixes[$$[$0-1].slice(0, -1)] = $$[$0];
      
break;
case 17:
 // t: @@
        yy._imports.push($$[$0]);
      
break;
case 20:

        if (yy.start)
          yy.error(new Error("Parse error: start already defined"));
        yy.start = shapeJunction("ShapeOr", $$[$0-1], $$[$0]); // t: startInline
      
break;
case 21:

        yy.startActs = $$[$0]; // t: startCode1
      
break;
case 22:
this.$ = [$$[$0]] // t: startCode1;
break;
case 23:
this.$ = appendTo($$[$0-1], $$[$0]) // t: startCode3;
break;
case 26:
 // t: 1dot 1val1vsMinusiri3??
        yy.addShape($$[$0-2], Object.assign({type: "ShapeDecl"}, $$[$0-3],
                                   $$[$0-1].length > 0 ? { restricts: $$[$0-1] } : { },
                                   {shapeExpr: $$[$0]})) // $$[$01]: t: @@
      
break;
case 27:
this.$ = {  };
break;
case 28:
this.$ = { abstract: true };
break;
case 29: case 96:
this.$ = [] // t: 1dot, 1dotAnnot3;
break;
case 30: case 97:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotAnnot3;
break;
case 31:

        this.$ = nonest($$[$0]);
      
break;
case 33:
this.$ = { type: "ShapeExternal" };
break;
case 34:

        if ($$[$0-2])
          $$[$0-1] = { type: "ShapeNot", "shapeExpr": nonest($$[$0-1]) }; // t:@@
        if ($$[$0]) { // If there were disjuncts,
          //           shapeOr will have $$[$0].set needsAtom.
          //           Prepend $$[$0].needsAtom with $$[$0-1].
          //           Note that $$[$0] may be a ShapeOr or a ShapeAnd.
          $$[$0].needsAtom.unshift(nonest($$[$0-1]));
          delete $$[$0].needsAtom;
          this.$ = $$[$0];
        } else {
          this.$ = $$[$0-1];
        }
      
break;
case 35:

        $$[$0-1] = { type: "ShapeNot", "shapeExpr": nonest($$[$0-1]) } // !!! opt
        if ($$[$0]) { // If there were disjuncts,
          //           shapeOr will have $$[$0].set needsAtom.
          //           Prepend $$[$0].needsAtom with $$[$0-1].
          //           Note that $$[$0] may be a ShapeOr or a ShapeAnd.
          $$[$0].needsAtom.unshift(nonest($$[$0-1]));
          delete $$[$0].needsAtom;
          this.$ = $$[$0];
        } else {
          this.$ = $$[$0-1];
        }
      
break;
case 36:

        $$[$0].needsAtom.unshift(nonest($$[$0-1]));
        delete $$[$0].needsAtom;
        this.$ = $$[$0]; // { type: "ShapeOr", "shapeExprs": [$$[$0-1]].concat($$[$0]) };
      
break;
case 37: case 232: case 249:
this.$ = null;
break;
case 38: case 42: case 45: case 51: case 58: case 189: case 248: case 269: case 273:
this.$ = $$[$0];
break;
case 40:
 // returns a ShapeOr
        const disjuncts = $$[$0].map(nonest);
        this.$ = { type: "ShapeOr", shapeExprs: disjuncts, needsAtom: disjuncts }; // t: @@
      
break;
case 41:
 // returns a ShapeAnd
        // $$[$0-1] could have implicit conjuncts and explicit nested ANDs (will have .nested: true)
        $$[$0-1].filter(c => c.type === "ShapeAnd").length === $$[$0-1].length
        const and = {
          type: "ShapeAnd",
          shapeExprs: $$[$0-1].reduce(
            (acc, elt) =>
              acc.concat(elt.type === 'ShapeAnd' && !elt.nested ? elt.shapeExprs : nonest(elt)), []
          )
        };
        this.$ = $$[$0].length > 0 ? { type: "ShapeOr", shapeExprs: [and].concat($$[$0].map(nonest)) } : and; // t: @@
        this.$.needsAtom = and.shapeExprs;
      
break;
case 43: case 46:
this.$ = [$$[$0]];
break;
case 44: case 47: case 49: case 53: case 56: case 60: case 271: case 275:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 48: case 52: case 55: case 59: case 270: case 274:
this.$ = [];
break;
case 50: case 268:
this.$ = shapeJunction("ShapeOr", $$[$0-1], $$[$0]);
break;
case 54: case 57:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], $$[$0]) // t: @@;
break;
case 61:
this.$ = $$[$0-1] ? { type: "ShapeNot", "shapeExpr": nonest($$[$0]) } /* t:@@ */ : $$[$0];
break;
case 62:
this.$ = false;
break;
case 63:
this.$ = true;
break;
case 64:
this.$ = $$[$0-1] ? { type: "ShapeNot", "shapeExpr": nonest($$[$0]) } /* t: 1NOTNOTdot, 1NOTNOTIRI, 1NOTNOTvs */ : $$[$0];
break;
case 65: case 74: case 79: case 277: case 279:
this.$ = $$[$0] ? { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } : $$[$0-1];
break;
case 67:
this.$ = $$[$0] ? shapeJunction("ShapeAnd", $$[$0-1], [$$[$0]]) /* t: 1dotRef1 */ : $$[$0-1] // t:@@;
break;
case 68: case 77: case 82:
this.$ = Object.assign($$[$0-1], {nested: true}) // t: 1val1vsMinusiri3;
break;
case 69: case 78: case 83:
this.$ = yy.EmptyShape // t: 1dot;
break;
case 76:
this.$ = $$[$0] ? shapeJunction("ShapeAnd", $$[$0-1], [$$[$0]]) /* t:@@ */ : $$[$0-1]	 // t: 1dotRef1 -- use _QnonLitNodeConstraint_E_Opt like below?;
break;
case 81:
this.$ = $$[$0] ? { type: "ShapeAnd", shapeExprs: [ extend({ type: "NodeConstraint" }, $$[$0-1]), $$[$0] ] } : $$[$0-1] // t: !! look to 1dotRef1;
break;
case 92:
 // t: 1dotRefLNex@@
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        const namePos = $$[$0].indexOf(':');
        this.$ = yy.addSourceMap(yy.expandPrefix($$[$0].substr(0, namePos), yy) + $$[$0].substr(namePos + 1)); // ShapeRef
      
break;
case 93:
 // t: 1dotRefNS1@@
        $$[$0] = $$[$0].substr(1, $$[$0].length-1);
        this.$ = yy.addSourceMap(yy.expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy)); // ShapeRef
      
break;
case 94:
this.$ = yy.addSourceMap($$[$0]) // ShapeRef // t: 1dotRef1, 1dotRefSpaceLNex, 1dotRefSpaceNS1;
break;
case 95: case 98:
 // t: !!
        this.$ = $$[$0-2]
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !!
        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !!
      
break;
case 99:
this.$ = extend({ type: "NodeConstraint", nodeKind: "literal" }, $$[$0]) // t: 1literalPattern;
break;
case 100:

        if (numericDatatypes.indexOf($$[$0-1]) === -1)
          numericFacets.forEach(function (facet) {
            if (facet in $$[$0])
              yy.error(new Error("Parse error: facet " + facet + " not allowed for unknown datatype " + $$[$0-1]));
          });
        this.$ = extend({ type: "NodeConstraint", datatype: $$[$0-1] }, $$[$0]) // t: 1datatype
      
break;
case 101:
this.$ = { type: "NodeConstraint", values: $$[$0-1] } // t: 1val1IRIREF;
break;
case 102:
this.$ = extend({ type: "NodeConstraint"}, $$[$0]);
break;
case 103:
this.$ = {} // t: 1literalPattern;
break;
case 104:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          yy.error(new Error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times"));
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: 1literalLength
      
break;
case 106: case 112:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          yy.error(new Error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times"));
        }
        this.$ = extend($$[$0-1], $$[$0]) // t: !! look to 1literalLength
      
break;
case 107:
this.$ = extend({ type: "NodeConstraint" }, $$[$0-1], $$[$0] ? $$[$0] : {}) // t: 1iriPattern;
break;
case 108:
this.$ = extend({ type: "NodeConstraint" }, $$[$0]) // t: @@;
break;
case 109:
this.$ = {};
break;
case 110:

        if (Object.keys($$[$0-1]).indexOf(Object.keys($$[$0])[0]) !== -1) {
          yy.error(new Error("Parse error: facet "+Object.keys($$[$0])[0]+" defined multiple times"));
        }
        this.$ = extend($$[$0-1], $$[$0])
      
break;
case 113:
this.$ = { nodeKind: "iri" } // t: 1iriPattern;
break;
case 114:
this.$ = { nodeKind: "bnode" } // t: 1bnodeLength;
break;
case 115:
this.$ = { nodeKind: "nonliteral" } // t: 1nonliteralLength;
break;
case 118:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalLength;
break;
case 119:
this.$ = unescapeRegexp($$[$0]) // t: 1literalPattern;
break;
case 120:
this.$ = "length" // t: 1literalLength;
break;
case 121:
this.$ = "minlength" // t: 1literalMinlength;
break;
case 122:
this.$ = "maxlength" // t: 1literalMaxlength;
break;
case 123:
this.$ = keyValObject($$[$0-1], $$[$0]) // t: 1literalMininclusive;
break;
case 124:
this.$ = keyValObject($$[$0-1], parseInt($$[$0], 10)) // t: 1literalTotaldigits;
break;
case 125:
this.$ = parseInt($$[$0], 10);
break;
case 126: case 127:
this.$ = parseFloat($$[$0]);
break;
case 128:
 // ## deprecated
        if ($$[$0] === XSD_DECIMAL || $$[$0] === XSD_FLOAT || $$[$0] === XSD_DOUBLE)
          this.$ = parseFloat($$[$0-2].value);
        else if (numericDatatypes.indexOf($$[$0]) !== -1)
          this.$ = parseInt($$[$0-2].value)
        else
          yy.error(new Error("Parse error: numeric range facet expected numeric datatype instead of " + $$[$0]));
      
break;
case 129:
this.$ = "mininclusive" // t: 1literalMininclusive;
break;
case 130:
this.$ = "minexclusive" // t: 1literalMinexclusive;
break;
case 131:
this.$ = "maxinclusive" // t: 1literalMaxinclusive;
break;
case 132:
this.$ = "maxexclusive" // t: 1literalMaxexclusive;
break;
case 133:
this.$ = "totaldigits" // t: 1literalTotaldigits;
break;
case 134:
this.$ = "fractiondigits" // t: 1literalFractiondigits;
break;
case 135:
 // t: 1dotExtend3
        this.$ = $$[$0-2] === yy.EmptyShape ? { type: "Shape" } : $$[$0-2]; // t: 0
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: !! look to open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = $$[$0].semActs; } // t: !! look to open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 136:
 // t: 1dotExtend3
        const exprObj = $$[$0-1] ? { expression: $$[$0-1] } : yy.EmptyObject; // t: 0, 0Extend1
        this.$ = (exprObj === yy.EmptyObject && $$[$0-3] === yy.EmptyObject) ?
	  yy.EmptyShape :
	  extend({ type: "Shape" }, exprObj, $$[$0-3]);
      
break;
case 137:
this.$ = [ "extends", [$$[$0]] ] // t: 1dotExtend1;
break;
case 138:
this.$ = [ "extra", $$[$0] ] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 139:
this.$ = [ "closed", true ] // t: 1dotClosed;
break;
case 140:
this.$ = yy.EmptyObject;
break;
case 141:

        if ($$[$0-1] === yy.EmptyObject)
          $$[$0-1] = {};
        if ($$[$0][0] === "closed")
          $$[$0-1]["closed"] = true; // t: 1dotClosed
        else if ($$[$0][0] in $$[$0-1])
          $$[$0-1][$$[$0][0]] = unionAll($$[$0-1][$$[$0][0]], $$[$0][1]); // t: 1dotExtend3, 3groupdot3Extra, 3groupdotExtra3
        else
          $$[$0-1][$$[$0][0]] = $$[$0][1]; // t: 1dotExtend1
        this.$ = $$[$0-1];
      
break;
case 144:
this.$ = $$[$0] // t: 1dotExtra1, 3groupdot3Extra;
break;
case 145:
this.$ = [$$[$0]] // t: 1dotExtra1, 3groupdot3Extra, 3groupdotExtra3;
break;
case 146:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 3groupdotExtra3;
break;
case 150:
this.$ = { type: "OneOf", expressions: unionAll([$$[$0-1]], $$[$0]) } // t: 2oneOfdot;
break;
case 151:
this.$ = $$[$0] // t: 2oneOfdot;
break;
case 152:
this.$ = [$$[$0]] // t: 2oneOfdot;
break;
case 153:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2oneOfdot;
break;
case 156:
this.$ = $$[$0-1];
break;
case 160:
this.$ = { type: "EachOf", expressions: unionAll([$$[$0-2]], $$[$0-1]) } // t: 2groupOfdot;
break;
case 161:
this.$ = $$[$0] // ## deprecated // t: 2groupOfdot;
break;
case 162:
this.$ = $$[$0] // t: 2groupOfdot;
break;
case 163:
this.$ = [$$[$0]] // t: 2groupOfdot;
break;
case 164:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 2groupOfdot;
break;
case 165:

        if ($$[$0-1]) {
          this.$ = extend({ id: $$[$0-1] }, $$[$0]);
          yy.addProduction($$[$0-1],  this.$);
        } else {
          this.$ = $$[$0]
        }
      
break;
case 167:
this.$ = yy.addSourceMap($$[$0]);
break;
case 172:

        // t: open1dotOr1dot, !openopen1dotcloseCode1closeCode2
        this.$ = $$[$0-4];
        // Copy all of the new attributes into the encapsulated shape.
        if ("min" in $$[$0-2]) { this.$.min = $$[$0-2].min; } // t: open3groupdotclosecard23Annot3Code2
        if ("max" in $$[$0-2]) { this.$.max = $$[$0-2].max; } // t: open3groupdotclosecard23Annot3Code2
        if ($$[$0-1].length) { this.$.annotations = $$[$0-1]; } // t: open3groupdotcloseAnnot3, open3groupdotclosecard23Annot3Code2
        if ($$[$0]) { this.$.semActs = "semActs" in $$[$0-4] ? $$[$0-4].semActs.concat($$[$0].semActs) : $$[$0].semActs; } // t: open3groupdotcloseCode1, !open1dotOr1dot
      
break;
case 173:
this.$ = {} // t: 1dot;
break;
case 175:

        // $$[$0]: t: 1dotCode1
	if ($$[$0-3] !== yy.EmptyShape && false) {}
        // %7: t: 1inversedotCode1
        this.$ = extend({ type: "TripleConstraint" }, $$[$0-5], { predicate: $$[$0-4] }, ($$[$0-3] === yy.EmptyShape ? {} : { valueExpr: $$[$0-3] }), $$[$0-2], $$[$0]); // t: 1dot, 1inversedot
        if ($$[$0-1].length)
          this.$["annotations"] = $$[$0-1]; // t: 1dotAnnot3, 1inversedotAnnot3
      
break;
case 178:
this.$ = { min:0, max:UNBOUNDED } // t: 1cardStar;
break;
case 179:
this.$ = { min:1, max:UNBOUNDED } // t: 1cardPlus;
break;
case 180:
this.$ = { min:0, max:1 } // t: 1cardOpt;
break;
case 181:

        $$[$0] = $$[$0].substr(1, $$[$0].length-2);
        const nums = $$[$0].match(/(\d+)/g);
        this.$ = { min: parseInt(nums[0], 10) }; // t: 1card2blank, 1card2Star
        if (nums.length === 2)
            this.$["max"] = parseInt(nums[1], 10); // t: 1card23
        else if ($$[$0].indexOf(',') === -1) // t: 1card2
            this.$["max"] = parseInt(nums[0], 10);
        else
            this.$["max"] = UNBOUNDED;
      
break;
case 182:
this.$ = { inverse: true } // t: 1inversedot;
break;
case 183:
this.$ = $$[$0-1] // t: 1val1IRIREF;
break;
case 184:
this.$ = [] // t: 1val1IRIREF;
break;
case 185:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1IRIREF;
break;
case 190:
this.$ = [$$[$0]] // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 191:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusiri3, 1val1dotMinusiriStem3;
break;
case 192:
this.$ = [$$[$0]] // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 193:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinusliteral3, 1val1dotMinusliteralStem3;
break;
case 194:
this.$ = [$$[$0]] // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 195:
this.$ = appendTo($$[$0-1], $$[$0]) // t:1val1dotMinuslanguage3, 1val1dotMinuslanguageStem3;
break;
case 196:
this.$ = { type: "IriStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] };
break;
case 197:
this.$ = { type: "LiteralStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] };
break;
case 198:
this.$ = { type: "LanguageStemRange", stem: { type: "Wildcard" }, exclusions: $$[$0] };
break;
case 199:

        if ($$[$0]) {
          this.$ = {  // t: 1val1iriStem, 1val1iriStemMinusiri3
            type: $$[$0].length ? "IriStemRange" : "IriStem",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1iriStemMinusiri3
        } else {
          this.$ = $$[$0-1]; // t: 1val1IRIREF, 1AvalA
        }
      
break;
case 200:
this.$ = [] // t: 1val1iriStem, 1val1iriStemMinusiri3;
break;
case 201:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1iriStemMinusiri3;
break;
case 202:
this.$ = $$[$0] // t: 1val1iriStemMinusiri3;
break;
case 205:
this.$ = $$[$0] ? { type: "IriStem", stem: $$[$0-1] } /* t: 1val1iriStemMinusiriStem3 */ : $$[$0-1] // t: 1val1iriStemMinusiri3;
break;
case 208:

        if ($$[$0]) {
          this.$ = {  // t: 1val1literalStemMinusliteralStem3, 1val1literalStem
            type: $$[$0].length ? "LiteralStemRange" : "LiteralStem",
            stem: $$[$0-1].value
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1literalStemMinusliteral3
        } else {
          this.$ = $$[$0-1]; // t: 1val1LITERAL
        }
      
break;
case 209:
this.$ = [] // t: 1val1literalStem, 1val1literalStemMinusliteral3;
break;
case 210:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1literalStemMinusliteral3;
break;
case 211:
this.$ = $$[$0] // t: 1val1literalStemMinusliteral3;
break;
case 214:
this.$ = $$[$0] ? { type: "LiteralStem", stem: $$[$0-1].value } /* t: 1val1literalStemMinusliteral3 */ : $$[$0-1].value // t: 1val1literalStemMinusliteralStem3;
break;
case 215:

        if ($$[$0]) {
          this.$ = {  // t: 1val1languageStemMinuslanguage3 1val1languageStemMinuslanguageStem3 : 1val1languageStem
            type: $$[$0].length ? "LanguageStemRange" : "LanguageStem",
            stem: $$[$0-1]
          };
          if ($$[$0].length)
            this.$["exclusions"] = $$[$0]; // t: 1val1languageStemMinuslanguage3, 1val1languageStemMinuslanguageStem3
        } else {
          this.$ = { type: "Language", languageTag: $$[$0-1] }; // t: 1val1language
        }
      
break;
case 216:

        this.$ = {  // t: @@
          type: $$[$0].length ? "LanguageStemRange" : "LanguageStem",
          stem: ""
        };
        if ($$[$0].length)
          this.$["exclusions"] = $$[$0]; // t: @@
      
break;
case 217:
this.$ = [] // t: 1val1languageStem, 1val1languageStemMinuslanguage3;
break;
case 218:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1val1languageStemMinuslanguage3;
break;
case 219:
this.$ = $$[$0] // t: 1val1languageStemMinuslanguage3;
break;
case 222:
this.$ = $$[$0] ? { type: "LanguageStem", stem: $$[$0-1] } /* t: 1val1languageStemMinuslanguageStem3 */ : $$[$0-1] // t: 1val1languageStemMinuslanguage3;
break;
case 223:
this.$ = yy.addSourceMap($$[$0]) // Inclusion // t: 2groupInclude1;
break;
case 224:
this.$ = { type: "Annotation", predicate: $$[$0-1], object: $$[$0] } // t: 1dotAnnotIRIREF;
break;
case 227:
this.$ = $$[$0].length ? { semActs: $$[$0] } : null // t: 1dotCode1/2oneOfDot;
break;
case 228:
this.$ = [] // t: 1dot, 1dotCode1;
break;
case 229:
this.$ = appendTo($$[$0-1], $$[$0]) // t: 1dotCode1;
break;
case 230:
this.$ = $$[$0] ? unescapeSemanticAction($$[$0-1], $$[$0]) /* t: 1dotCode1 */ : { type: "SemAct", name: $$[$0-1] } // t: 1dotNoCode1;
break;
case 237:
this.$ = RDF_TYPE // t: 1AvalA;
break;
case 243:
this.$ = createLiteral($$[$0], XSD_INTEGER) // t: 1val1INTEGER;
break;
case 244:
this.$ = createLiteral($$[$0], XSD_DECIMAL) // t: 1val1DECIMAL;
break;
case 245:
this.$ = createLiteral($$[$0], XSD_DOUBLE) // t: 1val1DOUBLE;
break;
case 247:
this.$ = $$[$0] ? extend($$[$0-1], { type: $$[$0] }) : $$[$0-1] // t: 1val1Datatype;
break;
case 251:
this.$ = { value: "true", type: XSD_BOOLEAN } // t: 1val1true;
break;
case 252:
this.$ = { value: "false", type: XSD_BOOLEAN } // t: 1val1false;
break;
case 253:
this.$ = unescapeString($$[$0], 1)	// t: 1val1STRING_LITERAL2;
break;
case 254:
this.$ = unescapeString($$[$0], 3)	// t: 1val1STRING_LITERAL1;
break;
case 255:
this.$ = unescapeString($$[$0], 1)	// t: 1val1STRING_LITERAL_LONG2;
break;
case 256:
this.$ = unescapeString($$[$0], 3)	// t: 1val1STRING_LITERAL_LONG1;
break;
case 257:
this.$ = unescapeLangString($$[$0], 1)	// t: @@;
break;
case 258:
this.$ = unescapeLangString($$[$0], 3)	// t: @@;
break;
case 259:
this.$ = unescapeLangString($$[$0], 1)	// t: 1val1LANGTAG;
break;
case 260:
this.$ = unescapeLangString($$[$0], 3)	// t: 1val1STRING_LITERAL_LONG2_with_LANGTAG;
break;
case 261:
 // t: 1dot
        const unesc = ShExUtil.unescapeText($$[$0].slice(1,-1), {});
        this.$ = yy._base === null || absoluteIRI.test(unesc) ? unesc : yy._resolveIRI(unesc)
      
break;
case 263:
 // t:1dotPNex, 1dotPNdefault, ShExParser-test.js/with pre-defined prefixes
        const namePos1 = $$[$0].indexOf(':');
        this.$ = yy.expandPrefix($$[$0].substr(0, namePos1), yy) + ShExUtil.unescapeText($$[$0].substr(namePos1 + 1), pnameEscapeReplacements);
      
break;
case 264:
 // t: 1dotNS2, 1dotNSdefault, ShExParser-test.js/PNAME_NS with pre-defined prefixes
        this.$ = yy.expandPrefix($$[$0].substr(0, $$[$0].length - 1), yy);
      
break;
case 266:
this.$ = $$[$0] // t: 0Extends1, 1dotExtends1, 1dot3ExtendsLN;
break;
case 272:
this.$ = shapeJunction("ShapeAnd", $$[$0-1], $$[$0]);
break;
case 276:
this.$ = $$[$0-1] ? { type: "ShapeNot", "shapeExpr": nonest($$[$0]) } : $$[$0];
break;
case 280:
this.$ = Object.assign($$[$0-1], {nested: true});
break;
case 281:
this.$ = yy.EmptyShape;
break;
case 284:
this.$ = $$[$0] // t: @_$[$0-1]dotSpecialize1, @_$[$0-1]dot3Specialize, @_$[$0-1]dotSpecialize3;
break;
        }
    }
}

// Export module
__webpack_unused_export__ = ({ value: true });
exports.Fm = ShExJisonParser;


/* generated by ts-jison-lex 0.3.0 */
const { JisonLexer } = __webpack_require__(656);
class ShExJisonLexer extends JisonLexer {
    constructor (yy = {}) {
        super(yy);
        this.options = {"moduleName":"ShExJison"};
        this.rules = [/^(?:\s+|(#[^\u000a\u000d]*|\/\*([^*]|\*([^/]|\\\/))*\*\/))/,/^(?:(@(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*))))/,/^(?:(@((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)))/,/^(?:(@([A-Za-z])+((-([0-9A-Za-z])+))*))/,/^(?:@)/,/^(?:(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:)(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*)))/,/^(?:(\{((([+-])?([0-9])+))((,(((([+-])?([0-9])+))|\*)?))?\}))/,/^(?:(([+-])?((([0-9])+\.([0-9])*(([Ee]([+-])?([0-9])+)))|((\.)?([0-9])+(([Ee]([+-])?([0-9])+))))))/,/^(?:(([+-])?([0-9])*\.([0-9])+))/,/^(?:(([+-])?([0-9])+))/,/^(?:{ANON})/,/^(?:(<([^\u0000-\u0020<>\"{}|^`\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*>))/,/^(?:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?)?:))/,/^(?:a\b)/,/^(?:(\/([^\u002f\u005C\u000A\u000D]|\\[nrt\\|.?*+(){}$\u002D\u005B\u005D\u005E/]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))+\/[smix]*))/,/^(?:(_:((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|[0-9])((((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040])|\.)*((([A-Z]|[a-z]|[\u00c0-\u00d6]|[\u00d8-\u00f6]|[\u00f8-\u02ff]|[\u0370-\u037d]|[\u037f-\u1fff]|[\u200c-\u200d]|[\u2070-\u218f]|[\u2c00-\u2fef]|[\u3001-\ud7ff]|[\uf900-\ufdcf]|[\ufdf0-\ufffd]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_|_\b)|-|[0-9]|[\u00b7]|[\u0300-\u036f]|[\u203f-\u2040]))?))/,/^(?:(\{([^%\\]|\\[%\\]|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*%\}))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"(@([A-Za-z])+((-([0-9A-Za-z])+))*)))/,/^(?:('''(('|'')?([^\'\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/,/^(?:("""(("|"")?([^\"\\]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/,/^(?:('([^\u0027\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/,/^(?:("([^\u0022\u005c\u000a\u000d]|(\\[\"\'\\bfnrt])|(\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/,/^(?:([Bb][Aa][Ss][Ee]))/,/^(?:([Pp][Rr][Ee][Ff][Ii][Xx]))/,/^(?:([iI][mM][pP][oO][rR][tT]))/,/^(?:([sS][tT][aA][rR][tT]))/,/^(?:([eE][xX][tT][eE][rR][nN][aA][lL]))/,/^(?:([Aa][Bb][Ss][Tt][Rr][Aa][Cc][Tt]))/,/^(?:([Rr][Ee][Ss][Tt][Rr][Ii][Cc][Tt][Ss]))/,/^(?:([Ee][Xx][Tt][Ee][Nn][Dd][Ss]))/,/^(?:([Cc][Ll][Oo][Ss][Ee][Dd]))/,/^(?:([Ee][Xx][Tt][Rr][Aa]))/,/^(?:([Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Bb][Nn][Oo][Dd][Ee]))/,/^(?:([Ii][Rr][Ii]))/,/^(?:([Nn][Oo][Nn][Ll][Ii][Tt][Ee][Rr][Aa][Ll]))/,/^(?:([Aa][Nn][Dd]))/,/^(?:([Oo][Rr]))/,/^(?:([No][Oo][Tt]))/,/^(?:([Mm][Ii][Nn][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Ii][Nn][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ii][Nn][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Mm][Aa][Xx][Ee][Xx][Cc][Ll][Uu][Ss][Ii][Vv][Ee]))/,/^(?:([Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Ii][Nn][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Mm][Aa][Xx][Ll][Ee][Nn][Gg][Tt][Hh]))/,/^(?:([Tt][Oo][Tt][Aa][Ll][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:([Ff][Rr][Aa][Cc][Tt][Ii][Oo][Nn][Dd][Ii][Gg][Ii][Tt][Ss]))/,/^(?:=)/,/^(?:\/\/)/,/^(?:\{)/,/^(?:\})/,/^(?:&)/,/^(?:\|\|)/,/^(?:\|)/,/^(?:,)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\$)/,/^(?:!)/,/^(?:\^\^)/,/^(?:\^)/,/^(?:\.)/,/^(?:~)/,/^(?:;)/,/^(?:\*)/,/^(?:\+)/,/^(?:\?)/,/^(?:-)/,/^(?:%)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/,/^(?:[a-zA-Z0-9_-]+)/,/^(?:.)/];
        this.conditions = {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}};
    }
    performAction (yy, yy_, $avoiding_name_collisions, YY_START) {
              let YYSTATE = YY_START;
            switch ($avoiding_name_collisions) {
    case 0:/**/
      break;
    case 1:return 79;
      break;
    case 2:return 80;
      break;
    case 3: yy_.yytext = yy_.yytext.substr(1); return 185; 
      break;
    case 4:return 81;
      break;
    case 5:return 215;
      break;
    case 6:return 159;
      break;
    case 7:return 109;
      break;
    case 8:return 108;
      break;
    case 9:return 100;
      break;
    case 10:return 'ANON';
      break;
    case 11:return 19;
      break;
    case 12:return 21;
      break;
    case 13:return 199;
      break;
    case 14:return 101;
      break;
    case 15:return 216;
      break;
    case 16:return 195;
      break;
    case 17:return 211;
      break;
    case 18:return 213;
      break;
    case 19:return 210;
      break;
    case 20:return 212;
      break;
    case 21:return 207;
      break;
    case 22:return 209;
      break;
    case 23:return 206;
      break;
    case 24:return 208;
      break;
    case 25:return 18;
      break;
    case 26:return 20;
      break;
    case 27:return 23;
      break;
    case 28:return 26;
      break;
    case 29:return 40;
      break;
    case 30:return 36;
      break;
    case 31:return 229;
      break;
    case 32:return 227;
      break;
    case 33:return 125;
      break;
    case 34:return 127;
      break;
    case 35:return 85;
      break;
    case 36:return 97;
      break;
    case 37:return 96;
      break;
    case 38:return 98;
      break;
    case 39:return 53;
      break;
    case 40:return 51;
      break;
    case 41:return 44;
      break;
    case 42:return 112;
      break;
    case 43:return 113;
      break;
    case 44:return 114;
      break;
    case 45:return 115;
      break;
    case 46:return 102;
      break;
    case 47:return 103;
      break;
    case 48:return 104;
      break;
    case 49:return 116;
      break;
    case 50:return 117;
      break;
    case 51:return 27;
      break;
    case 52:return 190;
      break;
    case 53:return 119;
      break;
    case 54:return 121;
      break;
    case 55:return 189;
      break;
    case 56:return '||';
      break;
    case 57:return 135;
      break;
    case 58:return 140;
      break;
    case 59:return 69;
      break;
    case 60:return 70;
      break;
    case 61:return 161;
      break;
    case 62:return 163;
      break;
    case 63:return 148;
      break;
    case 64:return '!';
      break;
    case 65:return 111;
      break;
    case 66:return 160;
      break;
    case 67:return 71;
      break;
    case 68:return 178;
      break;
    case 69:return 141;
      break;
    case 70:return 156;
      break;
    case 71:return 157;
      break;
    case 72:return 158;
      break;
    case 73:return 179;
      break;
    case 74:return 193;
      break;
    case 75:return 204;
      break;
    case 76:return 205;
      break;
    case 77:return 7;
      break;
    case 78:return 'unexpected word "'+yy_.yytext+'"';
      break;
    case 79:return 'invalid character '+yy_.yytext;
      break;
        }
    }
}

// Export module
__webpack_unused_export__ = ({ value: true });
__webpack_unused_export__ = ShExJisonLexer;



/***/ }),

/***/ 210:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const ShExParserCjsModule = (function () {

const ShExJisonParser = (__webpack_require__(129)/* .ShExJisonParser */ .Fm);

const schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

class ShExCParserState {
  constructor () {
    this.blankId = 0;
    this._fileName = undefined; // for debugging
    this.EmptyObject = {  };
    this.EmptyShape = { type: "Shape" };
  }

  reset () {
    this._prefixes = this._imports = this._sourceMap = this.shapes = this.productions = this.start = this.startActs = null; // Reset state.
    this._base = this._baseIRI = this._baseIRIPath = this._baseIRIRoot = null;
  }

  _setFileName (fn) { this._fileName = fn; }

  // Creates a new blank node identifier
  blank () {
    return '_:b' + this.blankId++;
  };
  _resetBlanks (value) { this.blankId = value === undefined ? 0 : value; }

  // N3.js:lib/N3Parser.js<0.4.5>:58 with
  //   s/this\./ShExJisonParser./g
  // ### `_setBase` sets the base IRI to resolve relative IRIs.
  _setBase (baseIRI) {
    if (!baseIRI)
      baseIRI = null;

    // baseIRI '#' check disabled to allow -x 'data:text/shex,...#'
    // else if (baseIRI.indexOf('#') >= 0)
    //   throw new Error('Invalid base IRI ' + baseIRI);

    // Set base IRI and its components
    if (this._base = baseIRI) {
      this._basePath   = baseIRI.replace(/[^\/?]*(?:\?.*)?$/, '');
      baseIRI = baseIRI.match(schemeAuthority);
      this._baseRoot   = baseIRI[0];
      this._baseScheme = baseIRI[1];
    }
  }

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./ShExJisonParser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  _resolveIRI (iri) {
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return this._base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return this._base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return this._base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return this._removeDotSegments(this._basePath + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    const length = iri.length;
    let result = '', i = -1, pathStart = -1, next = '/', segmentStart = 0;

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  error (e) {
    const hash = {
      text: this.lexer.match,
      // token: this.terminals_[symbol] || symbol,
      line: this.lexer.yylineno,
      loc: this.lexer.yylloc,
      // expected: expected
      pos: this.lexer.showPosition()
    }
    e.hash = hash;
    if (this.recoverable) {
      this.recoverable(e)
    } else {
      throw e;
      this.reset();
    }
  }

  // Expand declared prefix or throw Error
  expandPrefix (prefix) {
    if (!(prefix in this._prefixes))
      this.error(new Error('Parse error; unknown prefix "' + prefix + ':"'));
    return this._prefixes[prefix];
  }

  // Add a shape to the map
  addShape (label, shape) {
    if (shape === this.EmptyShape)
      shape = { type: "Shape" };
    if (this.productions && label in this.productions)
      this.error(new Error("Structural error: "+label+" is a triple expression"));
    if (!this.shapes)
      this.shapes = {};
    if (label in this.shapes) {
      if (this.options.duplicateShape === "replace")
        this.shapes[label] = shape;
      else if (this.options.duplicateShape !== "ignore")
        this.error(new Error("Parse error: "+label+" already defined"));
    } else {
      this.shapes[label] = Object.assign({id: label}, shape);
    }
  }

  // Add a production to the map
  addProduction (label, production) {
    if (this.shapes && label in this.shapes)
      this.error(new Error("Structural error: "+label+" is a shape expression"));
    if (!this.productions)
      this.productions = {};
    if (label in this.productions) {
      if (this.options.duplicateShape === "replace")
        this.productions[label] = production;
      else if (this.options.duplicateShape !== "ignore")
        this.error(new Error("Parse error: "+label+" already defined"));
    } else
      this.productions[label] = production;
  }

  addSourceMap (obj) {
    if (!this._sourceMap)
      this._sourceMap = new Map();
    let list = this._sourceMap.get(obj)
    if (!list)
      this._sourceMap.set(obj, list = []);
    list.push(this.lexer.yylloc);
    return obj;
  }

}

// Creates a ShEx parser with the given pre-defined prefixes
const prepareParser = function (baseIRI, prefixes, schemaOptions) {
  schemaOptions = schemaOptions || {};
  // Create a copy of the prefixes
  const prefixesCopy = {};
  for (const prefix in prefixes || {})
    prefixesCopy[prefix] = prefixes[prefix];

  // Create a new parser with the given prefixes
  // (Workaround for https://github.com/zaach/jison/issues/241)
  const parser = new ShExJisonParser(ShExCParserState);
  const oldParse = parser.parse;

  function runParser (input, base = baseIRI, options = schemaOptions, filename = null) {
    const parserState = globalThis.PS = new ShExCParserState();
    parserState._prefixes = Object.create(prefixesCopy);
    parserState._imports = [];
    parserState._setBase(base);
    parserState._setFileName(baseIRI);
    parserState.options = schemaOptions;
    let errors = [];
    parserState.recoverable = e =>
      errors.push(e);
    let ret = null;
    try {
      ret = oldParse.call(parser, input, parserState);
    } catch (e) {
      errors.push(e);
    }
    parserState.reset();
    errors.forEach(e => {
      if ("hash" in e) {
        const hash = e.hash;
        const location = hash.loc;
        delete hash.loc;
        Object.assign(e, hash, {location: location});
      }
      return e;
    })
    if (errors.length == 1) {
      errors[0].parsed = ret;
      throw errors[0];
    } else if (errors.length) {
      const all = new Error("" + errors.length  + " parser errors:\n" + errors.map(
        e => contextError(e, parser.yy.lexer)
      ).join("\n"));
      all.errors = errors;
      all.parsed = ret;
      throw all;
    } else {
      return ret;
    }
  }
  parser.parse = runParser;
  parser._setBase = function (base) {
    baseIRI = base;
  }
  return parser;

  function contextError (e, lexer) {
    // use the lexer's pretty-printing
    const line = e.location.first_line;
    const col  = e.location.first_column + 1;
    const posStr = "pos" in e.hash ? "\n" + e.hash.pos : ""
    return `${baseIRI}\n line: ${line}, column: ${col}: ${e.message}${posStr}`;
  }
}

return {
  construct: prepareParser
};
})();

if (true)
  module.exports = ShExParserCjsModule;


/***/ }),

/***/ 395:
/***/ ((module) => {

/**
 *
 * isIRI, isBlank, getLiteralType, getLiteralValue
 */

const ShExTermCjsModule = (function () {

  const absoluteIRI = /^[a-z][a-z0-9+.-]*:/i,
    schemeAuthority = /^(?:([a-z][a-z0-9+.-]*:))?(?:\/\/[^\/]*)?/i,
    dotSegments = /(?:^|\/)\.\.?(?:$|[\/#?])/;

  const RdfLangString = "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString";
  const XsdString = "http://www.w3.org/2001/XMLSchema#string";

  // N3.js:lib/N3Parser.js<0.4.5>:576 with
  //   s/this\./Parser./g
  //   s/token/iri/
  // ### `_resolveIRI` resolves a relative IRI token against the base path,
  // assuming that a base path has been set and that the IRI is indeed relative.
  function resolveRelativeIRI (base, iri) {

    if (absoluteIRI.test(iri))
      return iri

    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined: return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#': return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?': return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root-relative IRIs at the root of the base IRI
    case '/':
      let m = base.match(schemeAuthority);
      // Resolve scheme-relative IRIs to the scheme
      return (iri[1] === '/' ? m[1] : m[0]) + _removeDotSegments(iri);
    // Resolve all other IRIs at the base IRI's path
    default: {
      return _removeDotSegments(base.replace(/[^\/?]*(?:\?.*)?$/, '') + iri);
    }
    }
  }

  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986.
  function _removeDotSegments (iri) {
    // Don't modify the IRI if it does not contain any dot segments
    if (!dotSegments.test(iri))
      return iri;

    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'
    const length = iri.length;
    let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';

    while (i < length) {
      switch (next) {
      // The path starts with the first slash after the authority
      case ':':
        if (pathStart < 0) {
          // Skip two slashes before the authority
          if (iri[++i] === '/' && iri[++i] === '/')
            // Skip to slash after the authority
            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')
              i = pathStart;
        }
        break;
      // Don't modify a query string or fragment
      case '?':
      case '#':
        i = length;
        break;
      // Handle '/.' or '/..' path segments
      case '/':
        if (iri[i + 1] === '.') {
          next = iri[++i + 1];
          switch (next) {
          // Remove a '/.' segment
          case '/':
            result += iri.substring(segmentStart, i - 1);
            segmentStart = i + 1;
            break;
          // Remove a trailing '/.' segment
          case undefined:
          case '?':
          case '#':
            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);
          // Remove a '/..' segment
          case '.':
            next = iri[++i + 1];
            if (next === undefined || next === '/' || next === '?' || next === '#') {
              result += iri.substring(segmentStart, i - 2);
              // Try to remove the parent path from result
              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)
                result = result.substr(0, segmentStart);
              // Remove a trailing '/..' segment
              if (next !== '/')
                return result + '/' + iri.substr(i + 1);
              segmentStart = i + 1;
            }
          }
        }
      }
      next = iri[++i];
    }
    return result + iri.substring(segmentStart);
  }

  function internalTerm (node) { // !!rdfjsTermToInternal
    switch (node.termType) {
    case ("NamedNode"):
      return node.value;
    case ("BlankNode"):
      return "_:" + node.value;
    case ("Literal"):
      return "\"" + node.value.replace(/"/g, '\\"') + "\"" + (
        node.datatypeString === RdfLangString
          ? "@" + node.language
          : node.datatypeString === XsdString
          ? ""
          : "^^" + node.datatypeString
      );
    default: throw Error("unknown RDFJS node type: " + JSON.stringify(node))
    }
  }

  function internalTriple (triple) { // !!rdfjsTripleToInternal
    return {
      subject: internalTerm(triple.subject),
      predicate: internalTerm(triple.predicate),
      object: internalTerm(triple.object)
    };
  }

  function externalTerm (node, factory) { // !!internalTermToRdfjs
    if (isIRI(node)) {
      return factory.namedNode(node);
    } else if (isBlank(node)) {
      return factory.blankNode(node.substr(2));
    } else if (isLiteral(node)) {
      let dtOrLang = getLiteralLanguage(node) ||
          (getLiteralType(node) === XsdString
           ? null // seems to screw up N3.js
           : factory.namedNode(getLiteralType(node)))
      return factory.literal(getLiteralValue(node), dtOrLang)
    } else {
      throw Error("Unknown internal term type: " + JSON.stringify(node));
    }
  }

  function externalTriple (triple, factory) { // !!rename internalTripleToRdjs
    return factory.quad(
      externalTerm(triple.subject, factory),
      externalTerm(triple.predicate, factory),
      externalTerm(triple.object, factory)
    );
  }

  function internalTermToTurtle (node, base, prefixes) {
    if (isIRI(node)) {
      // if (node === RDF_TYPE) // only valid in Turtle predicates
      //   return "a";

      // Escape special characters
      if (escape.test(node))
        node = node.replace(escapeAll, characterReplacer);
      const pref = Object.keys(prefixes).find(pref => node.startsWith(prefixes[pref]));
      if (pref) {
        const rest = node.substr(prefixes[pref].length);
        if (rest.indexOf("\\") === -1) // could also say no more than n of these: [...]
          return pref + ":" + rest.replace(/([~!$&'()*+,;=/?#@%])/g, '\\' + "$1");
      }
      if (node.startsWith(base)) {
        return "<" + node.substr(base.length) + ">";
      } else {
        return "<" + node + ">";
      }
    } else if (isBlank(node)) {
      return node;
    } else if (isLiteral(node)) {
      let value = getLiteralValue(node);
      const type = getLiteralType(node);
      const language = getLiteralLanguage(node);
      // Escape special characters
      if (escape.test(value))
        value = value.replace(escapeAll, characterReplacer);
      // Write the literal, possibly with type or language
      if (language)
        return '"' + value + '"@' + language;
      else if (type && type !== "http://www.w3.org/2001/XMLSchema#string")
        return '"' + value + '"^^' + this.internalTermToTurtle(type, base, prefixes);
      else
        return '"' + value + '"';
    } else {
      throw Error("Unknown internal term type: " + JSON.stringify(node));
    }
  }

  // Tests whether the given entity (triple object) represents an IRI in the N3 library
  function isIRI (entity) {
    if (typeof entity !== 'string')
      return false;
    else if (entity.length === 0)
      return true;
    else {
      const firstChar = entity[0];
      return firstChar !== '"' && firstChar !== '_';
    }
  }

  // Tests whether the given entity (triple object) represents a literal in the N3 library
  function isLiteral (entity) {
    return typeof entity === 'string' && entity[0] === '"';
  }

  // Tests whether the given entity (triple object) represents a blank node in the N3 library
  function isBlank (entity) {
    return typeof entity === 'string' && entity.substr(0, 2) === '_:';
  }

  // Tests whether the given entity represents the default graph
  function isDefaultGraph (entity) {
    return !entity;
  }

  // Tests whether the given triple is in the default graph
  function inDefaultGraph (triple) {
    return !triple.graph;
  }

  // Gets the string value of a literal in the N3 library
  function getLiteralValue (literal) {
    const match = /^"([^]*)"/.exec(literal);
    if (!match)
      throw new Error(literal + ' is not a literal');
    return match[1].replace(/\\"/g, '"');
  }

  // Gets the type of a literal in the N3 library
  function getLiteralType (literal) {
    const match = /^"[^]*"(?:\^\^([^"]+)|(@)[^@"]+)?$/.exec(literal);
    if (!match)
      throw new Error(literal + ' is not a literal');
    return match[1] || (match[2] ? RdfLangString : XsdString);
  }

  // Gets the language of a literal in the N3 library
  function getLiteralLanguage (literal) {
    const match = /^"[^]*"(?:@([^@"]+)|\^\^[^"]+)?$/.exec(literal);
    if (!match)
      throw new Error(literal + ' is not a literal');
    return match[1] ? match[1].toLowerCase() : '';
  }

// Characters in literals that require escaping
const escape    = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
    escapeAll = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
    escapeReplacements = {
      '\\': '\\\\', '"': '\\"', '\t': '\\t',
      '\n': '\\n', '\r': '\\r', '\b': '\\b', '\f': '\\f',
    };

  // Replaces a character by its escaped version
  function characterReplacer (character) {
    // Replace a single character by its escaped version
    let result = escapeReplacements[character]; // @@ const should be let
    if (result === undefined) {
      // Replace a single character with its 4-bit unicode escape sequence
      if (character.length === 1) {
        result = character.charCodeAt(0).toString(16);
        result = '\\u0000'.substr(0, 6 - result.length) + result;
      }
      // Replace a surrogate pair with its 8-bit unicode escape sequence
      else {
        result = ((character.charCodeAt(0) - 0xD800) * 0x400 +
                  character.charCodeAt(1) + 0x2400).toString(16);
        result = '\\U00000000'.substr(0, 10 - result.length) + result;
      }
    }
    return result;
  }

  return {
    RdfLangString: RdfLangString,
    XsdString: XsdString,
    resolveRelativeIRI: resolveRelativeIRI,
    isIRI: isIRI,
    isLiteral: isLiteral,
    isBlank: isBlank,
    isDefaultGraph: isDefaultGraph,
    inDefaultGraph: inDefaultGraph,
    getLiteralValue: getLiteralValue,
    getLiteralType: getLiteralType,
    getLiteralLanguage: getLiteralLanguage,
    internalTerm: internalTerm,
    internalTriple: internalTriple,
    externalTerm: externalTerm,
    externalTriple: externalTriple,
    internalTermToTurtle: internalTermToTurtle,
  }
})();

if (true)
  module.exports = ShExTermCjsModule; // node environment


/***/ }),

/***/ 860:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// **ShExUtil** provides ShEx utility functions

const ShExUtilCjsModule = (function () {
const ShExTerm = __webpack_require__(395);
const Visitor = __webpack_require__(355)
const Hierarchy = __webpack_require__(251)

const SX = {};
SX._namespace = "http://www.w3.org/ns/shex#";
["Schema", "@context", "imports", "startActs", "start", "shapes",
 "ShapeDecl", "ShapeOr", "ShapeAnd", "shapeExprs", "nodeKind",
 "NodeConstraint", "iri", "bnode", "nonliteral", "literal", "datatype", "length", "minlength", "maxlength", "pattern", "flags", "mininclusive", "minexclusive", "maxinclusive", "maxexclusive", "totaldigits", "fractiondigits", "values",
 "ShapeNot", "shapeExpr",
 "Shape", "abstract", "closed", "extra", "expression", "extends", "restricts", "semActs",
 "ShapeRef", "reference", "ShapeExternal",
 "EachOf", "OneOf", "expressions", "min", "max", "annotation",
 "TripleConstraint", "inverse", "negated", "predicate", "valueExpr",
 "Inclusion", "include", "Language", "languageTag",
 "IriStem", "LiteralStem", "LanguageStem", "stem",
 "IriStemRange", "LiteralStemRange", "LanguageStemRange", "exclusion",
 "Wildcard", "SemAct", "name", "code",
 "Annotation", "object"].forEach(p => {
  SX[p] = SX._namespace+p;
});
const RDF = {};
RDF._namespace = "http://www.w3.org/1999/02/22-rdf-syntax-ns#";
["type", "first", "rest", "nil"].forEach(p => {
  RDF[p] = RDF._namespace+p;
});
const XSD = {}
XSD._namespace = "http://www.w3.org/2001/XMLSchema#";
["anyURI"].forEach(p => {
  XSD[p] = XSD._namespace+p;
});
const OWL = {}
OWL._namespace = "http://www.w3.org/2002/07/owl#";
["Thing"].forEach(p => {
  OWL[p] = OWL._namespace+p;
});

const Missed = {}; // singleton
const UNBOUNDED = -1;

function extend (base) {
  if (!base) base = {};
  for (let i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
    for (let name in arg)
      base[name] = arg[name];
  return base;
}

    function isTerm (t) {
      return typeof t !== "object" || "value" in t && Object.keys(t).reduce((r, k) => {
        return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
      }, true);
    }

  function isShapeRef (expr) {
    return typeof expr === "string" // test for JSON-LD @ID
  }
  let isInclusion = isShapeRef;

        function ldify (term) {
          if (term[0] !== "\"")
            return term;
          const ret = { value: ShExTerm.getLiteralValue(term) };
          const dt = ShExTerm.getLiteralType(term);
          if (dt &&
              dt !== "http://www.w3.org/2001/XMLSchema#string" &&
              dt !== "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString")
            ret.type = dt;
          const lang = ShExTerm.getLiteralLanguage(term)
          if (lang)
            ret.language = lang;
          return ret;
        }
const ShExUtil = {

  SX: SX,
  RDF: RDF,
  version: function () {
    return "0.5.0";
  },

  Visitor: Visitor,
  index: Visitor.index,


  /* getAST - compile a traditional regular expression abstract syntax tree.
   * Tested but not used at present.
   */
  getAST: function (schema) {
    return {
      type: "AST",
      shapes: schema.shapes.reduce(function (ret, shape) {
        ret[shape.id] = {
          type: "ASTshape",
          expression: _compileShapeToAST(shape.shapeExpr.expression, [], schema)
        };
        return ret;
      }, {})
    };

    /* _compileShapeToAST - compile a shape expression to an abstract syntax tree.
     *
     * currently tested but not used.
     */
    function _compileShapeToAST (expression, tripleConstraints, schema) {

      function Epsilon () {
        this.type = "Epsilon";
      }

      function TripleConstraint (ordinal, predicate, inverse, negated, valueExpr) {
        this.type = "TripleConstraint";
        // this.ordinal = ordinal; @@ does 1card25
        this.inverse = !!inverse;
        this.negated = !!negated;
        this.predicate = predicate;
        if (valueExpr !== undefined)
          this.valueExpr = valueExpr;
      }

      function Choice (disjuncts) {
        this.type = "Choice";
        this.disjuncts = disjuncts;
      }

      function EachOf (conjuncts) {
        this.type = "EachOf";
        this.conjuncts = conjuncts;
      }

      function SemActs (expression, semActs) {
        this.type = "SemActs";
        this.expression = expression;
        this.semActs = semActs;
      }

      function KleeneStar (expression) {
        this.type = "KleeneStar";
        this.expression = expression;
      }

      function _compileExpression (expr, schema) {
        let repeated, container;

        /* _repeat: map expr with a min and max cardinality to a corresponding AST with Groups and Stars.
           expr 1 1 => expr
           expr 0 1 => Choice(expr, Eps)
           expr 0 3 => Choice(EachOf(expr, Choice(EachOf(expr, Choice(expr, EPS)), Eps)), Eps)
           expr 2 5 => EachOf(expr, expr, Choice(EachOf(expr, Choice(EachOf(expr, Choice(expr, EPS)), Eps)), Eps))
           expr 0 * => KleeneStar(expr)
           expr 1 * => EachOf(expr, KleeneStar(expr))
           expr 2 * => EachOf(expr, expr, KleeneStar(expr))

           @@TODO: favor Plus over Star if Epsilon not in expr.
        */
        function _repeat (expr, min, max) {
          if (min === undefined) { min = 1; }
          if (max === undefined) { max = 1; }

          if (min === 1 && max === 1) { return expr; }

          const opts = max === UNBOUNDED ?
                new KleeneStar(expr) :
                Array.from(Array(max - min)).reduce(function (ret, elt, ord) {
                  return ord === 0 ?
                    new Choice([expr, new Epsilon]) :
                    new Choice([new EachOf([expr, ret]), new Epsilon]);
                }, undefined);

          const reqd = min !== 0 ?
                new EachOf(Array.from(Array(min)).map(function (ret) {
                  return expr; // @@ something with ret
                }).concat(opts)) : opts;
          return reqd;
        }

        if (typeof expr === "string") { // Inclusion
          const included = schema._index.tripleExprs[expr].expression;
          return _compileExpression(included, schema);
        }

        else if (expr.type === "TripleConstraint") {
          // predicate, inverse, negated, valueExpr, annotations, semActs, min, max
          const valueExpr = "valueExprRef" in expr ?
                schema.valueExprDefns[expr.valueExprRef] :
                expr.valueExpr;
          const ordinal = tripleConstraints.push(expr)-1;
          const tp = new TripleConstraint(ordinal, expr.predicate, expr.inverse, expr.negated, valueExpr);
          repeated = _repeat(tp, expr.min, expr.max);
          return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;
        }

        else if (expr.type === "OneOf") {
          container = new Choice(expr.expressions.map(function (e) {
            return _compileExpression(e, schema);
          }));
          repeated = _repeat(container, expr.min, expr.max);
          return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;
        }

        else if (expr.type === "EachOf") {
          container = new EachOf(expr.expressions.map(function (e) {
            return _compileExpression(e, schema);
          }));
          repeated = _repeat(container, expr.min, expr.max);
          return expr.semActs ? new SemActs(repeated, expr.semActs) : repeated;
        }

        else throw Error("unexpected expr type: " + expr.type);
      }

      return expression ? _compileExpression(expression, schema) : new Epsilon();
    }
  },

  // tests
  // console.warn("HERE:", ShExJtoAS({"type":"Schema","shapes":[{"id":"http://all.example/S1","type":"Shape","expression":
  //  { "id":"http://all.example/S1e", "type":"EachOf","expressions":[ ] },
  // // { "id":"http://all.example/S1e","type":"TripleConstraint","predicate":"http://all.example/p1"},
  // "extra":["http://all.example/p3","http://all.example/p1","http://all.example/p2"]
  // }]}).shapes['http://all.example/S1']);

  ShExJtoAS: function (schema) {
    const _ShExUtil = this;
    schema._prefixes = schema._prefixes || {  };
    schema._index = this.index(schema);
    return schema;
  },

  AStoShExJ: function (schema, abbreviate) {
    schema["@context"] = schema["@context"] || "http://www.w3.org/ns/shex.jsonld";
    delete schema["_index"];
    delete schema["_prefixes"];
    return schema;
  },

  ShExRVisitor: function (knownShapeExprs) {
    const v = ShExUtil.Visitor();
    const knownTripleExpressions = {};
    const oldVisitShapeExpr = v.visitShapeExpr,
        oldVisitValueExpr = v.visitValueExpr,
        oldVisitTripleExpr = v.visitTripleExpr;
    v.keepShapeExpr = oldVisitShapeExpr;

    v.visitShapeExpr = function (expr, ...args) {
      if (typeof expr === "string")
        return expr;
      if ("id" in expr) {
        if (knownShapeExprs.has(expr.id) || Object.keys(expr).length === 1) {
          const already = knownShapeExprs.get(expr.id);
          if (typeof expr.expression === "object") {
            if (!already)
              knownShapeExprs.set(expr.id, oldVisitShapeExpr.call(this, expr, label));
          }
          return expr.id;
        }
        delete expr.id;
      }
      return oldVisitShapeExpr.call(this, expr, ...args);
    };

    v.visitTripleExpr = function (expr, ...args) {
      if (typeof expr === "string") { // shortcut for recursive references e.g. 1Include1 and ../doc/TODO.md
        return expr;
      } else if ("id" in expr) {
        if (expr.id in knownTripleExpressions) {
          knownTripleExpressions[expr.id].refCount++;
          return expr.id;
        }
      }
      const ret = oldVisitTripleExpr.call(this, expr, ...args);
      // Everything from RDF has an ID, usually a BNode.
      knownTripleExpressions[expr.id] = { refCount: 1, expr: ret };
      return ret;
    }

    v.cleanIds = function () {
      for (let k in knownTripleExpressions) {
        const known = knownTripleExpressions[k];
        if (known.refCount === 1 && ShExTerm.isBlank(known.expr.id))
          delete known.expr.id;
      };
    }

    return v;
  },


  // tests
  // const shexr = ShExUtil.ShExRtoShExJ({ "type": "Schema", "shapes": [
  //   { "id": "http://a.example/S1", "type": "Shape",
  //     "expression": {
  //       "type": "TripleConstraint", "predicate": "http://a.example/p1",
  //       "valueExpr": {
  //         "type": "ShapeAnd", "shapeExprs": [
  //           { "type": "NodeConstraint", "nodeKind": "bnode" },
  //           { "id": "http://a.example/S2", "type": "Shape",
  //             "expression": {
  //               "type": "TripleConstraint", "predicate": "http://a.example/p2" } }
  //           //            "http://a.example/S2"
  //         ] } } },
  //   { "id": "http://a.example/S2", "type": "Shape",
  //     "expression": {
  //       "type": "TripleConstraint", "predicate": "http://a.example/p2" } }
  // ] });
  // console.warn("HERE:", shexr.shapes[0].expression.valueExpr);
  // ShExUtil.ShExJtoAS(shexr);
  // console.warn("THERE:", shexr.shapes["http://a.example/S1"].expression.valueExpr);


  ShExRtoShExJ: function (schema) {
    // compile a list of known shapeExprs
    const knownShapeExprs = new Map();
    if ("shapes" in schema)
      schema.shapes.forEach(sh => knownShapeExprs.set(sh.id, null))

    // normalize references to those shapeExprs
    const v = this.ShExRVisitor(knownShapeExprs);
    if ("start" in schema)
      schema.start = v.visitShapeExpr(schema.start);
    if ("shapes" in schema)
      schema.shapes = schema.shapes.map(sh => v.visitShapeDecl(sh));

    // remove extraneous BNode IDs
    v.cleanIds();
    return schema;
  },

  valGrep: function (obj, type, f) {
    const _ShExUtil = this;
    const ret = [];
    for (let i in obj) {
      const o = obj[i];
      if (typeof o === "object") {
        if ("type" in o && o.type === type)
          ret.push(f(o));
        ret.push.apply(ret, _ShExUtil.valGrep(o, type, f));
      }
    }
    return ret;
  },

  n3jsToTurtle: function (res) {
    function termToLex (node) {
      return typeof node === "object" ? ("\"" + node.value + "\"" + (
        "type" in node ? "^^<" + node.type + ">" :
          "language" in node ? "@" + node.language :
          ""
      )) :
      ShExTerm.isIRI(node) ? "<" + node + ">" :
      ShExTerm.isBlank(node) ? node :
      "???";
    }
    return this.valGrep(res, "TestedTriple", function (t) {
      return ["subject", "predicate", "object"].map(k => {
        return termToLex(t[k]);
      }).join(" ")+" .";
    });
  },

  valToN3js: function (res, factory) {
    return this.valGrep(res, "TestedTriple", function (t) {
      const ret = JSON.parse(JSON.stringify(t));
      if (typeof t.object === "object")
        ret.object = ("\"" + t.object.value + "\"" + (
          "type" in t.object ? "^^" + t.object.type :
            "language" in t.object ? "@" + t.object.language :
            ""
        ));
      return ShExTerm.externalTriple(ret, factory);
    });
  },

  n3jsToTurtle: function (n3js) {
    function termToLex (node) {
      if (ShExTerm.isIRI(node))
        return "<" + node + ">";
      if (ShExTerm.isBlank(node))
        return node;
      const t = ShExTerm.getLiteralType(node);
      if (t && t !== "http://www.w3.org/2001/XMLSchema#string")
        return "\"" + ShExTerm.getLiteralValue(node) + "\"" +
        "^^<" + t + ">";
      return node;
    }
    return n3js.map(function (t) {
      return ["subject", "predicate", "object"].map(k => {
        return termToLex(t[k]);
      }).join(" ")+" .";
    });
  },

  /* canonicalize: move all tripleExpression references to their first expression.
   *
   */
  canonicalize: function (schema, trimIRI) {
    const ret = JSON.parse(JSON.stringify(schema));
    ret["@context"] = ret["@context"] || "http://www.w3.org/ns/shex.jsonld";
    delete ret._prefixes;
    delete ret._base;
    let index = ret._index || this.index(schema);
    delete ret._index;
    let sourceMap = ret._sourceMap;
    delete ret._sourceMap;
    // Don't delete ret.productions as it's part of the AS.
    const v = ShExUtil.Visitor();
    const knownExpressions = [];
    const oldVisitInclusion = v.visitInclusion, oldVisitTripleExpr = v.visitTripleExpr, oldVisitExtra = v.visitExtra;
    v.visitInclusion = function (inclusion) {
      if (knownExpressions.indexOf(inclusion) === -1 &&
          inclusion in index.tripleExprs) {
        knownExpressions.push(inclusion)
        return oldVisitTripleExpr.call(v, index.tripleExprs[inclusion]);
      }
      return oldVisitInclusion.call(v, inclusion);
    };
    v.visitTripleExpr = function (expression) {
      if (typeof expression === "object" && "id" in expression) {
        if (knownExpressions.indexOf(expression.id) === -1) {
          knownExpressions.push(expression.id)
          return oldVisitTripleExpr.call(v, index.tripleExprs[expression.id]);
        }
        return expression.id; // Inclusion
      }
      return oldVisitTripleExpr.call(v, expression);
    };
    v.visitExtra = function (l) {
      return l.slice().sort();
    }
    if (trimIRI) {
      v.visitIRI = function (i) {
        return i.replace(trimIRI, "");
      }
      if ("imports" in ret)
        ret.imports = v.visitImports(ret.imports);
    }
    if ("shapes" in ret) {
      ret.shapes = Object.keys(index.shapeExprs).map(k => {
        if ("extra" in index.shapeExprs[k])
          index.shapeExprs[k].extra.sort();
        return v.visitShapeDecl(index.shapeExprs[k]);
      });
    }
    return ret;
  },

  BiDiClosure: function () {
    return {
      needs: {},
      neededBy: {},
      inCycle: [],
      test: function () {
        function expect (l, r) { const ls = JSON.stringify(l), rs = JSON.stringify(r); if (ls !== rs) throw Error(ls+" !== "+rs); }
        // this.add(1, 2); expect(this.needs, { 1:[2]                     }); expect(this.neededBy, { 2:[1]                     });
        // this.add(3, 4); expect(this.needs, { 1:[2], 3:[4]              }); expect(this.neededBy, { 2:[1], 4:[3]              });
        // this.add(2, 3); expect(this.needs, { 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 2:[1], 3:[2,1], 4:[3,2,1] });

        this.add(2, 3); expect(this.needs, { 2:[3]                     }); expect(this.neededBy, { 3:[2]                     });
        this.add(1, 2); expect(this.needs, { 1:[2,3], 2:[3]            }); expect(this.neededBy, { 3:[2,1], 2:[1]            });
        this.add(1, 3); expect(this.needs, { 1:[2,3], 2:[3]            }); expect(this.neededBy, { 3:[2,1], 2:[1]            });
        this.add(3, 4); expect(this.needs, { 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 3:[2,1], 2:[1], 4:[3,2,1] });
        this.add(6, 7); expect(this.needs, { 6:[7]                    , 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 7:[6]                    , 3:[2,1], 2:[1], 4:[3,2,1] });
        this.add(5, 6); expect(this.needs, { 5:[6,7], 6:[7]           , 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 7:[6,5], 6:[5]           , 3:[2,1], 2:[1], 4:[3,2,1] });
        this.add(5, 7); expect(this.needs, { 5:[6,7], 6:[7]           , 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 7:[6,5], 6:[5]           , 3:[2,1], 2:[1], 4:[3,2,1] });
        this.add(7, 8); expect(this.needs, { 5:[6,7,8], 6:[7,8], 7:[8], 1:[2,3,4], 2:[3,4], 3:[4] }); expect(this.neededBy, { 7:[6,5], 6:[5], 8:[7,6,5], 3:[2,1], 2:[1], 4:[3,2,1] });
        this.add(4, 5);
        expect(this.needs,    { 1:[2,3,4,5,6,7,8], 2:[3,4,5,6,7,8], 3:[4,5,6,7,8], 4:[5,6,7,8], 5:[6,7,8], 6:[7,8], 7:[8] });
        expect(this.neededBy, { 2:[1], 3:[2,1], 4:[3,2,1], 5:[4,3,2,1], 6:[5,4,3,2,1], 7:[6,5,4,3,2,1], 8:[7,6,5,4,3,2,1] });
      },
      add: function (needer, needie, negated) {
        const r = this;
        if (!(needer in r.needs))
          r.needs[needer] = [];
        if (!(needie in r.neededBy))
          r.neededBy[needie] = [];

        // // [].concat.apply(r.needs[needer], [needie], r.needs[needie]). emitted only last element
        r.needs[needer] = r.needs[needer].concat([needie], r.needs[needie]).
          filter(function (el, ord, l) { return el !== undefined && l.indexOf(el) === ord; });
        // // [].concat.apply(r.neededBy[needie], [needer], r.neededBy[needer]). emitted only last element
        r.neededBy[needie] = r.neededBy[needie].concat([needer], r.neededBy[needer]).
          filter(function (el, ord, l) { return el !== undefined && l.indexOf(el) === ord; });

        if (needer in this.neededBy) this.neededBy[needer].forEach(function (e) {
          r.needs[e] = r.needs[e].concat([needie], r.needs[needie]).
            filter(function (el, ord, l) { return el !== undefined && l.indexOf(el) === ord; });
        });

        if (needie in this.needs) this.needs[needie].forEach(function (e) {
          r.neededBy[e] = r.neededBy[e].concat([needer], r.neededBy[needer]).
            filter(function (el, ord, l) { return el !== undefined && l.indexOf(el) === ord; })
        });
        // this.neededBy[needie].push(needer);

        if (r.needs[needer].indexOf(needer) !== -1)
          r.inCycle = r.inCycle.concat(r.needs[needer]);
      },
      trim: function () {
        function _trim (a) {
          // filter(function (el, ord, l) { return l.indexOf(el) === ord; })
          for (let i = a.length-1; i > -1; --i)
            if (a.indexOf(a[i]) < i)
              a.splice(i, i+1);
        }
        for (k in this.needs)
          _trim(this.needs[k]);
        for (k in this.neededBy)
          _trim(this.neededBy[k]);
      },
      foundIn: {},
      addIn: function (tripleExpr, shapeExpr) {
        this.foundIn[tripleExpr] = shapeExpr;
      }
    }
  },
  /** @@TODO tests
   * options:
   *   no: don't do anything; just report nestable shapes
   *   transform: function to change shape labels
   */
  nestShapes: function (schema, options = {}) {
    const _ShExUtil = this;
    const index = schema._index || this.index(schema);
    if (!('no' in options)) { options.no = false }

    let shapeLabels = Object.keys(index.shapeExprs || [])
    let shapeReferences = {}
    shapeLabels.forEach(label => {
      const shape = index.shapeExprs[label].shapeExpr
      noteReference(label, null) // just note the shape so we have a complete list at the end
      if (shape.type === 'Shape') {
        if ('extends' in shape) {
          shape.extends.forEach(
             // !!! assumes simple reference, not e.g. AND
            parent => noteReference(parent, shape)
          )
        }
        if ('expression' in shape) {
          (_ShExUtil.simpleTripleConstraints(shape) || []).forEach(tc => {
            let target = _ShExUtil.getValueType(tc.valueExpr, true)
            noteReference(target, {type: 'tc', shapeLabel: label, tc: tc})
          })
        }
      } else if (shape.type === 'NodeConstraint') {
        // can't have any refs to other shapes
      } else {
        throw Error('nestShapes currently only supports Shapes and NodeConstraints')
      }
    })
    let nestables = Object.keys(shapeReferences).filter(
      label => shapeReferences[label].length === 1
        && shapeReferences[label][0].type === 'tc' // no inheritance support yet
        && label in index.shapeExprs
        && index.shapeExprs[label].shapeExpr.type === 'Shape' // Don't nest e.g. valuesets for now. @@ needs an option
        && !index.shapeExprs[label].abstract // shouldn't have a ref to an unEXTENDed ABSTRACT shape anyways.
    ).filter(
      nestable => !('noNestPattern' in options)
        || !nestable.match(RegExp(options.noNestPattern))
    ).reduce((acc, label) => {
      acc[label] = {
        referrer: shapeReferences[label][0].shapeLabel,
        predicate: shapeReferences[label][0].tc.predicate
      }
      return acc
    }, {})
    if (!options.no) {
      let oldToNew = {}

      if (options.rename) {
        if (!('transform' in options)) {
          options.transform = (function () {
            let map = shapeLabels.reduce((acc, k, idx) => {
              acc[k] = '_:renamed' + idx
              return acc
            }, {})
            return function (id, shapeExpr) {
              return map[id]
            }
          })()
        }
        Object.keys(nestables).forEach(oldName => {
          let shapeExpr = index.shapeExprs[oldName]
          let newName = options.transform(oldName, shapeExpr)
          oldToNew[oldName] = shapeExpr.id = newName
          shapeLabels[shapeLabels.indexOf(oldName)] = newName
          nestables[newName] = nestables[oldName]
          nestables[newName].was = oldName
          delete nestables[oldName]

          // @@ maybe update index when done? 
          index.shapeExprs[newName] = index.shapeExprs[oldName]
          delete index.shapeExprs[oldName]

          if (shapeReferences[oldName].length !== 1) { throw Error('assertion: ' + oldName + ' doesn\'t have one reference: [' + shapeReferences[oldName] + ']') }
          let ref = shapeReferences[oldName][0]
          if (ref.type === 'tc') {
            if (typeof ref.tc.valueExpr === 'string') { // ShapeRef
              ref.tc.valueExpr = newName
            } else {
              throw Error('assertion: rename not implemented for TripleConstraint expr: ' + ref.tc.valueExpr)
              // _ShExUtil.setValueType(ref, newName)
            }
          } else if (ref.type === 'Shape') {
            throw Error('assertion: rename not implemented for Shape: ' + ref)
          } else {
            throw Error('assertion: ' + ref.type + ' not TripleConstraint or Shape')
          }
        })

        Object.keys(nestables).forEach(k => {
          let n = nestables[k]
          if (n.referrer in oldToNew) {
            n.newReferrer = oldToNew[n.referrer]
          }
        })

        // Restore old order for more concise diffs.
        let shapesCopy = {}
        shapeLabels.forEach(label => shapesCopy[label] = index.shapeExprs[label])
        index.shapeExprs = shapesCopy
      } else {
        const doomed = []
        const ids = schema.shapes.map(s => s.id)
        Object.keys(nestables).forEach(oldName => {
          const borged = index.shapeExprs[oldName].shapeExpr
          // In principle, the ShExJ shouldn't have a Decl if the above criteria are met,
          // but the ShExJ may be generated by something which emits Decls regardless.
          shapeReferences[oldName][0].tc.valueExpr = borged
          const delme = ids.indexOf(oldName)
          if (schema.shapes[delme].id !== oldName)
            throw Error('assertion: found ' + schema.shapes[delme].id + ' instead of ' + oldName)
          doomed.push(delme)
          delete index.shapeExprs[oldName]
        })
        doomed.sort((l, r) => r - l).forEach(delme => {
          const id = schema.shapes[delme].id
          if (!nestables[id])
            throw Error('deleting unexpected shape ' + id)
          delete schema.shapes[delme].id
          schema.shapes.splice(delme, 1)
        })
      }
    }
    // console.dir(nestables)
    // console.dir(shapeReferences)
    return nestables

    function noteReference (id, reference) {
      if (!(id in shapeReferences)) {
        shapeReferences[id] = []
      }
      if (reference) {
        shapeReferences[id].push(reference)
      }
    }
  },

  /** @@TODO tests
   *
   */
  getPredicateUsage: function (schema, untyped = {}) {
    const _ShExUtil = this;

    // populate shapeHierarchy
    let shapeHierarchy = Hierarchy.create()
    Object.keys(schema.shapes).forEach(label => {
      let shapeExpr = schema.shapes[label].shapeExpr
      if (shapeExpr.type === 'Shape') {
        (shapeExpr.extends || []).forEach(
          superShape => shapeHierarchy.add(superShape.reference, label)
        )
      }
    })
    Object.keys(schema.shapes).forEach(label => {
      if (!(label in shapeHierarchy.parents))
        shapeHierarchy.parents[label] = []
    })

    let predicates = { } // IRI->{ uses: [shapeLabel], commonType: shapeExpr }
    Object.keys(schema.shapes).forEach(shapeLabel => {
      let shapeExpr = schema.shapes[shapeLabel].shapeExpr
      if (shapeExpr.type === 'Shape') {
        let tcs = _ShExUtil.simpleTripleConstraints(shapeExpr) || []
        tcs.forEach(tc => {
          let newType = _ShExUtil.getValueType(tc.valueExpr)
          if (!(tc.predicate in predicates)) {
            predicates[tc.predicate] = {
              uses: [shapeLabel],
              commonType: newType,
              polymorphic: false
            }
            if (typeof newType === 'object') {
              untyped[tc.predicate] = {
                shapeLabel,
                predicate: tc.predicate,
                newType,
                references: []
              }
            }
          } else {
            predicates[tc.predicate].uses.push(shapeLabel)
            let curType = predicates[tc.predicate].commonType
            if (typeof curType === 'object' || curType === null) {
              // another use of a predicate with no commonType
              // console.warn(`${shapeLabel} ${tc.predicate}:${newType} uses untypable predicate`)
              untyped[tc.predicate].references.push({ shapeLabel, newType })
            } else if (typeof newType === 'object') {
              // first use of a predicate with no detectable commonType
              predicates[tc.predicate].commonType = null
              untyped[tc.predicate] = {
                shapeLabel,
                predicate: tc.predicate,
                curType,
                newType,
                references: []
              }
            } else if (curType === newType) {
              ; // same type again
            } else if (shapeHierarchy.parents[curType] && shapeHierarchy.parents[curType].indexOf(newType) !== -1) {
              predicates[tc.predicate].polymorphic = true; // already covered by current commonType
            } else {
              let idx = shapeHierarchy.parents[newType] ? shapeHierarchy.parents[newType].indexOf(curType) : -1
              if (idx === -1) {
                let intersection = shapeHierarchy.parents[curType]
                    ? shapeHierarchy.parents[curType].filter(
                      lab => -1 !== shapeHierarchy.parents[newType].indexOf(lab)
                    )
                    : []
                if (intersection.length === 0) {
                  untyped[tc.predicate] = {
                    shapeLabel,
                    predicate: tc.predicate,
                    curType,
                    newType,
                    references: []
                  }
                  // console.warn(`${shapeLabel} ${tc.predicate} : ${newType} isn\'t related to ${curType}`)
                  predicates[tc.predicate].commonType = null
                } else {
                  predicates[tc.predicate].commonType = intersection[0]
                  predicates[tc.predicate].polymorphic = true
                }
              } else {
                predicates[tc.predicate].commonType = shapeHierarchy.parents[newType][idx]
                predicates[tc.predicate].polymorphic = true
              }
            }
          }
        })
      }
    })
    return predicates
  },

  /** @@TODO tests
   *
   */
  simpleTripleConstraints: function (shape) {
    if (!('expression' in shape)) {
      return []
    }
    if (shape.expression.type === 'TripleConstraint') {
      return [ shape.expression ]
    }
    if (shape.expression.type === 'EachOf' &&
        !(shape.expression.expressions.find(
          expr => expr.type !== 'TripleConstraint'
        ))) {
          return shape.expression.expressions
        }
    throw Error('can\'t (yet) express ' + JSON.stringify(shape))
  },

  getValueType: function (valueExpr) {
    if (typeof valueExpr === 'string') { return valueExpr }
    if (valueExpr.reference) { return valueExpr.reference }
    if (valueExpr.nodeKind === 'iri') { return OWL.Thing } // !! push this test to callers
    if (valueExpr.datatype) { return valueExpr.datatype }
    // if (valueExpr.extends && valueExpr.extends.length === 1) { return valueExpr.extends[0] }
    return valueExpr // throw Error('no value type for ' + JSON.stringify(valueExpr))
  },

  /** getDependencies: find which shappes depend on other shapes by inheritance
   * or inclusion.
   * TODO: rewrite in terms of Visitor.
   */
  getDependencies: function (schema, ret) {
    ret = ret || this.BiDiClosure();
    (schema.shapes || []).forEach(function (shapeDecl) {
      function _walkShapeExpression (shapeExpr, negated) {
        if (typeof shapeExpr === "string") { // ShapeRef
          ret.add(shapeDecl.id, shapeExpr);
        } else if (shapeExpr.type === "ShapeOr" || shapeExpr.type === "ShapeAnd") {
          shapeExpr.shapeExprs.forEach(function (expr) {
            _walkShapeExpression(expr, negated);
          });
        } else if (shapeExpr.type === "ShapeNot") {
          _walkShapeExpression(shapeExpr.shapeExpr, negated ^ 1); // !!! test negation
        } else if (shapeExpr.type === "Shape") {
          _walkShape(shapeExpr, negated);
        } else if (shapeExpr.type === "NodeConstraint") {
          // no impact on dependencies
        } else if (shapeExpr.type === "ShapeExternal") {
        } else
          throw Error("expected Shape{And,Or,Ref,External} or NodeConstraint in " + JSON.stringify(shapeExpr));
      }
      
      function _walkShape (shape, negated) {
        function _walkTripleExpression (tripleExpr, negated) {
          function _exprGroup (exprs, negated) {
            exprs.forEach(function (nested) {
              _walkTripleExpression(nested, negated) // ?? negation allowed?
            });
          }

          function _walkTripleConstraint (tc, negated) {
            if (tc.valueExpr)
              _walkShapeExpression(tc.valueExpr, negated);
            if (negated && ret.inCycle.indexOf(shapeDecl.id) !== -1) // illDefined/negatedRefCycle.err
              throw Error("Structural error: " + shapeDecl.id + " appears in negated cycle");
          }

          if (typeof tripleExpr === "string") { // Inclusion
            ret.add(shapeDecl.id, tripleExpr);
          } else {
            if ("id" in tripleExpr)
              ret.addIn(tripleExpr.id, shapeDecl.id)
            if (tripleExpr.type === "TripleConstraint") {
              _walkTripleConstraint(tripleExpr, negated);
            } else if (tripleExpr.type === "OneOf" || tripleExpr.type === "EachOf") {
              _exprGroup(tripleExpr.expressions);
            } else {
              throw Error("expected {TripleConstraint,OneOf,EachOf,Inclusion} in " + tripleExpr);
            }
          }
        }

        (["extends", "restricts"]).forEach(attr => {
        if (shape[attr] && shape[attr].length > 0)
          shape[attr].forEach(function (i) {
            ret.add(shapeDecl.id, i);
          });
        })
        if (shape.expression)
          _walkTripleExpression(shape.expression, negated);
      }
      _walkShapeExpression(shapeDecl.shapeExpr, 0); // 0 means false for bitwise XOR
    });
    return ret;
  },

  /** partition: create subset of a schema with only desired shapes and
   * their dependencies.
   *
   * @schema: input schema
   * @partition: shape name or array of desired shape names
   * @deps: (optional) dependency tree from getDependencies.
   *        map(shapeLabel -> [shapeLabel])
   */
  partition: function (schema, includes, deps, cantFind) {
    const inputIndex = schema._index || this.index(schema)
    const outputIndex = { shapeExprs: new Map(), tripleExprs: new Map() };
    includes = includes instanceof Array ? includes : [includes];

    // build dependency tree if not passed one
    deps = deps || this.getDependencies(schema);
    cantFind = cantFind || function (what, why) {
      throw new Error("Error: can't find shape " +
                      (why ?
                       why + " dependency " + what :
                       what));
    };
    const partition = {};
    for (let k in schema)
      partition[k] = k === "shapes" ? [] : schema[k];
    includes.forEach(function (i) {
      if (i in outputIndex.shapeExprs) {
        // already got it.
      } else if (i in inputIndex.shapeExprs) {
        const adding = inputIndex.shapeExprs[i];
        partition.shapes.push(adding);
        outputIndex.shapeExprs[adding.id] = adding;
        if (i in deps.needs)
          deps.needs[i].forEach(function (n) {
            // Turn any needed TE into an SE.
            if (n in deps.foundIn)
              n = deps.foundIn[n];

            if (n in outputIndex.shapeExprs) {
            } else if (n in inputIndex.shapeExprs) {
              const needed = inputIndex.shapeExprs[n];
              partition.shapes.push(needed);
              outputIndex.shapeExprs[needed.id] = needed;
            } else
              cantFind(n, i);
          });
      } else {
        cantFind(i, "supplied");
      }
    });
    return partition;
  },


  /** @@TODO flatten: return copy of input schema with all shape and value class
   * references substituted by a copy of their referent.
   *
   * @schema: input schema
   */
  flatten: function (schema, deps, cantFind) {
    const v = this.Visitor();
    return v.visitSchema(schema);
  },

  // @@ put predicateUsage here

  emptySchema: function () {
    return {
      type: "Schema"
    };
  },
  merge: function (left, right, collision = 'throw', inPlace) {
    const overwrite =
          collision === 'left'
          ? () => false
          : collision === 'right'
          ? () => true
          : typeof collision === 'function'
          ? collision
          : (type, left, right) => {
            throw Error(`${type} ${JSON.stringify(right, null, 2)} collides with ${JSON.stringify(left, null, 2)}`);
          };
    const ret = inPlace ? left : this.emptySchema();

    function mergeArray (attr) {
      Object.keys(left[attr] || {}).forEach(function (key) {
        if (!(attr in ret))
          ret[attr] = {};
        ret[attr][key] = left[attr][key];
      });
      Object.keys(right[attr] || {}).forEach(function (key) {
        if (!(attr  in left) || !(key in left[attr]) || overwrite(attr, ret[attr][key], right[attr][key])) {
          if (!(attr in ret))
            ret[attr] = {};
          ret[attr][key] = right[attr][key];
        }
      });
    }

    function mergeMap (attr) {
      (left[attr] || new Map()).forEach(function (value, key, map) {
        if (!(attr in ret))
          ret[attr] = new Map();
        ret[attr].set(key, left[attr].get(key));
      });
      (right[attr] || new Map()).forEach(function (value, key, map) {
        if (!(attr  in left) || !(left[attr].has(key)) || overwrite(attr, ret[attr].get(key), right[attr].get(key))) {
          if (!(attr in ret))
            ret[attr] = new Map();
          ret[attr].set(key, right[attr].get(key));
        }
      });
    }

    // base
    if ("_base" in left)
      ret._base = left._base;
    if ("_base" in right)
      if (!("_base" in left)/* || overwrite('_base', ret._base, right._base)*/) // _base favors the left
        ret._base = right._base;

    mergeArray("_prefixes");

    mergeMap("_sourceMap");

    if ("imports" in right)
      if (!("imports" in left)) {
        ret.imports = right.imports;
      } else {
        [].push.apply(ret.imports, right.imports.filter(
          mprt => ret.imports.indexOf(mprt) === -1
        ))
      }

    // startActs
    if ("startActs" in left)
      ret.startActs = left.startActs;
    if ("startActs" in right)
      if (!("startActs" in left) || overwrite('startActs', ret.startActs, right.startActs))
        ret.startActs = right.startActs;

    // start
    if ("start" in left)
      ret.start = left.start;
    if ("start" in right)
      if (!("start" in left) || overwrite('start', ret.start, right.start))
        ret.start = right.start;

    const lindex = left._index || this.index(left);

    // shapes
    if (!inPlace)
      (left.shapes || []).forEach(function (lshape) {
        if (!("shapes" in ret))
          ret.shapes = [];
        ret.shapes.push(lshape);
      });
    (right.shapes || []).forEach(function (rshape) {
      if (!("shapes" in ret)) {
        ret.shapes = [];
        ret.shapes.push(rshape)
        lindex.shapeExprs[rshape.id] = rshape;
      } else {
        const previousDecl = lindex.shapeExprs[rshape.id];
        if (!previousDecl) {
          ret.shapes.push(rshape)
        } else if (overwrite('shapeDecl', previousDecl, rshape)) {
          ret.shapes.splice(ret.shapes.indexOf(previousDecl), 1);
          lindex.shapeExprs[rshape.id] = rshape;
          ret.shapes.push(rshape)
        }
      }
    });

    if (left._index || right._index)
      ret._index = this.index(ret); // inefficient; could build above

    return ret;
  },

  absolutizeResults: function (parsed, base) {
    // !! duplicate of Validation-test.js:84: const referenceResult = parseJSONFile(resultsFile...)
    function mapFunction (k, obj) {
      // resolve relative URLs in results file
      if (["shape", "reference", "node", "subject", "predicate", "object"].indexOf(k) !== -1 &&
          ShExTerm.isIRI(obj[k])) {
        obj[k] = ShExTerm.resolveRelativeIRI(base, obj[k]);
      }}

    function resolveRelativeURLs (obj) {
      Object.keys(obj).forEach(function (k) {
        if (typeof obj[k] === "object") {
          resolveRelativeURLs(obj[k]);
        }
        if (mapFunction) {
          mapFunction(k, obj);
        }
      });
    }
    resolveRelativeURLs(parsed);
    return parsed;
  },

  getProofGraph: function (res, db, dataFactory) {
    function _dive1 (solns) {
      if (solns.type === "NodeConstraintTest") {
      } else if (solns.type === "SolutionList" ||
                 solns.type === "ShapeAndResults" ||
                 solns.type === "ExtensionResults") {
        solns.solutions.forEach(s => {
          if (s.solution) // no .solution for <S> {}
            _dive1(s.solution);
        });
      } else if (solns.type === "ShapeOrResults") {
        _dive1(solns.solution);
      } else if (solns.type === "ShapeTest") {
        if ("solution" in solns)
          _dive1(solns.solution);
      } else if (solns.type === "OneOfSolutions" ||
                 solns.type === "EachOfSolutions") {
        solns.solutions.forEach(s => {
          _dive1(s);
        });
      } else if (solns.type === "OneOfSolution" ||
                 solns.type === "EachOfSolution") {
        solns.expressions.forEach(s => {
          _dive1(s);
        });
      } else if (solns.type === "TripleConstraintSolutions") {
        solns.solutions.map(s => {
          if (s.type !== "TestedTriple")
            throw Error("unexpected result type: " + s.type);
          const s2 = s;
          if (typeof s2.object === "object")
            s2.object = "\"" + s2.object.value.replace(/"/g, "\\\"") + "\""
            + (s2.object.language ? ("@" + s2.object.language) : 
               s2.object.type ? ("^^" + s2.object.type) :
               "");
          db.addQuad(ShExTerm.externalTriple(s2, dataFactory))
          if ("referenced" in s) {
            _dive1(s.referenced);
          }
        });
      } else if (solns.type === "ExtendedResults") {
        _dive1(solns.extensions);
        if ("local" in solns)
          _dive1(solns.local);        
      } else if (["ShapeNotResults", "Recursion"].indexOf(solns.type) !== -1) {
      } else {
        throw Error("unexpected expr type "+solns.type+" in " + JSON.stringify(solns));
      }
    }
    _dive1(res);
    return db;
  },

  validateSchema: function (schema) { // obselete, but may need other validations in the future.
    const _ShExUtil = this;
    const visitor = this.Visitor();
    let currentLabel = currentExtra = null;
    let currentNegated = false;
    const dependsOn = { };
    let inTE = false;
    const oldVisitShape = visitor.visitShape;
    const negativeDeps = Hierarchy.create();
    const positiveDeps = Hierarchy.create();
    let index = schema.index || this.index(schema);

    visitor.visitShape = function (shape, ...args) {
      const lastExtra = currentExtra;
      currentExtra = shape.extra;
      const ret = oldVisitShape.call(visitor, shape, ...args);
      currentExtra = lastExtra;
      return ret;
    }

    const oldVisitShapeNot = visitor.visitShapeNot;
    visitor.visitShapeNot = function (shapeNot, ...args) {
      const lastNegated = currentNegated;
      currentNegated ^= true;
      const ret = oldVisitShapeNot.call(visitor, shapeNot, ...args);
      currentNegated = lastNegated;
      return ret;
    }

    const oldVisitTripleConstraint = visitor.visitTripleConstraint;
    visitor.visitTripleConstraint = function (expr, ...args) {
      const lastNegated = currentNegated;
      if (currentExtra && currentExtra.indexOf(expr.predicate) !== -1)
        currentNegated ^= true;
      inTE = true;
      const ret = oldVisitTripleConstraint.call(visitor, expr, ...args);
      inTE = false;
      currentNegated = lastNegated;
      return ret;
    };

    const oldVisitShapeRef = visitor.visitShapeRef;
    visitor.visitShapeRef = function (shapeRef, ...args) {
      if (!(shapeRef in index.shapeExprs))
        throw firstError(Error("Structural error: reference to " + JSON.stringify(shapeRef) + " not found in schema shape expressions:\n" + dumpKeys(index.shapeExprs) + "."), shapeRef);
      if (!inTE && shapeRef === currentLabel)
        throw firstError(Error("Structural error: circular reference to " + currentLabel + "."), shapeRef);
      (currentNegated ? negativeDeps : positiveDeps).add(currentLabel, shapeRef)
      return oldVisitShapeRef.call(visitor, shapeRef, ...args);
    }

    const oldVisitInclusion = visitor.visitInclusion;
    visitor.visitInclusion = function (inclusion, ...args) {
      let refd;
      if (!(refd = index.tripleExprs[inclusion]))
        throw firstError(Error("Structural error: included shape " + inclusion + " not found in schema triple expressions:\n" + dumpKeys(index.tripleExprs) + "."), inclusion);
      // if (refd.type !== "Shape")
      //   throw Error("Structural error: " + inclusion + " is not a simple shape.");
      return oldVisitInclusion.call(visitor, inclusion, ...args);
    };

    (schema.shapes || []).forEach(function (shape) {
      currentLabel = shape.id;
      visitor.visitShapeDecl(shape, shape.id);
    });
    let circs = Object.keys(negativeDeps.children).filter(
      k => negativeDeps.children[k].filter(
        k2 => k2 in negativeDeps.children && negativeDeps.children[k2].indexOf(k) !== -1
          || k2 in positiveDeps.children && positiveDeps.children[k2].indexOf(k) !== -1
      ).length > 0
    );
    if (circs.length)
      throw firstError(Error("Structural error: circular negative dependencies on " + circs.join(',') + "."), circs[0]);

    function dumpKeys (obj) {
      return obj ? Object.keys(obj).map(
        u => u.substr(0, 2) === '_:' ? u : '<' + u + '>'
      ).join("\n        ") : '- none defined -'
    }

    function firstError (e, obj) {
      if ("_sourceMap" in schema)
        e.location = (schema._sourceMap.get(obj) || [undefined])[0];
      return e;
    }
  },

  /** isWellDefined: assert that schema is well-defined.
   *
   * @schema: input schema
   * @@TODO
   */
  isWellDefined: function (schema) {
    this.validateSchema(schema);
    // const deps = this.getDependencies(schema);
    return schema;
  },

  walkVal: function (val, cb) {
    const _ShExUtil = this;
    if (typeof val === "string") { // ShapeRef
      return null; // 1NOTRefOR1dot_pass-inOR
    }
    switch (val.type) {
    case "SolutionList": // dependent_shape
      return val.solutions.reduce((ret, exp) => {
        const n = _ShExUtil.walkVal(exp, cb);
        if (n)
          Object.keys(n).forEach(k => {
            if (k in ret)
              ret[k] = ret[k].concat(n[k]);
            else
              ret[k] = n[k];
          })
        return ret;
      }, {});
    case "NodeConstraintTest": // 1iri_pass-iri
      return _ShExUtil.walkVal(val.shapeExpr, cb);
    case "NodeConstraint": // 1iri_pass-iri
      return null;
    case "ShapeTest": // 0_empty
      const vals = [];
      visitSolution(val, vals); // A ShapeTest is a sort of Solution.
      const ret = vals.length
            ? {'http://shex.io/reflex': vals}
            : {};
      if ("solution" in val)
        Object.assign(ret, _ShExUtil.walkVal(val.solution, cb))
      return Object.keys(ret).length ? ret : null;
    case "Shape": // 1NOTNOTdot_passIv1
      return null;
    case "ShapeNotTest": // 1NOT_vsANDvs__passIv1
      return _ShExUtil.walkVal(val.shapeExpr, cb);
    case "ShapeNotResults": // NOT1dotOR2dot_pass-empty
      return _ShExUtil.walkVal(val.solution, cb);
    case "Failure": // NOT1dotOR2dot_pass-empty
      return null; // !!TODO
    case "ShapeNot": // 1NOTNOTIRI_passIo1,
      return _ShExUtil.walkVal(val.shapeExpr, cb);
    case "ShapeOrResults": // 1dotRefOR3_passShape1
      return _ShExUtil.walkVal(val.solution, cb);
    case "ShapeOr": // 1NOT_literalORvs__passIo1
      return val.shapeExprs.reduce((ret, exp) => {
        const n = _ShExUtil.walkVal(exp, cb);
        if (n)
          Object.keys(n).forEach(k => {
            if (k in ret)
              ret[k] = ret[k].concat(n[k]);
            else
              ret[k] = n[k];
          })
        return ret;
      }, {});
    case "ShapeAndResults": // 1iriRef1_pass-iri
    case "ExtensionResults": // extends-abstract-multi-empty_pass-missingOptRef1
      return val.solutions.reduce((ret, exp) => {
        const n = _ShExUtil.walkVal(exp, cb);
        if (n)
          Object.keys(n).forEach(k => {
            if (k in ret)
              ret[k] = ret[k].concat(n[k]);
            else
              ret[k] = n[k];
          })
        return ret;
      }, {});
    case "ShapeAnd": // 1NOT_literalANDvs__passIv1
      return val.shapeExprs.reduce((ret, exp) => {
        const n = _ShExUtil.walkVal(exp, cb);
        if (n)
          Object.keys(n).forEach(k => {
            if (k in ret)
              ret[k] = ret[k].concat(n[k]);
            else
              ret[k] = n[k];
          })
        return ret;
      }, {});
    case "ExtendedResults": // extends-abstract-multi-empty_pass-missingOptRef1
      return (["extensions", "local"]).reduce((ret, exp) => {
        const n = _ShExUtil.walkVal(exp, cb);
        if (n)
          Object.keys(n).forEach(k => {
            if (k in ret)
              ret[k] = ret[k].concat(n[k]);
            else
              ret[k] = n[k];
          })
        return ret;
      }, {});
    case "EachOfSolutions":
    case "OneOfSolutions":
      // 1dotOne2dot_pass_p1
      return val.solutions.reduce((ret, sln) => {
        sln.expressions.forEach(exp => {
          const n = _ShExUtil.walkVal(exp, cb);
          if (n)
            Object.keys(n).forEach(k => {
              if (k in ret)
                ret[k] = ret[k].concat(n[k]);
              else
                ret[k] = n[k];
            })
        });
        return ret;
      }, {});
    case "TripleConstraintSolutions": // 1dot_pass-noOthers
      if ("solutions" in val) {
        const ret = {};
        const vals = [];
        ret[val.predicate] = vals;
        val.solutions.forEach(sln => visitSolution(sln, vals));
        return vals.length ? ret : null;
      } else {
        return null;
      }
    case "Recursion": // 3circRefPlus1_pass-recursiveData
      return null;
    default:
      // console.log(val);
      throw Error("unknown shapeExpression type in " + JSON.stringify(val));
    }
    return val;

        function visitSolution (sln, vals) {
          const toAdd = [];
          if (chaseList(sln.referenced, toAdd)) { // parse 1val1IRIREF.ttl
            [].push.apply(vals, toAdd);
          } else { // 1dot_pass-noOthers
            const newElt = cb(sln) || {};
            if ("referenced" in sln) {
              const t = _ShExUtil.walkVal(sln.referenced, cb);
              if (t)
                newElt.nested = t;
            }
            if (Object.keys(newElt).length > 0)
              vals.push(newElt);
          }
          function chaseList (li) {
            if (!li) return false;
            if (li.node === RDF.nil) return true;
            if ("solution" in li && "solutions" in li.solution &&
                li.solution.solutions.length === 1 &&
                "expressions" in li.solution.solutions[0] &&
                li.solution.solutions[0].expressions.length === 2 &&
                "predicate" in li.solution.solutions[0].expressions[0] &&
                li.solution.solutions[0].expressions[0].predicate === RDF.first &&
                li.solution.solutions[0].expressions[1].predicate === RDF.rest) {
              const expressions = li.solution.solutions[0].expressions;
              const ent = expressions[0];
              const rest = expressions[1].solutions[0];
              const member = ent.solutions[0];
              let newElt = cb(member);
              if ("referenced" in member) {
                const t = _ShExUtil.walkVal(member.referenced, cb);
                if (t) {
                  if (newElt)
                    newElt.nested = t;
                  else
                    newElt = t;
                }
              }
              if (newElt)
                vals.push(newElt);
              return rest.object === RDF.nil ?
                true :
                chaseList(rest.referenced.type === "ShapeOrResults" // heuristic for `nil OR @<list>` idiom
                          ? rest.referenced.solution
                          : rest.referenced);
            }
          }
        }
  },

  /**
   * Convert val results to a property tree.
   * @exports
   * @returns {@code {p1:[{p2: v2},{p3: v3}]}}
   */
  valToValues: function (val) {
    return this.walkVal (val, function (sln) {
      return "object" in sln ? { ldterm: sln.object } : null;
    });
  },

  valToExtension: function (val, lookfor) {
    const map = this.walkVal (val, function (sln) {
      return "extensions" in sln ? { extensions: sln.extensions } : null;
    });
    function extensions (obj) {
      const list = [];
      let crushed = {};
      function crush (elt) {
        if (crushed === null)
          return elt;
        if (Array.isArray(elt)) {
          crushed = null;
          return elt;
        }
        for (k in elt) {
          if (k in crushed) {
            crushed = null
            return elt;
          }
          crushed[k] = ldify(elt[k]);
        }
        return elt;
      }
      for (let k in obj) {
        if (k === "extensions") {
          if (obj[k])
            list.push(crush(ldify(obj[k][lookfor])));
        } else if (k === "nested") {
          const nested = extensions(obj[k]);
          if (Array.isArray(nested))
            nested.forEach(crush);
          else
            crush(nested);
          list.push(nested);
        } else {
          list.push(crush(extensions(obj[k])));
        }
      }
      return list.length === 1 ? list[0] :
        crushed ? crushed :
        list;
    }
    return extensions(map);
  },

  /**
   * Convert a ShExR property tree to ShexJ.
   * A schema like:
   *   <Schema> a :Schema; :shapes (<#S1> <#S2>).
   *   <#S1> a :ShapeDecl; :shapeExpr [ a :ShapeNot; :shapeExpr <#S2> ].
   *   <#S2> a :ShapeDecl; :shapeExpr [ a :Shape; :expression [ a :TripleConstraint; :predicate <#p3> ] ].
   * will parse into a property tree with <#S2> duplicated inside <#S1>:
   *   {  "rdf:type": [ { "ldterm": ":Schema" } ], ":shapes": [
   *       { "ldterm": "#S1", "nested": {
   *           "rdf:type": [ { "ldterm": ":ShapeDecl" } ], ":shapeExpr": [
   *             { "ldterm": "_:n3-41", "nested": {
   *                  "rdf:type": [ { "ldterm": ":ShapeNot" } ], ":shapeExpr": [
   *                   { "ldterm": "#S2", "nested": {
   *                        "rdf:type": [ { "ldterm": ":ShapeDecl" } ], ":shapeExpr": [
   *                         { "ldterm": "_:n3-42", "nested": {
   *                              "rdf:type": [ { "ldterm": ":Shape" } ], ":expression": [
   *                               { "ldterm": "_:n3-43", "nested": {
   *                                    "rdf:type": [ { "ldterm": ":TripleConstraint" } ], ":predicate": [ { "ldterm": "#p3" } ] } }
   *                             ] } }
   *                       ] } }
   *                 ] } }
   *           ] } },
   *       { "ldterm": "#S2", "nested": {
   *            "rdf:type": [ { "ldterm": ":ShapeDecl" } ], ":shapeExpr": [
   *             { "ldterm": "_:n3-42", "nested": {
   *                  "rdf:type": [ { "ldterm": ":Shape" } ], ":expression": [
   *                   { "ldterm": "_:n3-43", "nested": {
   *                        "rdf:type": [ { "ldterm": ":TripleConstraint" } ], ":predicate": [ { "ldterm": "#p3" } ] } }
   *                 ] } }
   *           ] } }
   *     ] }
   * This method de-duplicates and normalizes all moves all ShapeDecls to be immediate children of the :shapes collection.
   * @exports
   * @returns ShEx schema
   */
  valuesToSchema: function (values) {
    // console.log(JSON.stringify(values, null, "  "));
    const v = values;
    const t = values[RDF.type][0].ldterm;
    if (t === SX.Schema) {
      /* Schema { "@context":"http://www.w3.org/ns/shex.jsonld"
       *           startActs:[SemAct+]? start:(shapeDeclOrExpr|labeledShapeExpr)?
       *           shapes:[labeledShapeExpr+]? }
       */
      const ret = {
        "@context": "http://www.w3.org/ns/shex.jsonld",
        type: "Schema"
      }
      if (SX.startActs in v)
        ret.startActs = v[SX.startActs].map(e => {
          const ret = {
            type: "SemAct",
            name: e.nested[SX.name][0].ldterm
          };
          if (SX.code in e.nested)
            ret.code = e.nested[SX.code][0].ldterm.value;
          return ret;
        });
      if (SX.imports in v)
        ret.imports = v[SX.imports].map(e => {
          return e.ldterm;
        });
      if (values[SX.start])
        ret.start = extend({id: values[SX.start][0].ldterm}, shapeDeclOrExpr(values[SX.start][0].nested));
      const shapes = values[SX.shapes];
      if (shapes) {
        ret.shapes = shapes.map(v => {
          var t = v.nested[RDF.type][0].ldterm;
          const obj = shapeDeclOrExpr(v.nested)
          return extend({id: v.ldterm}, obj);
        });
      }
      // console.log(ret);
      return ret;
    } else {
      throw Error("unknown schema type in " + JSON.stringify(values));
    }
    function findType (v, elts, f) {
      const t = v[RDF.type][0].ldterm.substr(SX._namespace.length);
      const elt = elts[t];
      if (!elt)
        return Missed;
      if (elt.nary) {
        const ret = {
          type: t,
        };
        ret[elt.prop] = v[SX[elt.prop]].map(e => {
          return valueOf(e);
        });
        return ret;
      } else {
        const ret = {
          type: t
        };
        if (elt.prop) {
          ret[elt.prop] = valueOf(v[SX[elt.prop]][0]);
        }
        return ret;
      }

      function valueOf (x) {
        return elt.expr && "nested" in x ? extend({ id: x.ldterm, }, f(x.nested)) : x.ldterm;
      }
    }
    /* transform ShapeDecls and shapeExprs. called from .shapes and .valueExpr.
     * The calls from .valueExpr can be Shapes or ShapeDecls because the ShExR graph is not yet normalized.
     */
    function shapeDeclOrExpr (v) {
      // <#shapeDeclOrExpr> @<#ShapeDecl> OR @<#shapeExpr>
      // shapeExpr = ShapeOr | ShapeAnd | ShapeNot | NodeConstraint | Shape | ShapeRef | ShapeExternal;
      const elts = { "ShapeAnd"     : { nary: true , expr: true , prop: "shapeExprs" },
                   "ShapeOr"      : { nary: true , expr: true , prop: "shapeExprs" },
                   "ShapeNot"     : { nary: false, expr: true , prop: "shapeExpr"  },
                   "ShapeRef"     : { nary: false, expr: false, prop: "reference"  },
                   "ShapeExternal": { nary: false, expr: false, prop: null         } };
      let ret = findType(v, elts, shapeDeclOrExpr);
      if (ret !== Missed)
        return ret;

      const t = v[RDF.type][0].ldterm;
      if (t === SX.ShapeDecl) {
        const ret = { type: "ShapeDecl" };
        ["abstract"].forEach(a => {
          if (SX[a] in v)
            ret[a] = !!v[SX[a]][0].ldterm.value;
        });
        if (SX.shapeExpr in v) {
          ret.shapeExpr =
            "nested" in v[SX.shapeExpr][0] ?
            extend({id: v[SX.shapeExpr][0].ldterm}, shapeDeclOrExpr(v[SX.shapeExpr][0].nested)) :
            v[SX.shapeExpr][0].ldterm;
        }
        return ret;
      } else if (t === SX.Shape) {
        ret = { type: "Shape" };
        ["closed"].forEach(a => {
          if (SX[a] in v)
            ret[a] = !!v[SX[a]][0].ldterm.value;
        });
        ["extra", "extends", "restricts"].forEach(a => {
          if (SX[a] in v)
            ret[a] = v[SX[a]].map(e => { return e.ldterm; });
        });
        if (SX.expression in v) {
          ret.expression =
            "nested" in v[SX.expression][0] ?
            extend({id: v[SX.expression][0].ldterm}, tripleExpr(v[SX.expression][0].nested)) :
            v[SX.expression][0].ldterm;
        }
        if (SX.annotation in v)
          ret.annotations = v[SX.annotation].map(e => {
            return {
              type: "Annotation",
              predicate: e.nested[SX.predicate][0].ldterm,
              object: e.nested[SX.object][0].ldterm
            };
          });
        if (SX.semActs in v)
          ret.semActs = v[SX.semActs].map(e => {
            const ret = {
              type: "SemAct",
              name: e.nested[SX.name][0].ldterm
            };
            if (SX.code in e.nested)
              ret.code = e.nested[SX.code][0].ldterm.value;
            return ret;
          });
        return ret;
      } else if (t === SX.NodeConstraint) {
        const ret = { type: "NodeConstraint" };
        if (SX.values in v)
          ret.values = v[SX.values].map(v1 => { return objectValue(v1); });
        if (SX.nodeKind in v)
          ret.nodeKind = v[SX.nodeKind][0].ldterm.substr(SX._namespace.length);
        ["length", "minlength", "maxlength", "mininclusive", "maxinclusive", "minexclusive", "maxexclusive", "totaldigits", "fractiondigits"].forEach(a => {
          if (SX[a] in v)
            ret[a] = parseFloat(v[SX[a]][0].ldterm.value);
        });
        if (SX.pattern in v)
          ret.pattern = v[SX.pattern][0].ldterm.value;
        if (SX.flags in v)
          ret.flags = v[SX.flags][0].ldterm.value;
        if (SX.datatype in v)
          ret.datatype = v[SX.datatype][0].ldterm;
        return ret;
      } else {
        throw Error("unknown shapeDeclOrExpr type in " + JSON.stringify(v));
      }

    }

    function objectValue (v, expectString) {
      if ("nested" in v) {
        const t = v.nested[RDF.type][0].ldterm;
        if ([SX.IriStem, SX.LiteralStem, SX.LanguageStem].indexOf(t) !== -1) {
          const ldterm = v.nested[SX.stem][0].ldterm.value;
          return {
            type: t.substr(SX._namespace.length),
            stem: ldterm
          };
        } else if ([SX.Language].indexOf(t) !== -1) {
          return {
            type: "Language",
            languageTag: v.nested[SX.languageTag][0].ldterm.value
          };
        } else if ([SX.IriStemRange, SX.LiteralStemRange, SX.LanguageStemRange].indexOf(t) !== -1) {
          const st = v.nested[SX.stem][0];
          let stem = st;
          if (typeof st === "object") {
            if (typeof st.ldterm === "object") {
              stem = st.ldterm;
            } else if (st.ldterm.startsWith("_:")) {
              stem = { type: "Wildcard" };
            }
          }
          const ret = {
            type: t.substr(SX._namespace.length),
            stem: stem.type !== "Wildcard" ? stem.value : stem
          };
          if (SX.exclusion in v.nested) {
            // IriStemRange:
            // * [{"ldterm":"http://a.example/v1"},{"ldterm":"http://a.example/v3"}] <-- no value
            // * [{"ldterm":"_:b836","nested":{a:[{"ldterm":sx:IriStem}],
            //                                 sx:stem:[{"ldterm":{"value":"http://a.example/v1"}}]}},
            //    {"ldterm":"_:b838","nested":{a:[{"ldterm":sx:IriStem}],
            //                                 sx:stem:[{"ldterm":{"value":"http://a.example/v3"}}]}}]

            // LiteralStemRange:
            // * [{"ldterm":{"value":"v1"}},{"ldterm":{"value":"v3"}}]
            // * [{"ldterm":"_:b866","nested":{a:[{"ldterm":sx:LiteralStem}],
            //                                 sx:stem:[{"ldterm":{"value":"v1"}}]}},
            //    {"ldterm":"_:b868","nested":{a:[{"ldterm":sx:LiteralStem}],
            //                                 sx:stem:[{"ldterm":{"value":"v3"}}]}}]

            // LanguageStemRange:
            // * [{"ldterm":{"value":"fr-be"}},{"ldterm":{"value":"fr-ch"}}]
            // * [{"ldterm":"_:b851","nested":{a:[{"ldterm":sx:LanguageStem}],
            //                                 sx:stem:[{"ldterm":{"value":"fr-be"}}]}},
            //    {"ldterm":"_:b853","nested":{a:[{"ldterm":sx:LanguageStem}],
            //                                 sx:stem:[{"ldterm":{"value":"fr-ch"}}]}}]
            ret.exclusions = v.nested[SX.exclusion].map(v1 => {
              return objectValue(v1, t !== SX.IriStemRange);
            });
          }
          return ret;
        } else {
          throw Error("unknown objectValue type in " + JSON.stringify(v));
        }
      } else {
        return expectString ? v.ldterm.value : v.ldterm;
      }
    }

    function tripleExpr (v) {
      // tripleExpr = EachOf | OneOf | TripleConstraint | Inclusion ;
      const elts = { "EachOf"   : { nary: true , expr: true , prop: "expressions" },
                   "OneOf"    : { nary: true , expr: true , prop: "expressions" },
                   "Inclusion": { nary: false, expr: false, prop: "include"     } };
      const ret = findType(v, elts, tripleExpr);
      if (ret !== Missed) {
        minMaxAnnotSemActs(v, ret);
        return ret;
      }

      const t = v[RDF.type][0].ldterm;
      if (t === SX.TripleConstraint) {
        const ret = {
          type: "TripleConstraint",
          predicate: v[SX.predicate][0].ldterm
        };
        ["inverse"].forEach(a => {
          if (SX[a] in v)
            ret[a] = !!v[SX[a]][0].ldterm.value;
        });
        if (SX.valueExpr in v)
          ret.valueExpr = extend({id: v[SX.valueExpr][0].ldterm}, "nested" in v[SX.valueExpr][0] ? shapeDeclOrExpr(v[SX.valueExpr][0].nested) : {});
        minMaxAnnotSemActs(v, ret);
        return ret;
      } else {
        throw Error("unknown tripleExpr type in " + JSON.stringify(v));
      }
    }
    function minMaxAnnotSemActs (v, ret) {
      if (SX.min in v)
        ret.min = parseInt(v[SX.min][0].ldterm.value);
      if (SX.max in v) {
        ret.max = parseInt(v[SX.max][0].ldterm.value);
        if (isNaN(ret.max))
          ret.max = UNBOUNDED;
      }
      if (SX.annotation in v)
        ret.annotations = v[SX.annotation].map(e => {
          return {
            type: "Annotation",
            predicate: e.nested[SX.predicate][0].ldterm,
            object: e.nested[SX.object][0].ldterm
          };
        });
      if (SX.semActs in v)
        ret.semActs = v[SX.semActs].map(e => {
          const ret = {
            type: "SemAct",
            name: e.nested[SX.name][0].ldterm
          };
          if (SX.code in e.nested)
            ret.code = e.nested[SX.code][0].ldterm.value;
          return ret;
        });
      return ret;
    }
  },
  simpleToShapeMap: function (x) {
    return Object.keys(x).reduce((ret, k) => {
      x[k].forEach(s => {
        ret.push({node: k, shape: s });
      });
      return ret;
    }, []);
  },

  absolutizeShapeMap: function (parsed, base) {
    return parsed.map(elt => {
      return Object.assign(elt, {
        node: ShExTerm.resolveRelativeIRI(base, elt.node),
        shape: ShExTerm.resolveRelativeIRI(base, elt.shape)
      });
    });
  },

  errsToSimple: function (val) {
    const _ShExUtil = this;
    if (Array.isArray(val)) {
      return val.reduce((ret, e) => {
        const nested = _ShExUtil.errsToSimple(e).map(s => "  " + s);
        return ret.length ? ret.concat(["AND"]).concat(nested) : nested;
      }, []);
    }
    if (typeof val === "string")
      return [val];

    switch (val.type) {
    case "FailureList":
      return val.errors.reduce((ret, e) => {
        return ret.concat(_ShExUtil.errsToSimple(e));
      }, []);
    case "Failure":
      return ["validating " + val.node + " as " + val.shape + ":"].concat(errorList(val.errors).reduce((ret, e) => {
        const nested = _ShExUtil.errsToSimple(e).map(s => "  " + s);
        return ret.length > 0 ? ret.concat(["  OR"]).concat(nested) : nested.map(s => "  " + s);
      }, []));
    case "TypeMismatch": {
      const nested = Array.isArray(val.errors) ?
          val.errors.reduce((ret, e) => {
            return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(s => "  " + s));
          }, []) :
          "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
      return ["validating " + n3ify(val.triple.object) + ":"].concat(nested);
    }
    case "RestrictionError": {
      const nested = val.errors.constructor === Array ?
          val.errors.reduce((ret, e) => {
            return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(s => "  " + s));
          }, []) :
          "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
      return ["validating restrictions on " + n3ify(val.focus) + ":"].concat(nested);
    }
    case "ShapeAndFailure":
      return Array.isArray(val.errors) ?
          val.errors.reduce((ret, e) => {
            return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(s => "  " + s));
          }, []) :
          "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
    case "ShapeOrFailure":
      return Array.isArray(val.errors) ?
          val.errors.reduce((ret, e) => {
            return ret.concat(" OR " + (typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)));
          }, []) :
          " OR " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
    case "ShapeNotFailure":
      return ["Node " + val.errors.node + " expected to NOT pass " + val.errors.shape];
    case "ExcessTripleViolation":
      return ["validating " + n3ify(val.triple.object) + ": exceeds cardinality"];
    case "ClosedShapeViolation":
      return ["Unexpected triple(s): {"].concat(
        val.unexpectedTriples.map(t => {
          return "  " + t.subject + " " + t.predicate + " " + n3ify(t.object) + " ."
        })
      ).concat(["}"]);
    case "NodeConstraintViolation":
      const w = __webpack_require__(451)();
      w._write(w._writeNodeConstraint(val.shapeExpr).join(""));
      let txt;
      w.end((err, res) => {
        txt = res;
      });
      return ["NodeConstraintError: expected to match " + txt];
    case "MissingProperty":
      return ["Missing property: " + val.property];
    case "NegatedProperty":
      return ["Unexpected property: " + val.property];
    case "AbstractShapeFailure":
      return ["Abstract Shape: " + val.shape];
    case "SemActFailure": {
      const nested = Array.isArray(val.errors) ?
          val.errors.reduce((ret, e) => {
            return ret.concat((typeof e === "string" ? [e] : _ShExUtil.errsToSimple(e)).map(s => "  " + s));
          }, []) :
          "  " + (typeof e === "string" ? [val.errors] : _ShExUtil.errsToSimple(val.errors));
      return ["rejected by semantic action:"].concat(nested);
    }
    case "SemActViolation":
      return [val.message];
    case "BooleanSemActFailure":
      return ["Failed evaluating " + val.code + " on context " + JSON.stringify(val.ctx)];
    default:
      debugger; // console.log(val);
      throw Error("unknown shapeExpression type \"" + val.type + "\" in " + JSON.stringify(val));
    }
    function errorList (errors) {
      return errors.reduce(function (acc, e) {
        const attrs = Object.keys(e);
        return acc.concat(
          (attrs.length === 1 && attrs[0] === "errors")
            ? errorList(e.errors)
            : e);
      }, []);
    }
  },

  resolveRelativeIRI: ShExTerm.resolveRelativeIRI,

  resolvePrefixedIRI: function (prefixedIri, prefixes) {
    const colon = prefixedIri.indexOf(":");
    if (colon === -1)
      return null;
    const prefix = prefixes[prefixedIri.substr(0, colon)];
    return prefix === undefined ? null : prefix + prefixedIri.substr(colon+1);
  },

  parsePassedNode: function (passedValue, meta, deflt, known, reportUnknown) {
    if (passedValue === undefined || passedValue.length === 0)
      return known && known(meta.base) ? meta.base : deflt ? deflt() : this.NotSupplied;
    if (passedValue[0] === "_" && passedValue[1] === ":")
      return passedValue;
    if (passedValue[0] === "\"") {
      const m = passedValue.match(/^"((?:[^"\\]|\\")*)"(?:@(.+)|\^\^(?:<(.*)>|([^:]*):(.*)))?$/);
      if (!m)
        throw Error("malformed literal: " + passedValue);
      const lex = m[1], lang = m[2], rel = m[3], pre = m[4], local = m[5];
      // Turn the literal into an N3.js atom.
      const quoted = "\""+lex+"\"";
      if (lang !== undefined)
        return quoted + "@" + lang;
      if (pre !== undefined) {
        if (!(pre in meta.prefixes))
          throw Error("error parsing node "+passedValue+" no prefix for \"" + pre + "\"");
        return quoted + "^^" + meta.prefixes[pre] + local;
      }
      if (rel !== undefined)
        return quoted + "^^" + ShExTerm.resolveRelativeIRI(meta.base, rel);
      return quoted;
    }
    if (!meta)
      return known(passedValue) ? passedValue : this.UnknownIRI;
    const relIRI = passedValue[0] === "<" && passedValue[passedValue.length-1] === ">";
    if (relIRI)
      passedValue = passedValue.substr(1, passedValue.length-2);
    const t = ShExTerm.resolveRelativeIRI(meta.base || "", passedValue); // fall back to base-less mode
    if (known(t))
      return t;
    if (!relIRI) {
      const t2 = this.resolvePrefixedIRI(passedValue, meta.prefixes);
      if (t2 !== null && known(t2))
        return t2;
    }
    return reportUnknown ? reportUnknown(t) : this.UnknownIRI;
  },

  executeQueryPromise: function (query, endpoint) {
    let rows;

    const queryURL = endpoint + "?query=" + encodeURIComponent(query);
    return fetch(queryURL, {
      headers: {
        'Accept': 'application/sparql-results+json'
      }}).then(resp => resp.json()).then(jsonObject => {
        return this.parseSparqlJsonResults(jsonObject);
      })// .then(x => new Promise(resolve => setTimeout(() => resolve(x), 1000)));
  },

  executeQuery: function (query, endpoint) {
    let rows;
    const queryURL = endpoint + "?query=" + encodeURIComponent(query);
    const xhr = new XMLHttpRequest();
    xhr.open("GET", queryURL, false);
    xhr.setRequestHeader('Accept', 'application/sparql-results+json');
    xhr.send();
    // const selectsBlock = query.match(/SELECT\s*(.*?)\s*{/)[1];
    // const selects = selectsBlock.match(/\?[^\s?]+/g);
    const jsonObject = JSON.parse(xhr.responseText);
    return this.parseSparqlJsonResults(jsonObject);
  },

  parseSparqlJsonResults: function (jsonObject) {
    const selects = jsonObject.head.vars;
    return jsonObject.results.bindings.map(row => {
      // spec: https://www.w3.org/TR/rdf-sparql-json-res/#variable-binding-results
      return selects.map(sel => {
        const elt = row[sel];
        switch (elt.type) {
        case "uri": return elt.value;
        case "bnode": return "_:" + elt.value;
        case "literal":
          return "\"" + elt.value.replace(/"/g, '\\""') + "\""
            + ("xml:lang" in elt ? "@" + elt["xml:lang"] : "")
            + ("datatype" in elt ? "^^" + elt.datatype : "");
        case "typed-literal": // encountered in wikidata query service
          return "\"" + elt.value.replace(/"/g, '\\""') + "\""
            + ("^^" + elt.datatype);
        default: throw "unknown XML results type: " + elt.type;
        }
      })
    });
  },

/* TO ADD? XML results format parsed with jquery:
  // parse..._dom(new window.DOMParser().parseFromString(str, "text/xml"));

  parseSparqlXmlResults_dom: function (doc) {
    Array.from(X.querySelectorAll('sparql > results > result')).map(row => {
      Array.from(row.querySelectorAll("binding")).map(elt => {
        const typed = Array.from(elt.children)[0];
        const text = typed.textContent;

        switch (elt.tagName) {
        case "uri": return text;
        case "bnode": return "_:" + text;
        case "literal":
          const datatype = typed.getAttribute("datatype");
          const lang = typed.getAttribute("xml:lang");
          return "\"" + text + "\"" + (
            datatype ? "^^" + datatype :
            lang ? "@" + lang :
              "");
        default: throw "unknown XML results type: " + elt.tagName;
        }
      })
    })
  },

  parseSparqlXmlResults_jquery: function (jqObj) {
    $(jqObj).find("sparql > results > result").
      each((_, row) => {
        rows.push($(row).find("binding > *:nth-child(1)").
          map((idx, elt) => {
            elt = $(elt);
            const text = elt.text();

            switch (elt.prop("tagName")) {
            case "uri": return text;
            case "bnode": return "_:" + text;
            case "literal":
              const datatype = elt.attr("datatype");
              const lang = elt.attr("xml:lang");
              return "\"" + text + "\"" + (
                datatype ? "^^" + datatype :
                lang ? "@" + lang :
                  "");
            default: throw "unknown XML results type: " + elt.prop("tagName");
            }
          }).get());
      });
  }
*/

  NotSupplied: "-- not supplied --", UnknownIRI: "-- not found --",

  /**
   * unescape numerics and allowed single-character escapes.
   * throws: if there are any unallowed sequences
   */
  unescapeText: function (string, replacements) {
    const regex = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g;
    try {
      string = string.replace(regex, function (sequence, unicode4, unicode8, escapedChar) {
        let charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return String.fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return String.fromCharCode(charCode);
          return String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          const replacement = replacements[escapedChar];
          if (!replacement) throw new Error("no replacement found for '" + escapedChar + "'");
          return replacement;
        }
      });
      return string;
    }
    catch (error) { console.warn(error); return ''; }
  },

};

function n3ify (ldterm) {
  if (typeof ldterm !== "object")
    return ldterm;
  const ret = "\"" + ldterm.value + "\"";
  if ("language" in ldterm)
    return ret + "@" + ldterm.language;
  if ("type" in ldterm)
    return ret + "^^" + ldterm.type;
  return ret;
}

// Add the ShExUtil functions to the given object or its prototype
function AddShExUtil(parent, toPrototype) {
  for (let name in ShExUtil)
    if (!toPrototype)
      parent[name] = ShExUtil[name];
    else
      parent.prototype[name] = ApplyToThis(ShExUtil[name]);

  return parent;
}

// Returns a function that applies `f` to the `this` object
function ApplyToThis(f) {
  return function (a) { return f(this, a); };
}

return AddShExUtil(AddShExUtil);
})();

if (true)
  module.exports = ShExUtilCjsModule; // node environment


/***/ }),

/***/ 355:
/***/ ((module) => {


function ShExVisitor (...ctor_args) {
  this.ctor_args = ctor_args;

    function isTerm (t) {
      return typeof t !== "object" || "value" in t && Object.keys(t).reduce((r, k) => {
        return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
      }, true);
    }

  function isShapeRef (expr) {
    return typeof expr === "string" // test for JSON-LD @ID
  }
  let isInclusion = isShapeRef;

  // function expect (l, r) { const ls = JSON.stringify(l), rs = JSON.stringify(r); if (ls !== rs) throw Error(ls+" !== "+rs); }
  const _ShExUtil = this;
  function visitMap (map, val) {
    const ret = {};
    Object.keys(map).forEach(function (item) {
      ret[item] = val(map[item]);
    });
    return ret;
  }
  const r = {
    runtimeError: function (e) {
      throw e;
    },

    visitSchema: function (schema, ...args) {
      const ret = { type: "Schema" };
      this._expect(schema, "type", "Schema");
      this._maybeSet(schema, ret, "Schema",
                     ["@context", "prefixes", "base", "imports", "startActs", "start", "shapes"],
                     ["_base", "_prefixes", "_index", "_sourceMap"],
                     ...args
                    );
      return ret;
    },

    visitPrefixes: function (prefixes, ...args) {
      return prefixes === undefined ?
        undefined :
        visitMap(prefixes, function (val) {
          return val;
        });
    },

    visitIRI: function (i, ...args) {
      return i;
    },

    visitImports: function (imports, ...args) {
      const _Visitor = this;
      return imports.map(function (imp) {
        return _Visitor.visitIRI(imp, args);
      });
    },

    visitStartActs: function (startActs, ...args) {
      const _Visitor = this;
      return startActs === undefined ?
        undefined :
        startActs.map(function (act) {
          return _Visitor.visitSemAct(act, ...args);
        });
    },
    visitSemActs: function (semActs, ...args) {
      const _Visitor = this;
      if (semActs === undefined)
        return undefined;
      const ret = []
      Object.keys(semActs).forEach(function (label) {
        ret.push(_Visitor.visitSemAct(semActs[label], label, ...args));
      });
      return ret;
    },
    visitSemAct: function (semAct, label, ...args) {
      const ret = { type: "SemAct" };
      this._expect(semAct, "type", "SemAct");

      this._maybeSet(semAct, ret, "SemAct",
                     ["name", "code"], null, ...args);
      return ret;
    },

    visitShapes: function (shapes, ...args) {
      const _Visitor = this;
      if (shapes === undefined)
        return undefined;
      return shapes.map(
        shapeExpr =>
          _Visitor.visitShapeDecl(shapeExpr, ...args)
      );
    },

    visitShapeDecl: function (decl, ...args) {
      return this._maybeSet(decl, { type: "ShapeDecl" }, "ShapeDecl",
                            ["id", "abstract", "restricts", "shapeExpr"], null, ...args);
    },

    visitShapeExpr: function (expr, ...args) {
      if (isShapeRef(expr))
        return this.visitShapeRef(expr, ...args)
      switch (expr.type) {
      case "Shape": return this.visitShape(expr, ...args);
      case "NodeConstraint": return this.visitNodeConstraint(expr, ...args);
      case "ShapeAnd": return this.visitShapeAnd(expr, ...args);
      case "ShapeOr": return this.visitShapeOr(expr, ...args);
      case "ShapeNot": return this.visitShapeNot(expr, ...args);
      case "ShapeExternal": return this.visitShapeExternal(expr, ...args);
      default:
        throw Error("unexpected shapeExpr type: " + expr.type);
      }
    },

    visitValueExpr: function (expr, ...args) {
      return this.visitShapeExpr(expr, ...args); // call potentially overloaded visitShapeExpr
    },

    // _visitShapeGroup: visit a grouping expression (shapeAnd, shapeOr)
    _visitShapeGroup: function (expr, ...args) {
      this._testUnknownAttributes(expr, ["shapeExprs"], expr.type, this.visitShapeNot)
      const _Visitor = this;
      const r = { type: expr.type };
      if ("id" in expr)
        r.id = expr.id;
      r.shapeExprs = expr.shapeExprs.map(function (nested) {
        return _Visitor.visitShapeExpr(nested, ...args);
      });
      return r;
    },

    // _visitShapeNot: visit negated shape
    visitShapeNot: function (expr, ...args) {
      this._testUnknownAttributes(expr, ["shapeExpr"], "ShapeNot", this.visitShapeNot)
      const r = { type: expr.type };
      if ("id" in expr)
        r.id = expr.id;
      r.shapeExpr = this.visitShapeExpr(expr.shapeExpr, ...args);
      return r;
    },

    // ### `visitNodeConstraint` deep-copies the structure of a shape
    visitShape: function (shape, ...args) {
      const ret = { type: "Shape" };
      this._expect(shape, "type", "Shape");

      this._maybeSet(shape, ret, "Shape",
                     [ "abstract", "extends",
                       "closed",
                       "expression", "extra", "semActs", "annotations"], null, ...args);
      return ret;
    },

    _visitShapeExprList: function (ext, ...args) {
      const _Visitor = this;
      return ext.map(function (t) {
        return _Visitor.visitShapeExpr(t, ...args);
      });
    },

    // ### `visitNodeConstraint` deep-copies the structure of a shape
    visitNodeConstraint: function (shape, ...args) {
      const ret = { type: "NodeConstraint" };
      this._expect(shape, "type", "NodeConstraint");

      this._maybeSet(shape, ret, "NodeConstraint",
                     [ "nodeKind", "datatype", "pattern", "flags", "length",
                       "reference", "minlength", "maxlength",
                       "mininclusive", "minexclusive", "maxinclusive", "maxexclusive",
                       "totaldigits", "fractiondigits", "values", "annotations", "semActs"], null, ...args);
      return ret;
    },

    visitShapeRef: function (reference, ...args) {
      if (typeof reference !== "string") {
        let ex = Exception("visitShapeRef expected a string, not " + JSON.stringify(reference));
        console.warn(ex);
        throw ex;
      }
      return reference;
    },

    visitShapeExternal: function (expr, ...args) {
      this._testUnknownAttributes(expr, ["id"], "ShapeExternal", this.visitShapeNot)
      return Object.assign("id" in expr ? { id: expr.id } : {}, { type: "ShapeExternal" });
    },

    // _visitGroup: visit a grouping expression (someOf or eachOf)
    _visitGroup: function (expr, type, ...args) {
      const _Visitor = this;
      const r = Object.assign(
        // pre-declare an id so it sorts to the top
        "id" in expr ? { id: null } : { },
        { type: expr.type }
      );
      r.expressions = expr.expressions.map(function (nested) {
        return _Visitor.visitExpression(nested, ...args);
      });
      return this._maybeSet(expr, r, "expr",
                            ["id", "min", "max", "annotations", "semActs"], ["expressions"], ...args);
    },

    visitTripleConstraint: function (expr, ...args) {
      return this._maybeSet(expr,
                            Object.assign(
                              // pre-declare an id so it sorts to the top
                              "id" in expr ? { id: null } : { },
                              { type: "TripleConstraint" }
                            ),
                            "TripleConstraint",
                            ["id", "inverse", "predicate", "valueExpr",
                             "min", "max", "annotations", "semActs"], null, ...args)
    },

    visitTripleExpr: function (expr, ...args) {
      if (typeof expr === "string")
        return this.visitInclusion(expr);
      switch (expr.type) {
      case "TripleConstraint": return this.visitTripleConstraint(expr, ...args);
      case "OneOf": return this.visitOneOf(expr, ...args);
      case "EachOf": return this.visitEachOf(expr, ...args);
      default:
        throw Error("unexpected expression type: " + expr.type);
      }
    },

    visitExpression: function (expr, ...args) {
      return this.visitTripleExpr(expr, ...args); // call potentially overloaded visitTripleExpr
    },

    visitValues: function (values, ...args) {
      const _Visitor = this;
      return values.map(function (t) {
        return isTerm(t) || t.type === "Language" ?
          t :
          _Visitor.visitStemRange(t, ...args);
      });
    },

    visitStemRange: function (t, ...args) {
      const _Visitor = this; // console.log(Error(t.type).stack);
      // this._expect(t, "type", "IriStemRange");
      if (!("type" in t))
        _Visitor.runtimeError(Error("expected "+JSON.stringify(t)+" to have a 'type' attribute."));
      const stemRangeTypes = ["IriStem", "LiteralStem", "LanguageStem", "IriStemRange", "LiteralStemRange", "LanguageStemRange"];
      if (stemRangeTypes.indexOf(t.type) === -1)
        _Visitor.runtimeError(Error("expected type attribute '"+t.type+"' to be in '"+stemRangeTypes+"'."));
      let stem;
      if (isTerm(t)) {
        this._expect(t.stem, "type", "Wildcard");
        stem = { type: t.type, stem: { type: "Wildcard" } };
      } else {
        stem = { type: t.type, stem: t.stem };
      }
      if (t.exclusions) {
        stem.exclusions = t.exclusions.map(function (c) {
          return _Visitor.visitExclusion(c, ...args);
        });
      }
      return stem;
    },

    visitExclusion: function (c, ...args) {
      if (!isTerm(c)) {
        // this._expect(c, "type", "IriStem");
        if (!("type" in c))
          _Visitor.runtimeError(Error("expected "+JSON.stringify(c)+" to have a 'type' attribute."));
        const stemTypes = ["IriStem", "LiteralStem", "LanguageStem"];
        if (stemTypes.indexOf(c.type) === -1)
          _Visitor.runtimeError(Error("expected type attribute '"+c.type+"' to be in '"+stemTypes+"'."));
        return { type: c.type, stem: c.stem };
      } else {
        return c;
      }
    },

    visitInclusion: function (inclusion, ...args) {
      if (typeof inclusion !== "string") {
        let ex = Exception("visitInclusion expected a string, not " + JSON.stringify(inclusion));
        console.warn(ex);
        throw ex;
      }
      return inclusion;
    },

    _maybeSet: function (obj, ret, context, members, ignore, ...args) {
      const _Visitor = this;
      this._testUnknownAttributes(obj, ignore ? members.concat(ignore) : members, context, this._maybeSet)
      members.forEach(function (member) {
        const methodName = "visit" + member.charAt(0).toUpperCase() + member.slice(1);
        if (member in obj) {
          const f = _Visitor[methodName];
          if (typeof f !== "function") {
            throw Error(methodName + " not found in Visitor");
          }
          const t = f.call(_Visitor, obj[member], ...args);
          if (t !== undefined) {
            ret[member] = t;
          }
        }
      });
      return ret;
    },
    _visitValue: function (v, ...args) {
      return v;
    },
    _visitList: function (l, ...args) {
      return l.slice();
    },
    _testUnknownAttributes: function (obj, expected, context, captureFrame) {
      const unknownMembers = Object.keys(obj).reduce(function (ret, k) {
        return k !== "type" && expected.indexOf(k) === -1 ? ret.concat(k) : ret;
      }, []);
      if (unknownMembers.length > 0) {
        const e = Error("unknown propert" + (unknownMembers.length > 1 ? "ies" : "y") + ": " +
                      unknownMembers.map(function (p) {
                        return "\"" + p + "\"";
                      }).join(",") +
                      " in " + context + ": " + JSON.stringify(obj));
        Error.captureStackTrace(e, captureFrame);
        throw e;
      }
    },
    _expect: function (o, p, v) {
      if (!(p in o))
        this.runtimeError(Error("expected "+JSON.stringify(o)+" to have a ."+p));
      if (arguments.length > 2 && o[p] !== v)
        this.runtimeError(Error("expected "+o[p]+" to equal "+v));
    },
  };

  r.visitBase = r.visitStart = r.visitClosed = r["visit@context"] = r._visitValue;
  r.visitRestricts = r.visitExtends = r._visitShapeExprList;
  r.visitExtra = r.visitAnnotations = r._visitList;
  r.visitAbstract = r.visitInverse = r.visitPredicate = r._visitValue;
  r.visitName = r.visitId = r.visitCode = r.visitMin = r.visitMax = r._visitValue;

  r.visitType = r.visitNodeKind = r.visitDatatype = r.visitPattern = r.visitFlags = r.visitLength = r.visitMinlength = r.visitMaxlength = r.visitMininclusive = r.visitMinexclusive = r.visitMaxinclusive = r.visitMaxexclusive = r.visitTotaldigits = r.visitFractiondigits = r._visitValue;
  r.visitOneOf = r.visitEachOf = r._visitGroup;
  r.visitShapeAnd = r.visitShapeOr = r._visitShapeGroup;
  r.visitInclude = r._visitValue;
  return r;

  // Expect property p with value v in object o
}

// The ShEx Vistor is here to minimize deps for ShExValidator.
/** create indexes for schema
 */
ShExVisitor.index = function (schema) {
  let index = {
    shapeExprs: {},
    tripleExprs: {}
  };
  let v = ShExVisitor();

  let oldVisitExpression = v.visitTripleExpr;
  v.visitTripleExpr = function (expression, ...args) {
    if (typeof expression === "object" && "id" in expression)
      index.tripleExprs[expression.id] = expression;
    return oldVisitExpression.call(v, expression, ...args);
  };

  let oldVisitShapeDecl = v.visitShapeDecl;
  v.visitShapeDecl = function (shapeExpr, ...args) {
    if (typeof shapeExpr === "object" && "id" in shapeExpr)
      index.shapeExprs[shapeExpr.id] = shapeExpr;
    return oldVisitShapeDecl.call(v, shapeExpr, ...args);
  };

  v.visitSchema(schema);
  return index;
}

if (true)
  module.exports = ShExVisitor;



/***/ }),

/***/ 451:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// **ShExWriter** writes ShEx documents.

const ShExWriterCjsModule = (function () {
const RelateUrl = __webpack_require__(961);
const UNBOUNDED = -1;

// Matches a literal as represented in memory by the ShEx library
const ShExLiteralMatcher = /^"([^]*)"(?:\^\^(.+)|@([\-a-z]+))?$/i;

// rdf:type predicate (for 'a' abbreviation)
const RDF_PREFIX = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
    RDF_TYPE   = RDF_PREFIX + 'type';

// Characters in literals that require escaping
const ESCAPE_1 = /["\\\t\n\r\b\f\u0000-\u0019\ud800-\udbff]/,
    ESCAPE_g = /["\\\t\n\r\b\f\u0000-\u0019]|[\ud800-\udbff][\udc00-\udfff]/g,
    ESCAPE_replacements = { '\\': '\\\\', '"': '\\"', '/': '\\/', '\t': '\\t',
                            '\n': '\\n', '\r': '\\r', '\b': '\\b', '\f': '\\f' };

const nodeKinds = {
  'iri': "IRI",
  'bnode': "BNODE",
  'literal': "LITERAL",
  'nonliteral': "NONLITERAL"
};
const nonLitNodeKinds = {
  'iri': "IRI",
  'bnode': "BNODE",
  'literal': "LITERAL",
  'nonliteral': "NONLITERAL"
};

// ## Constructor
function ShExWriter (outputStream, options) {
  if (!(this instanceof ShExWriter))
    return new ShExWriter(outputStream, options);

  // Shift arguments if the first argument is not a stream
  if (outputStream && typeof outputStream.write !== 'function')
    options = outputStream, outputStream = null;
  options = options || {};

  // If no output stream given, send the output as string through the end callback
  if (!outputStream) {
    let output = '';
    this._outputStream = {
      write: function (chunk, encoding, done) { output += chunk; done && done(); },
      end:   function (done) { done && done(null, output); },
    };
    this._endStream = true;
  }
  else {
    this._outputStream = outputStream;
    this._endStream = options.end === undefined ? true : !!options.end;
  }

  // Initialize writer, depending on the format
  this._prefixIRIs = Object.create(null);
  this._baseIRI = options.base || null;
  options.prefixes && this.addPrefixes(options.prefixes);

  this._error = options.error || _throwError;
  this.forceParens = !options.simplifyParentheses; // default to false
  this._expect = options.lax ? noop : expect;
}

ShExWriter.prototype = {
  // ## Private methods

  // ### `_write` writes the argument to the output stream
  _write: function (string, callback) {
    this._outputStream.write(string, 'utf8', callback);
  },

  // ### `_writeSchema` writes the shape to the output stream
  _writeSchema: function (schema, done) {
    const _ShExWriter = this;
    this._expect(schema, "type", "Schema");
    _ShExWriter.addPrefixes(schema._prefixes);
    if (schema._base)
      _ShExWriter._baseIRI = schema._base;

    if (_ShExWriter._baseIRI)
      _ShExWriter._write("BASE <" + _ShExWriter._baseIRI + ">\n"); // don't use _encodeIriOrBlankNode()

    if (schema.imports)
      schema.imports.forEach(function (imp) {
        _ShExWriter._write("IMPORT " + _ShExWriter._encodeIriOrBlankNode(imp) + "\n");
      });
    if (schema.startActs)
      schema.startActs.forEach(function (act) {
        _ShExWriter._expect(act, "type", "SemAct");
        _ShExWriter._write(" %"+
                           _ShExWriter._encodePredicate(act.name)+
                           ("code" in act ? "{"+escapeCode(act.code)+"%"+"}" : "%"));
      });
    if (schema.start)
      _ShExWriter._write("start = " + _ShExWriter._writeShapeExpr(schema.start, done, true, 0).join('') + "\n")
    if ("shapes" in schema)
      schema.shapes.forEach(function (shapeDecl) {
        _ShExWriter._write(
          _ShExWriter._writeShapeDecl(shapeDecl, done, true, 0).join("")+"\n",
          done
        );
      })
  },

  _writeShapeDecl: function (shapeDecl, done, forceBraces, parentPrec) {
    const _ShExWriter = this;
    const pieces = [];
    if (shapeDecl.abstract)
      pieces.push("ABSTRACT ");
    pieces.push(_ShExWriter._encodeShapeName(shapeDecl.id, false), " ");
    return pieces.concat(_ShExWriter._writeShapeExpr(shapeDecl.shapeExpr, done, true, 0));
  },

  _writeShapeExpr: function (shapeExpr, done, forceBraces, parentPrec) {
    const _ShExWriter = this;
    const pieces = [];
    if (typeof shapeExpr === "string") // ShapeRef
      pieces.push("@", _ShExWriter._encodeShapeName(shapeExpr));
    // !!! []s for precedence!
    else if (shapeExpr.type === "ShapeExternal")
      pieces.push("EXTERNAL");
    else if (shapeExpr.type === "ShapeAnd") {
      if (parentPrec >= 3)
        pieces.push("(");
      let lastAndElided = false;
      shapeExpr.shapeExprs.forEach(function (expr, ord) {
        if (ord > 0) { // && !!! grammar rules too weird here
          /*
            shapeAtom:
                  nonLitNodeConstraint shapeOrRef?
                | shapeDecl nonLitNodeConstraint?

            nonLitInlineNodeConstraint:
                  nonLiteralKind stringFacet*
          */
          function nonLitNodeConstraint (idx) {
            let c = shapeExpr.shapeExprs[idx];
            return c.type !== "NodeConstraint"
              || ("nodeKind" in c && c.nodeKind === "literal")
              || "datatype" in c
              || "values" in c
              ? false
              : true;
          }

          function shapeOrRef (idx) {
            let c = shapeExpr.shapeExprs[idx];
            return c.type === "Shape" || c.type === "ShapeRef";
          }

          function shapeDecl (idx) {
            let c = shapeExpr.shapeExprs[idx];
            return c.type === "Shape";
          }

          let elideAnd = !lastAndElided
              && (nonLitNodeConstraint(ord-1) && shapeOrRef(ord)
                  || shapeDecl(ord-1) && nonLitNodeConstraint(ord))
          if (!elideAnd || true) { // !! temporary work-around for ShExC parser bug
            pieces.push(" AND ");
          }
          lastAndElided = elideAnd;
        }
        [].push.apply(pieces, _ShExWriter._writeShapeExpr(expr, done, false, 3));
      });
      if (parentPrec >= 3)
        pieces.push(")");
    } else if (shapeExpr.type === "ShapeOr") {
      if (parentPrec >= 2)
        pieces.push("(");
      shapeExpr.shapeExprs.forEach(function (expr, ord) {
        if (ord > 0)
          pieces.push(" OR ");
        [].push.apply(pieces, _ShExWriter._writeShapeExpr(expr, done, forceBraces, 2));
      });
      if (parentPrec >= 2)
        pieces.push(")");
    } else if (shapeExpr.type === "ShapeNot") {
      if (parentPrec >= 4)
        pieces.push("(");
      pieces.push("NOT ");
      [].push.apply(pieces, _ShExWriter._writeShapeExpr(shapeExpr.shapeExpr, done, forceBraces, 4));
      if (parentPrec >= 4)
        pieces.push(")");
    } else if (shapeExpr.type === "Shape") {
      [].push.apply(pieces, _ShExWriter._writeShape(shapeExpr, done, forceBraces));
    } else if (shapeExpr.type === "NodeConstraint") {
      [].push.apply(pieces, _ShExWriter._writeNodeConstraint(shapeExpr, done, forceBraces));
    } else
      throw Error("expected Shape{,And,Or,Ref} or NodeConstraint in " + JSON.stringify(shapeExpr));
    return pieces;
  },

  // ### `_writeShape` writes the shape to the output stream
  _writeShape: function (shape, done, forceBraces) {
    const _ShExWriter = this;
    try {
      const pieces = []; // guessing push/join is faster than concat
      this._expect(shape, "type", "Shape");

      if (shape.closed) pieces.push("CLOSED ");

      [{keyword: "extends", marker: "EXTENDS "}].forEach(pair => {
         // pieces = pieces.concat(_ShExWriter._writeShapeExpr(expr.valueExpr, done, true, 0));
         if (shape[pair.keyword] && shape[pair.keyword].length > 0) {
           shape[pair.keyword].forEach(function (i, ord) {
             if (ord)
               pieces.push(" ")
             pieces.push(pair.marker);
             [].push.apply(pieces, _ShExWriter._writeShapeExpr(i, done, true, 0));
           });
           pieces.push(" ");
         }
       });

      if (shape.extra && shape.extra.length > 0) {
        pieces.push("EXTRA ");
        shape.extra.forEach(function (i, ord) {
          pieces.push(_ShExWriter._encodeShapeName(i, false)+" ");
        });
        pieces.push(" ");
      }
      const empties = ["values", "length", "minlength", "maxlength", "pattern", "flags"];
      pieces.push("{\n");

      function _writeShapeActions (semActs) {
        if (!semActs)
          return;

        semActs.forEach(function (act) {
          _ShExWriter._expect(act, "type", "SemAct");
          pieces.push(" %",
                      _ShExWriter._encodePredicate(act.name),
                      ("code" in act ? "{"+escapeCode(act.code)+"%"+"}" : "%"));
        });
      }

      function _writeCardinality (min, max) {
        if      (min === 0 && max === 1)         pieces.push("?");
        else if (min === 0 && max === UNBOUNDED) pieces.push("*");
        else if (min === undefined && max === undefined)                         ;
        else if (min === 1 && max === UNBOUNDED) pieces.push("+");
        else
          pieces.push("{", min, ",", (max === UNBOUNDED ? "*" : max), "}"); // by coincidence, both use the same character.
      }

      function _writeExpression (expr, indent, parentPrecedence) {
        function _writeExpressionActions (semActs) {
          if (semActs) {

            semActs.forEach(function (act) {
              _ShExWriter._expect(act, "type", "SemAct");
              pieces.push("\n"+indent+"   %");
              pieces.push(_ShExWriter._encodeValue(act.name));
              if ("code" in act)
                pieces.push("{"+escapeCode(act.code)+"%"+"}");
              else
                pieces.push("%");
            });
          }
        }

        function _exprGroup (exprs, separator, precedence, forceParens) {
          const needsParens = precedence < parentPrecedence || forceParens;
          if (needsParens) {
            pieces.push("(");
          }
          exprs.forEach(function (nested, ord) {
            _writeExpression(nested, indent+"  ", precedence)
            if (ord < exprs.length - 1)
              pieces.push(separator);
          });
          if (needsParens) {
            pieces.push(")");
          }
        }

        if (typeof expr === "string") {
          pieces.push("&");
          pieces.push(_ShExWriter._encodeShapeName(expr, false));
        } else {

        if ("id" in expr) {
          pieces.push("$");
          pieces.push(_ShExWriter._encodeIriOrBlankNode(expr.id, true));
        }

        if (expr.type === "TripleConstraint") {
          if (expr.inverse)
            pieces.push("^");
          if (expr.negated)
            pieces.push("!");
          pieces.push(indent,
                      _ShExWriter._encodePredicate(expr.predicate),
                      " ");

          if ("valueExpr" in expr)
            [].push.apply(pieces, _ShExWriter._writeShapeExpr(expr.valueExpr, done, true, 0));
          else
            pieces.push(". ");

          _writeCardinality(expr.min, expr.max);
          _ShExWriter._annotations(pieces, expr.annotations, indent);
          _writeExpressionActions(expr.semActs);
        }

        else if (expr.type === "OneOf") {
          const needsParens = "id" in expr || "min" in expr || "max" in expr || "annotations" in expr || "semActs" in expr;
          _exprGroup(expr.expressions, "\n"+indent+"| ", 1, needsParens || _ShExWriter.forceParens);
          _writeCardinality(expr.min, expr.max); // t: open1dotclosecardOpt
          _ShExWriter._annotations(pieces, expr.annotations, indent);
          _writeExpressionActions(expr.semActs);
        }

        else if (expr.type === "EachOf") {
          const needsParens = "id" in expr || "min" in expr || "max" in expr || "annotations" in expr || "semActs" in expr;
          _exprGroup(expr.expressions, ";\n"+indent, 2, needsParens || _ShExWriter.forceParens);
          _writeCardinality(expr.min, expr.max); // t: open1dotclosecardOpt
          _ShExWriter._annotations(pieces, expr.annotations, indent);
          _writeExpressionActions(expr.semActs);
        }

        else throw Error("unexpected expr type: " + expr.type);
        }
      }

      if (shape.expression) // t: 0, 0Extend1
        _writeExpression(shape.expression, "  ", 0);
      pieces.push("\n}");
      _writeShapeActions(shape.semActs);
      _ShExWriter._annotations(pieces, shape.annotations, "  ");

      return pieces;
    }
    catch (error) { done && done(error); }
  },

  // ### `_writeShape` writes the shape to the output stream
  _writeNodeConstraint: function (v, done) {
    const _ShExWriter = this;
    try {
      _ShExWriter._expect(v, "type", "NodeConstraint");

      const pieces = [];
      if (v.nodeKind in nodeKinds)       pieces.push(nodeKinds[v.nodeKind], " ");
      else if (v.nodeKind !== undefined) _ShExWriter._error("unexpected nodeKind: " + v.nodeKind); // !!!!

      this._fillNodeConstraint(pieces, v, done);
      this._annotations(pieces, v.annotations, "  ");
      return pieces;
    }
    catch (error) { done && done(error); }

  },

  _annotations: function (pieces, annotations, indent) {
    const _ShExWriter = this;
    if (annotations) {
      annotations.forEach(function (a) {
        _ShExWriter._expect(a, "type", "Annotation");
        pieces.push("//\n"+indent+"   ");
        pieces.push(_ShExWriter._encodeValue(a.predicate));
        pieces.push(" ");
        pieces.push(_ShExWriter._encodeValue(a.object));
      });
    }
  },

  _fillNodeConstraint: function (pieces, v, done) {
    const _ShExWriter = this;
    if (v.datatype  && v.values  ) _ShExWriter._error("found both datatype and values in "   +expr);
    if (v.datatype) {
      pieces.push(_ShExWriter._encodeShapeName(v.datatype));
    }

    if (v.values) {
      pieces.push("[");

      v.values.forEach(function (t, ord) {
        if (ord > 0)
          pieces.push(" ");

        if (!isTerm(t)) {
//          expect(t, "type", "IriStemRange");
              if (!("type" in t))
                runtimeError("expected "+JSON.stringify(t)+" to have a 'type' attribute.");
          const stemRangeTypes = ["Language", "IriStem", "LiteralStem", "LanguageStem", "IriStemRange", "LiteralStemRange", "LanguageStemRange"];
              if (stemRangeTypes.indexOf(t.type) === -1)
                runtimeError("expected type attribute '"+t.type+"' to be in '"+stemRangeTypes+"'.");
          if (t.type === "Language") {
            pieces.push("@" + t.languageTag);
          } else if (!isTerm(t.stem)) {
            expect(t.stem, "type", "Wildcard");
            pieces.push(".");
          } else {
            pieces.push(langOrLiteral(t, t.stem) + "~");
          }
          if (t.exclusions) {
            t.exclusions.forEach(function (c) {
              pieces.push(" - ");
              if (!isTerm(c)) {
//                expect(c, "type", "IriStem");
                    if (!("type" in c))
                      runtimeError("expected "+JSON.stringify(c)+" to have a 'type' attribute.");
                    const stemTypes = ["IriStem", "LiteralStem", "LanguageStem"];
                    if (stemTypes.indexOf(c.type) === -1)
                      runtimeError("expected type attribute '"+c.type+"' to be in '"+stemTypes+"'.");
                pieces.push(langOrLiteral(t, c.stem) + "~");
              } else {
                pieces.push(langOrLiteral(t, c));
              }
            });
          }
          function langOrLiteral (t, c) {
            return ["LanguageStem", "LanguageStemRange"].indexOf(t.type) !== -1 ? "@" + c :
              ["LiteralStem", "LiteralStemRange"].indexOf(t.type) !== -1 ? '"' + c.replace(ESCAPE_g, c) + '"' :
              _ShExWriter._encodeValue(c)
          }
        } else {
          pieces.push(_ShExWriter._encodeValue(t));
        }
      });

      pieces.push("]");
    }

    if ('pattern' in v) {
      const pattern = v.pattern.
          replace(/\//g, "\\/");
      // if (ESCAPE_1.test(pattern))
      //   pattern = pattern.replace(ESCAPE_g, characterReplacer);
      const flags = 'flags' in v ? v.flags : "";
      pieces.push("/" + pattern + "/" + flags + " ");
    }
    ['length', 'minlength', 'maxlength',
     'mininclusive', 'minexclusive', 'maxinclusive', 'maxexclusive',
     'totaldigits', 'fractiondigits'
    ].forEach(function (a) {
      if (v[a])
        pieces.push(" ", a, " ", v[a]);
    });
    return pieces;

    function isTerm (t) {
      return typeof t !== "object" || "value" in t && Object.keys(t).reduce((r, k) => {
        return r === false ? r : ["value", "type", "language"].indexOf(k) !== -1;
      }, true);
    }
  },

  // ### `_encodeIriOrBlankNode` represents an IRI or blank node
  _encodeIriOrBlankNode: function (iri, trailingSpace) {
    trailingSpace = trailingSpace ? ' ' : '';
    // A blank node is represented as-is
    if (iri[0] === '_' && iri[1] === ':') return iri;
    // Escape special characters
    if (ESCAPE_1.test(iri))
      iri = iri.replace(ESCAPE_g, characterReplacer);
    // Try to represent the IRI as prefixed name
    const prefixMatch = this._prefixRegex.exec(iri);
    return !prefixMatch
      ? this._relateUrl(iri)
      : (!prefixMatch[1]
         ? iri
         : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2])
      + trailingSpace;
  },

  // ### ``
  _relateUrl: function (iri) {
    const base = this._baseIRI;
    try {
      if (base && new URL(base).host === new URL(iri).host) // https://github.com/stevenvachon/relateurl/issues/28
        iri = RelateUrl.relate(base, iri, { output: RelateUrl.ROOT_PATH_RELATIVE });
    } catch (e) {
      // invalid URL for e.g. already relative IMPORTs
    }
    return '<' + iri + '>';
  },

  // ### `_encodeLiteral` represents a literal
  _encodeLiteral: function (value, type, language) {
    // Escape special characters
    if (ESCAPE_1.test(value))
      value = value.replace(ESCAPE_g, characterReplacer);
    // Write the literal, possibly with type or language
    if (language) {
      return '"' + value + '"@' + language;
    } else if (type) { // && type !== "http://www.w3.org/2001/XMLSchema#integer" is implied by the parsing rules.
      if (type === "http://www.w3.org/2001/XMLSchema#integer" && value.match(/^[+-]?[0-9]+$/)) {
        return value;
      } else if (type === "http://www.w3.org/2001/XMLSchema#decimal" && value.match(/^[+-]?[0-9]*\.[0-9]+$/)) {
        return value;
      } else if (type === "http://www.w3.org/2001/XMLSchema#double" && value.match(/^[+-]?([0-9]+\.[0-9]*[eE][+-]?[0-9]+|\.?[0-9]+[eE][+-]?[0-9]+)$/)) {
        return value;
      } else {
        return '"' + value + '"^^' + this._encodeIriOrBlankNode(type);
      }
    } else {
      return '"' + value + '"';
    }
  },

  // ### `_encodeShapeName` represents a subject
  _encodeShapeName: function (subject, trailingSpace) {
    if (subject[0] === '"')
      throw new Error('A literal as subject is not allowed: ' + subject);
    return this._encodeIriOrBlankNode(subject, trailingSpace);
  },

  // ### `_encodePredicate` represents a predicate
  _encodePredicate: function (predicate) {
    if (predicate[0] === '"')
      throw new Error('A literal as predicate is not allowed: ' + predicate);
    return predicate === RDF_TYPE ? 'a' : this._encodeIriOrBlankNode(predicate);
  },

  // ### `_encodeValue` represents an object
  _encodeValue: function (object) {
    // Represent an IRI or blank node
    if (typeof object !== "object")
      return this._encodeIriOrBlankNode(object);
    // Represent a literal
    return this._encodeLiteral(object.value, object.type, object.language);
  },

  // ### `_blockedWrite` replaces `_write` after the writer has been closed
  _blockedWrite: function () {
    throw new Error('Cannot write because the writer has been closed.');
  },

  writeSchema: function (shape, done) {
    this._writeSchema(shape, done);
    this.end(done);
  },

  // ### `addShape` adds the shape to the output stream
  addShape: function (shape, name, done) {
    this._write(
      _ShExWriter._encodeShapeName(name, false) +
        " " +
        _ShExWriter._writeShapeExpr(shape, done, true, 0).join(""),
      done
    );
  },

  // ### `addShapes` adds the shapes to the output stream
  addShapes: function (shapes) {
    for (let i = 0; i < shapes.length; i++)
      this.addShape(shapes[i]);
  },

  // ### `addPrefix` adds the prefix to the output stream
  addPrefix: function (prefix, iri, done) {
    const prefixes = {};
    prefixes[prefix] = iri;
    this.addPrefixes(prefixes, done);
  },

  // ### `addPrefixes` adds the prefixes to the output stream
  addPrefixes: function (prefixes, done) {
    // Add all useful prefixes
    const prefixIRIs = this._prefixIRIs;
    let hasPrefixes = false;
    for (let prefix in prefixes) {
      // Verify whether the prefix can be used and does not exist yet
      const iri = prefixes[prefix];
      if (// @@ /[#\/]$/.test(iri) && !! what was that?
          prefixIRIs[iri] !== (prefix += ':')) {
        hasPrefixes = true;
        prefixIRIs[iri] = prefix;
        // Write prefix
        this._write('PREFIX ' + prefix + ' <' + iri + '>\n');
      }
    }
    // Recreate the prefix matcher
    if (hasPrefixes) {
      let IRIlist = '', prefixList = '';
      for (let prefixIRI in prefixIRIs) {
        IRIlist += IRIlist ? '|' + prefixIRI : prefixIRI;
        prefixList += (prefixList ? '|' : '') + prefixIRIs[prefixIRI];
      }
      IRIlist = IRIlist.replace(/[\]\/\(\)\*\+\?\.\\\$]/g, '\\$&');
      this._prefixRegex = new RegExp('^(?:' + prefixList + ')[^\/]*$|' +
                                     '^(' + IRIlist + ')([a-zA-Z][\\-_a-zA-Z0-9]*)$');
    }
    // End a prefix block with a newline
    this._write(hasPrefixes ? '\n' : '', done);
  },

  // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes
  _prefixRegex: /$0^/,

  // ### `end` signals the end of the output stream
  end: function (done) {
    // Disallow further writing
    this._write = this._blockedWrite;

    // Try to end the underlying stream, ensuring done is called exactly one time
    let singleDone = done && function (error, result) { singleDone = null, done(error, result); };
    if (this._endStream) {
      try { return this._outputStream.end(singleDone); }
      catch (error) { /* error closing stream */ }
    }
    singleDone && singleDone();
  },
};

// Replaces a character by its escaped version
function characterReplacer(character) {
  // Replace a single character by its escaped version
  let result = ESCAPE_replacements[character];
  if (result === undefined) {
    // Replace a single character with its 4-bit unicode escape sequence
    if (character.length === 1) {
      result = character.charCodeAt(0).toString(16);
      result = '\\u0000'.substr(0, 6 - result.length) + result;
    }
    // Replace a surrogate pair with its 8-bit unicode escape sequence
    else {
      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +
                 character.charCodeAt(1) + 0x2400).toString(16);
      result = '\\U00000000'.substr(0, 10 - result.length) + result;
    }
  }
  return result;
}

function escapeCode (code) {
  return code.replace(/\\/g, "\\\\").replace(/%/g, "\\%")
}

/** _throwError: overridable function to throw Errors().
 *
 * @param func (optional): function at which to truncate stack trace
 * @param str: error message
 */
function _throwError (func, str) {
  if (typeof func !== "function") {
    str = func;
    func = _throwError;
  }
  const e = new Error(str);
  Error.captureStackTrace(e, func);
  throw e;
}

// Expect property p with value v in object o
function expect (o, p, v) {
  if (!(p in o))
    this._error(expect, "expected "+o+" to have a ."+p);
  if (arguments.length > 2 && o[p] !== v)
    this._error(expect, "expected "+o[o]+" to equal ."+v);
}

// The empty function
function noop () {}

return ShExWriter;
})();

// Export the `ShExWriter` class as a whole.
if (true)
  module.exports = ShExWriterCjsModule; // node environment


/***/ }),

/***/ 656:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.JisonLexer = void 0;
var JisonLexer = /** @class */ (function () {
    function JisonLexer(yy) {
        if (yy === void 0) { yy = {}; }
        this.yy = yy;
        this.EOF = 1;
        this.options = {};
        this.yyleng = 0;
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
    }
    JisonLexer.prototype.parseError = function (str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        }
        else {
            throw new Error(str);
        }
    };
    // resets the lexer, sets new input
    JisonLexer.prototype.setInput = function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0, 0];
        }
        this.offset = 0;
        return this;
    };
    // consumes and returns one char from the input
    JisonLexer.prototype.input = function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        }
        else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }
        this._input = this._input.slice(1);
        return ch;
    };
    // unshifts one char (or a string) into the input
    JisonLexer.prototype.unput = function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);
        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);
        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;
        var yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                    + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len
        };
        this.yylloc = yylloc;
        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    };
    // When called from action, caches matched text and appends it on next action
    JisonLexer.prototype.more = function () {
        this._more = true;
        return this;
    };
    // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
    JisonLexer.prototype.reject = function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        }
        else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
        return this;
    };
    // retain first n characters of the match
    JisonLexer.prototype.less = function (n) {
        this.unput(this.match.slice(n));
    };
    // displays already matched input, i.e. for error messages
    JisonLexer.prototype.pastInput = function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
    };
    // displays upcoming input, i.e. for error messages
    JisonLexer.prototype.upcomingInput = function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20 - next.length);
        }
        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    };
    // displays the character position where the lexing error occurred, i.e. for error messages
    JisonLexer.prototype.showPosition = function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    };
    // test the lexed token: return FALSE when not a match, otherwise return token
    JisonLexer.prototype.test_match = function (match, indexed_rule) {
        var token, lines, backup;
        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylloc.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = (this.yylloc.range.slice(0));
            }
        }
        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        }
        else if (this._backtrack) {
            // recover context
            for (var k in backup) { // what's the typescript-y way to copy fields across?
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    };
    // return next match in input
    JisonLexer.prototype.next = function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }
        var token, match = null, tempMatch, index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    }
                    else if (this._backtrack) {
                        match = null;
                        continue; // rule action called reject() implying a rule MISmatch.
                    }
                    else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                }
                else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        }
        else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    };
    // return next match that has a token
    JisonLexer.prototype.lex = function () {
        var r = this.next();
        if (r) {
            return r;
        }
        else {
            return this.lex();
        }
    };
    // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
    JisonLexer.prototype.begin = function (condition) {
        this.conditionStack.push(condition);
    };
    // pop the previously active lexer condition state off the condition stack
    JisonLexer.prototype.popState = function () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        }
        else {
            return this.conditionStack[0];
        }
    };
    // produce the lexer rule set which is active for the currently active lexer condition state
    JisonLexer.prototype._currentRules = function () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        }
        else {
            return this.conditions["INITIAL"].rules;
        }
    };
    // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
    JisonLexer.prototype.topState = function (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        }
        else {
            return "INITIAL";
        }
    };
    // alias for begin(condition)
    JisonLexer.prototype.pushState = function (condition) {
        this.begin(condition);
    };
    // return the number of states currently on the stack
    JisonLexer.prototype.stateStackSize = function () {
        return this.conditionStack.length;
    };
    return JisonLexer;
}());
exports.JisonLexer = JisonLexer;
//# sourceMappingURL=lexer.js.map

/***/ }),

/***/ 298:
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.o = exports.JisonParser = void 0;
var JisonParser = /** @class */ (function () {
    function JisonParser(yy, lexer) {
        if (yy === void 0) { yy = {}; }
        this.yy = yy;
        this.lexer = lexer;
    }
    JisonParser.prototype.trace = function (str) { };
    JisonParser.prototype.parseError = function (str, hash) {
        if (hash.recoverable) {
            this.trace(str);
        }
        else {
            var error = new Error(str);
            error.hash = hash;
            throw error;
        }
    };
    JisonParser.prototype.parse = function (input, yy) {
        if (yy === void 0) { yy = typeof this.yy === 'function' && typeof this.yy.constructor === 'function' ? new this.yy(this, this.lexer) : Object.create(this.yy); }
        var self = this, stack = [0], tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
        var args = lstack.slice.call(arguments, 1);
        //this.reductionCount = this.shiftCount = 0;
        var lexer = Object.create(this.lexer);
        var sharedState = { yy: yy };
        lexer.setInput(input, sharedState.yy);
        sharedState.yy.lexer = lexer;
        sharedState.yy.parser = this;
        if (typeof lexer.yylloc == 'undefined') {
            lexer.yylloc = {};
        }
        var yyloc = lexer.yylloc;
        lstack.push(yyloc);
        var ranges = lexer.options && lexer.options.ranges;
        if (typeof sharedState.yy.parseError === 'function') {
            this.parseError = sharedState.yy.parseError;
        }
        function popStack(n) {
            stack.length = stack.length - 2 * n;
            vstack.length = vstack.length - n;
            lstack.length = lstack.length - n;
        }
        var lex = function () {
            var token;
            // @ts-ignore
            token = (lexer.lex() || EOF);
            // if token isn't its numeric value, convert
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
        var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
        while (true) {
            // retreive state number from top of stack
            state = stack[stack.length - 1];
            // use default actions if available
            if (this.defaultActions[state]) {
                action = this.defaultActions[state];
            }
            else {
                if (symbol === null || typeof symbol == 'undefined') {
                    symbol = lex();
                }
                // read action for current state and first input
                action = table[state] && table[state][symbol];
            }
            _handle_error: 
            // handle parse error
            if (typeof action === 'undefined' || !action.length || !action[0]) {
                var error_rule_depth = null;
                var errStr = '';
                if (!recovering) {
                    // first see if there's any chance at hitting an error recovery rule:
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                    // Report error
                    expected = [];
                    for (var _p in table[state]) {
                        p = Number(_p);
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push("'" + this.terminals_[p] + "'");
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ":\n" + lexer.showPosition() + "\nExpecting " + expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                    }
                    else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ": Unexpected " +
                            (symbol == EOF ? "end of input" :
                                ("'" + (this.terminals_[symbol] || symbol) + "'"));
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: lexer.yylloc,
                        expected: expected,
                        recoverable: (error_rule_depth !== null)
                    });
                }
                else if (preErrorSymbol !== EOF) {
                    error_rule_depth = locateNearestErrorRecoveryRule(state);
                }
                // just recovered from another error
                if (recovering == 3) {
                    if (symbol === EOF || preErrorSymbol === EOF) {
                        throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                    }
                    // discard current lookahead and grab another
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    symbol = lex();
                }
                // try to recover from error
                if (error_rule_depth === null) {
                    throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
                }
                popStack(error_rule_depth || 0);
                preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
                symbol = TERROR; // insert generic error symbol as new lookahead
                state = stack[stack.length - 1];
                action = table[state] && table[state][TERROR];
                recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
            }
            // this shouldn't happen, unless resolve defaults are off
            if (action[0] instanceof Array && action.length > 1) {
                throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
            }
            switch (action[0]) {
                case 1: // shift
                    //this.shiftCount++;
                    stack.push(symbol);
                    vstack.push(lexer.yytext);
                    lstack.push(lexer.yylloc);
                    stack.push(action[1]); // push state
                    symbol = null;
                    if (!preErrorSymbol) { // normal execution/no error
                        yyleng = lexer.yyleng;
                        yytext = lexer.yytext;
                        yylineno = lexer.yylineno;
                        yyloc = lexer.yylloc;
                        if (recovering > 0) {
                            recovering--;
                        }
                    }
                    else {
                        // error just occurred, resume old lookahead f/ before error
                        symbol = preErrorSymbol;
                        preErrorSymbol = null;
                    }
                    break;
                case 2:
                    // reduce
                    //this.reductionCount++;
                    len = this.productions_[action[1]][1];
                    // perform semantic action
                    yyval.$ = vstack[vstack.length - len]; // default to $$ = $1
                    // default location, uses first token for firsts, last for lasts
                    yyval._$ = {
                        first_line: lstack[lstack.length - (len || 1)].first_line,
                        last_line: lstack[lstack.length - 1].last_line,
                        first_column: lstack[lstack.length - (len || 1)].first_column,
                        last_column: lstack[lstack.length - 1].last_column
                    };
                    if (ranges) {
                        yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                    }
                    // @ts-ignore
                    r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                    if (typeof r !== 'undefined') {
                        return r;
                    }
                    // pop off stack
                    if (len) {
                        stack = stack.slice(0, -1 * len * 2);
                        vstack = vstack.slice(0, -1 * len);
                        lstack = lstack.slice(0, -1 * len);
                    }
                    stack.push(this.productions_[action[1]][0]); // push nonterminal (reduce)
                    vstack.push(yyval.$);
                    lstack.push(yyval._$);
                    // goto new state = table[STATE][NONTERMINAL]
                    newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                    stack.push(newState);
                    break;
                case 3:
                    // accept
                    return true;
            }
        }
        return true;
        // Return the rule stack depth where the nearest error rule can be found.
        // Return FALSE when no error recovery rule was found.
        function locateNearestErrorRecoveryRule(state) {
            var stack_probe = stack.length - 1;
            var depth = 0;
            // try to recover from error
            for (;;) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                    return depth;
                }
                if (state === 0 || stack_probe < 2) {
                    return null; // No suitable error recovery rule available.
                }
                stack_probe -= 2; // popStack(1): [symbol, action]
                state = stack[stack_probe];
                ++depth;
            }
        }
    };
    return JisonParser;
}());
exports.JisonParser = JisonParser;
/* Function that extends an object with the given value for all given keys
 * e.g., o([1, 3, 4], [6, 7], { x: 1, y: 2 }) = { 1: [6, 7]; 3: [6, 7], 4: [6, 7], x: 1, y: 2 }
 * This is used to docompress parser tables at module load time.
 */
function o(k, v, o) {
    var l = k.length;
    for (o = o || {}; l--; o[k[l]] = v)
        ;
    return o;
}
exports.o = o;
//# sourceMappingURL=parser.js.map

/***/ }),

/***/ 251:
/***/ ((module) => {

var HierarchyClosure = (function () {
  /** create a hierarchy object
   * This object keeps track of direct children and parents as well as transitive children and parents.
   */
  function makeHierarchy () {
    let roots = {}
    let parents = {}
    let children = {}
    let holders = {}
    return {
      add: function (parent, child) {
        if (// test if this is a novel entry.
          (parent in children && children[parent].indexOf(child) !== -1)) {
          return
        }
        let target = parent in holders
          ? getNode(parent)
          : (roots[parent] = getNode(parent)) // add new parents to roots.
        let value = getNode(child)

        target[child] = value
        delete roots[child]

        // // maintain hierarchy (direct and confusing)
        // children[parent] = children[parent].concat(child, children[child])
        // children[child].forEach(c => parents[c] = parents[c].concat(parent, parents[parent]))
        // parents[child] = parents[child].concat(parent, parents[parent])
        // parents[parent].forEach(p => children[p] = children[p].concat(child, children[child]))

        // maintain hierarchy (generic and confusing)
        updateClosure(children, parents, child, parent)
        updateClosure(parents, children, parent, child)
        function updateClosure (container, members, near, far) {
          container[far] = container[far].filter(
            e => /* e !== near && */ container[near].indexOf(e) === -1
          ).concat(container[near].indexOf(near) === -1 ? [near] : [], container[near])
          container[near].forEach(
            n => (members[n] = members[n].filter(
              e => e !== far && members[far].indexOf(e) === -1
            ).concat(members[far].indexOf(far) === -1 ? [far] : [], members[far]))
          )
        }

        function getNode (node) {
          if (!(node in holders)) {
            parents[node] = []
            children[node] = []
            holders[node] = {}
          }
          return holders[node]
        }
      },
      roots: roots,
      parents: parents,
      children: children
    }
  }

  function depthFirst (n, f, p) {
    return Object.keys(n).reduce((ret, k) => {
      return ret.concat(
        depthFirst(n[k], f, k),
        p ? f(k, p) : []) // outer invocation can have null parent
    }, [])
  }

  return { create: makeHierarchy, depthFirst }
})()

/* istanbul ignore next */
if (true) {
  module.exports = HierarchyClosure
}


/***/ }),

/***/ 898:
/***/ ((module) => {

"use strict";


module.exports =
{
	// Output
	ABSOLUTE:      "absolute",
	PATH_RELATIVE: "pathRelative",
	ROOT_RELATIVE: "rootRelative",
	SHORTEST:      "shortest"
};


/***/ }),

/***/ 545:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var constants = __webpack_require__(898);



function formatAuth(urlObj, options)
{
	if (urlObj.auth && !options.removeAuth && (urlObj.extra.relation.maximumHost || options.output===constants.ABSOLUTE))
	{
		return urlObj.auth + "@";
	}
	
	return "";
}



function formatHash(urlObj, options)
{
	return urlObj.hash ? urlObj.hash : "";
}



function formatHost(urlObj, options)
{
	if (urlObj.host.full && (urlObj.extra.relation.maximumAuth || options.output===constants.ABSOLUTE))
	{
		return urlObj.host.full;
	}
	
	return "";
}



function formatPath(urlObj, options)
{
	var str = "";
	
	var absolutePath = urlObj.path.absolute.string;
	var relativePath = urlObj.path.relative.string;
	var resource = showResource(urlObj, options);
	
	if (urlObj.extra.relation.maximumHost || options.output===constants.ABSOLUTE || options.output===constants.ROOT_RELATIVE)
	{
		str = absolutePath;
	}
	else if (relativePath.length<=absolutePath.length && options.output===constants.SHORTEST || options.output===constants.PATH_RELATIVE)
	{
		str = relativePath;
		
		if (str === "")
		{
			var query = showQuery(urlObj,options) && !!getQuery(urlObj,options);
			
			if (urlObj.extra.relation.maximumPath && !resource)
			{
				str = "./";
			}
			else if (urlObj.extra.relation.overridesQuery && !resource && !query)
			{
				str = "./";
			}
		}
	}
	else
	{
		str = absolutePath;
	}
	
	if ( str==="/" && !resource && options.removeRootTrailingSlash && (!urlObj.extra.relation.minimumPort || options.output===constants.ABSOLUTE) )
	{
		str = "";
	}
	
	return str;
}



function formatPort(urlObj, options)
{
	if (urlObj.port && !urlObj.extra.portIsDefault && urlObj.extra.relation.maximumHost)
	{
		return ":" + urlObj.port;
	}
	
	return "";
}



function formatQuery(urlObj, options)
{
	return showQuery(urlObj,options) ? getQuery(urlObj, options) : "";
}



function formatResource(urlObj, options)
{
	return showResource(urlObj,options) ? urlObj.resource : "";
}



function formatScheme(urlObj, options)
{
	var str = "";
	
	if (urlObj.extra.relation.maximumHost || options.output===constants.ABSOLUTE)
	{
		if (!urlObj.extra.relation.minimumScheme || !options.schemeRelative || options.output===constants.ABSOLUTE)
		{
			str += urlObj.scheme + "://";
		}
		else
		{
			str += "//";
		}
	}
	
	return str;
}



function formatUrl(urlObj, options)
{
	var url = "";
	
	url += formatScheme(urlObj, options);
	url += formatAuth(urlObj, options);
	url += formatHost(urlObj, options);
	url += formatPort(urlObj, options);
	url += formatPath(urlObj, options);
	url += formatResource(urlObj, options);
	url += formatQuery(urlObj, options);
	url += formatHash(urlObj, options);
	
	return url;
}



function getQuery(urlObj, options)
{
	var stripQuery = options.removeEmptyQueries && urlObj.extra.relation.minimumPort;
	
	return urlObj.query.string[ stripQuery ? "stripped" : "full" ];
}



function showQuery(urlObj, options)
{
	return !urlObj.extra.relation.minimumQuery || options.output===constants.ABSOLUTE || options.output===constants.ROOT_RELATIVE;
}



function showResource(urlObj, options)
{
	var removeIndex = options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex;
	var removeMatchingResource = urlObj.extra.relation.minimumResource && options.output!==constants.ABSOLUTE && options.output!==constants.ROOT_RELATIVE;
	
	return !!urlObj.resource && !removeMatchingResource && !removeIndex;
}



module.exports = formatUrl;


/***/ }),

/***/ 961:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var constants  = __webpack_require__(898);
var formatUrl  = __webpack_require__(545);
var getOptions = __webpack_require__(509);
var objUtils   = __webpack_require__(900);
var parseUrl   = __webpack_require__(579);
var relateUrl  = __webpack_require__(550);



function RelateUrl(from, options)
{
	this.options = getOptions(options,
	{
		defaultPorts: {ftp:21, http:80, https:443},
		directoryIndexes: ["index.html"],
		ignore_www: false,
		output: RelateUrl.SHORTEST,
		rejectedSchemes: ["data","javascript","mailto"],
		removeAuth: false,
		removeDirectoryIndexes: true,
		removeEmptyQueries: false,
		removeRootTrailingSlash: true,
		schemeRelative: true,
		site: undefined,
		slashesDenoteHost: true
	});
	
	this.from = parseUrl.from(from, this.options, null);
}



/*
	Usage: instance=new RelateUrl(); instance.relate();
*/
RelateUrl.prototype.relate = function(from, to, options)
{
	// relate(to,options)
	if ( objUtils.isPlainObject(to) )
	{
		options = to;
		to = from;
		from = null;
	}
	// relate(to)
	else if (!to)
	{
		to = from;
		from = null;
	}
	
	options = getOptions(options, this.options);
	from = from || options.site;
	from = parseUrl.from(from, options, this.from);
	
	if (!from || !from.href)
	{
		throw new Error("from value not defined.");
	}
	else if (from.extra.hrefInfo.minimumPathOnly)
	{
		throw new Error("from value supplied is not absolute: "+from.href);
	}
	
	to = parseUrl.to(to, options);
	
	if (to.valid===false) return to.href;
	
	to = relateUrl(from, to, options);
	to = formatUrl(to, options);
	
	return to;
}



/*
	Usage: RelateUrl.relate();
*/
RelateUrl.relate = function(from, to, options)
{
	return new RelateUrl().relate(from, to, options);
}



// Make constants accessible from API
objUtils.shallowMerge(RelateUrl, constants);



module.exports = RelateUrl;


/***/ }),

/***/ 509:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var objUtils = __webpack_require__(900);



function getOptions(options, defaults)
{
	if ( objUtils.isPlainObject(options) )
	{
		var newOptions = {};
		
		for (var i in defaults)
		{
			if ( defaults.hasOwnProperty(i) )
			{
				if (options[i] !== undefined)
				{
					newOptions[i] = mergeOption(options[i], defaults[i]);
				}
				else
				{
					newOptions[i] = defaults[i];
				}
			}
		}
		
		return newOptions;
	}
	else
	{
		return defaults;
	}
}



function mergeOption(newValues, defaultValues)
{
	if (defaultValues instanceof Object && newValues instanceof Object)
	{
		if (defaultValues instanceof Array && newValues instanceof Array)
		{
			return defaultValues.concat(newValues);
		}
		else
		{
			return objUtils.shallowMerge(newValues, defaultValues);
		}
	}
	
	return newValues;
}



module.exports = getOptions;


/***/ }),

/***/ 126:
/***/ ((module) => {

"use strict";


function parseHost(urlObj, options)
{
	// TWEAK :: condition only for speed optimization
	if (options.ignore_www)
	{
		var host = urlObj.host.full;
		
		if (host)
		{
			var stripped = host;
			
			if (host.indexOf("www.") === 0)
			{
				stripped = host.substr(4);
			}
			
			urlObj.host.stripped = stripped;
		}
	}
}



module.exports = parseHost;


/***/ }),

/***/ 963:
/***/ ((module) => {

"use strict";


function hrefInfo(urlObj)
{
	var minimumPathOnly     = (!urlObj.scheme && !urlObj.auth && !urlObj.host.full && !urlObj.port);
	var minimumResourceOnly = (minimumPathOnly && !urlObj.path.absolute.string);
	var minimumQueryOnly    = (minimumResourceOnly && !urlObj.resource);
	var minimumHashOnly     = (minimumQueryOnly && !urlObj.query.string.full.length);
	var empty               = (minimumHashOnly && !urlObj.hash);
	
	urlObj.extra.hrefInfo.minimumPathOnly     = minimumPathOnly;
	urlObj.extra.hrefInfo.minimumResourceOnly = minimumResourceOnly;
	urlObj.extra.hrefInfo.minimumQueryOnly    = minimumQueryOnly;
	urlObj.extra.hrefInfo.minimumHashOnly     = minimumHashOnly;
	urlObj.extra.hrefInfo.empty = empty;
}



module.exports = hrefInfo;


/***/ }),

/***/ 579:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hrefInfo   = __webpack_require__(963);
var parseHost  = __webpack_require__(126);
var parsePath  = __webpack_require__(875);
var parsePort  = __webpack_require__(891);
var parseQuery = __webpack_require__(320);
var parseUrlString = __webpack_require__(6);
var pathUtils      = __webpack_require__(670);



function parseFromUrl(url, options, fallback)
{
	if (url)
	{
		var urlObj = parseUrl(url, options);
		
		// Because the following occurs in the relate stage for "to" URLs,
		// such had to be mostly duplicated here
		
		var pathArray = pathUtils.resolveDotSegments(urlObj.path.absolute.array);
		
		urlObj.path.absolute.array  = pathArray;
		urlObj.path.absolute.string = "/" + pathUtils.join(pathArray);
		
		return urlObj;
	}
	else
	{
		return fallback;
	}
}



function parseUrl(url, options)
{
	var urlObj = parseUrlString(url, options);
	
	if (urlObj.valid===false) return urlObj;
	
	parseHost(urlObj, options);
	parsePort(urlObj, options);
	parsePath(urlObj, options);
	parseQuery(urlObj, options);
	hrefInfo(urlObj);
	
	return urlObj;
}



module.exports =
{
	from: parseFromUrl,
	to:   parseUrl
};


/***/ }),

/***/ 875:
/***/ ((module) => {

"use strict";


function isDirectoryIndex(resource, options)
{
	var verdict = false;
	
	options.directoryIndexes.every( function(index)
	{
		if (index === resource)
		{
			verdict = true;
			return false;
		}
		
		return true;
	});
	
	return verdict;
}



function parsePath(urlObj, options)
{
	var path = urlObj.path.absolute.string;
	
	if (path)
	{
		var lastSlash = path.lastIndexOf("/");
		
		if (lastSlash > -1)
		{
			if (++lastSlash < path.length)
			{
				var resource = path.substr(lastSlash);
				
				if (resource!=="." && resource!=="..")
				{
					urlObj.resource = resource;
					path = path.substr(0, lastSlash);
				}
				else
				{
					path += "/";
				}
			}
			
			urlObj.path.absolute.string = path;
			urlObj.path.absolute.array = splitPath(path);
		}
		else if (path==="." || path==="..")
		{
			// "..?var", "..#anchor", etc ... not "..index.html"
			path += "/";
			
			urlObj.path.absolute.string = path;
			urlObj.path.absolute.array = splitPath(path);
		}
		else
		{
			// Resource-only
			urlObj.resource = path;
			urlObj.path.absolute.string = null;
		}
		
		urlObj.extra.resourceIsIndex = isDirectoryIndex(urlObj.resource, options);
	}
	// Else: query/hash-only or empty
}



function splitPath(path)
{
	// TWEAK :: condition only for speed optimization
	if (path !== "/")
	{
		var cleaned = [];
		
		path.split("/").forEach( function(dir)
		{
			// Cleanup -- splitting "/dir/" becomes ["","dir",""]
			if (dir !== "")
			{
				cleaned.push(dir);
			}
		});
		
		return cleaned;
	}
	else
	{
		// Faster to skip the above block and just create an array
		return [];
	}
}



module.exports = parsePath;


/***/ }),

/***/ 891:
/***/ ((module) => {

"use strict";


function parsePort(urlObj, options)
{
	var defaultPort = -1;
	
	for (var i in options.defaultPorts)
	{
		if ( i===urlObj.scheme && options.defaultPorts.hasOwnProperty(i) )
		{
			defaultPort = options.defaultPorts[i];
			break;
		}
	}
	
	if (defaultPort > -1)
	{
		// Force same type as urlObj.port
		defaultPort = defaultPort.toString();
		
		if (urlObj.port === null)
		{
			urlObj.port = defaultPort;
		}
		
		urlObj.extra.portIsDefault = (urlObj.port === defaultPort);
	}
}



module.exports = parsePort;


/***/ }),

/***/ 320:
/***/ ((module) => {

"use strict";

var hasOwnProperty = Object.prototype.hasOwnProperty;



function parseQuery(urlObj, options)
{
	urlObj.query.string.full = stringify(urlObj.query.object, false);
	
	// TWEAK :: condition only for speed optimization
	if (options.removeEmptyQueries)
	{
		urlObj.query.string.stripped = stringify(urlObj.query.object, true);
	}
}



function stringify(queryObj, removeEmptyQueries)
{
	var count = 0;
	var str = "";
	
	for (var i in queryObj)
	{
		if ( i!=="" && hasOwnProperty.call(queryObj, i)===true )
		{
			var value = queryObj[i];
			
			if (value !== "" || !removeEmptyQueries)
			{
				str += (++count===1) ? "?" : "&";
				
				i = encodeURIComponent(i);
				
				if (value !== "")
				{
					str += i +"="+ encodeURIComponent(value).replace(/%20/g,"+");
				}
				else
				{
					str += i;
				}
			}
		}
	}
	
	return str;
}



module.exports = parseQuery;


/***/ }),

/***/ 6:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var _parseUrl = (__webpack_require__(135).parse);



/*
	Customize the URL object that Node generates
	because:
	
	* necessary data for later
	* urlObj.host is useless
	* urlObj.hostname is too long
	* urlObj.path is useless
	* urlObj.pathname is too long
	* urlObj.protocol is inaccurate; should be called "scheme"
	* urlObj.search is mostly useless
*/
function clean(urlObj)
{
	var scheme = urlObj.protocol;
	
	if (scheme)
	{
		// Remove ":" suffix
		if (scheme.indexOf(":") === scheme.length-1)
		{
			scheme = scheme.substr(0, scheme.length-1);
		}
	}
	
	urlObj.host =
	{
		// TODO :: unescape(encodeURIComponent(s)) ? ... http://ecmanaut.blogspot.ca/2006/07/encoding-decoding-utf8-in-javascript.html
		full: urlObj.hostname,
		stripped: null
	};
	
	urlObj.path =
	{
		absolute:
		{
			array: null,
			string: urlObj.pathname
		},
		relative:
		{
			array: null,
			string: null
		}
	};
	
	urlObj.query =
	{
		object: urlObj.query,
		string:
		{
			full: null,
			stripped: null
		}
	};
	
	urlObj.extra =
	{
		hrefInfo:
		{
			minimumPathOnly: null,
			minimumResourceOnly: null,
			minimumQueryOnly: null,
			minimumHashOnly: null,
			empty: null,
			
			separatorOnlyQuery: urlObj.search==="?"
		},
		portIsDefault: null,
		relation:
		{
			maximumScheme: null,
			maximumAuth: null,
			maximumHost: null,
			maximumPort: null,
			maximumPath: null,
			maximumResource: null,
			maximumQuery: null,
			maximumHash: null,
			
			minimumScheme: null,
			minimumAuth: null,
			minimumHost: null,
			minimumPort: null,
			minimumPath: null,
			minimumResource: null,
			minimumQuery: null,
			minimumHash: null,
			
			overridesQuery: null
		},
		resourceIsIndex: null,
		slashes: urlObj.slashes
	};
	
	urlObj.resource = null;
	urlObj.scheme = scheme;
	delete urlObj.hostname;
	delete urlObj.pathname;
	delete urlObj.protocol;
	delete urlObj.search;
	delete urlObj.slashes;
	
	return urlObj;
}



function validScheme(url, options)
{
	var valid = true;
	
	options.rejectedSchemes.every( function(rejectedScheme)
	{
		valid = !(url.indexOf(rejectedScheme+":") === 0);
		
		// Break loop
		return valid;
	});
	
	return valid;
}



function parseUrlString(url, options)
{
	if ( validScheme(url,options) )
	{
		return clean( _parseUrl(url, true, options.slashesDenoteHost) );
	}
	else
	{
		return {href:url, valid:false};
	}
}



module.exports = parseUrlString;


/***/ }),

/***/ 57:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var findRelation = __webpack_require__(279);
var objUtils     = __webpack_require__(900);
var pathUtils    = __webpack_require__(670);



function absolutize(urlObj, siteUrlObj, options)
{
	findRelation.upToPath(urlObj, siteUrlObj, options);
	
	// Fill in relative URLs
	if (urlObj.extra.relation.minimumScheme) urlObj.scheme = siteUrlObj.scheme;
	if (urlObj.extra.relation.minimumAuth)   urlObj.auth   = siteUrlObj.auth;
	if (urlObj.extra.relation.minimumHost)   urlObj.host   = objUtils.clone(siteUrlObj.host);
	if (urlObj.extra.relation.minimumPort)   copyPort(urlObj, siteUrlObj);
	if (urlObj.extra.relation.minimumScheme) copyPath(urlObj, siteUrlObj);
	
	// Check remaining relativeness now that path has been copied and/or resolved
	findRelation.pathOn(urlObj, siteUrlObj, options);
	
	// Fill in relative URLs
	if (urlObj.extra.relation.minimumResource) copyResource(urlObj, siteUrlObj);
	if (urlObj.extra.relation.minimumQuery)    urlObj.query = objUtils.clone(siteUrlObj.query);
	if (urlObj.extra.relation.minimumHash)     urlObj.hash  = siteUrlObj.hash;
}



/*
	Get an absolute path that's relative to site url.
*/
function copyPath(urlObj, siteUrlObj)
{
	if (urlObj.extra.relation.maximumHost || !urlObj.extra.hrefInfo.minimumResourceOnly)
	{
		var pathArray = urlObj.path.absolute.array;
		var pathString = "/";
		
		// If not erroneous URL
		if (pathArray)
		{
			// If is relative path
			if (urlObj.extra.hrefInfo.minimumPathOnly && urlObj.path.absolute.string.indexOf("/")!==0)
			{
				// Append path to site path
				pathArray = siteUrlObj.path.absolute.array.concat(pathArray);
			}
			
			pathArray   = pathUtils.resolveDotSegments(pathArray);
			pathString += pathUtils.join(pathArray);
		}
		else
		{
			pathArray = [];
		}
		
		urlObj.path.absolute.array  = pathArray;
		urlObj.path.absolute.string = pathString;
	}
	else
	{
		// Resource-, query- or hash-only or empty
		urlObj.path = objUtils.clone(siteUrlObj.path);
	}
}



function copyPort(urlObj, siteUrlObj)
{
	urlObj.port = siteUrlObj.port;
	
	urlObj.extra.portIsDefault = siteUrlObj.extra.portIsDefault;
}



function copyResource(urlObj, siteUrlObj)
{
	urlObj.resource = siteUrlObj.resource;
	
	urlObj.extra.resourceIsIndex = siteUrlObj.extra.resourceIsIndex;
}



module.exports = absolutize;


/***/ }),

/***/ 279:
/***/ ((module) => {

"use strict";


function findRelation_upToPath(urlObj, siteUrlObj, options)
{
	// Path- or root-relative URL
	var pathOnly = urlObj.extra.hrefInfo.minimumPathOnly;
	
	// Matching scheme, scheme-relative or path-only
	var minimumScheme = (urlObj.scheme===siteUrlObj.scheme || !urlObj.scheme);
	
	// Matching auth, ignoring auth or path-only
	var minimumAuth = minimumScheme && (urlObj.auth===siteUrlObj.auth || options.removeAuth || pathOnly);
	
	// Matching host or path-only
	var www = options.ignore_www ? "stripped" : "full";
	var minimumHost = minimumAuth && (urlObj.host[www]===siteUrlObj.host[www] || pathOnly);
	
	// Matching port or path-only
	var minimumPort = minimumHost && (urlObj.port===siteUrlObj.port || pathOnly);
	
	urlObj.extra.relation.minimumScheme = minimumScheme;
	urlObj.extra.relation.minimumAuth   = minimumAuth;
	urlObj.extra.relation.minimumHost   = minimumHost;
	urlObj.extra.relation.minimumPort   = minimumPort;
	
	urlObj.extra.relation.maximumScheme = !minimumScheme || minimumScheme && !minimumAuth;
	urlObj.extra.relation.maximumAuth   = !minimumScheme || minimumScheme && !minimumHost;
	urlObj.extra.relation.maximumHost   = !minimumScheme || minimumScheme && !minimumPort;
}



function findRelation_pathOn(urlObj, siteUrlObj, options)
{
	var queryOnly = urlObj.extra.hrefInfo.minimumQueryOnly;
	var hashOnly  = urlObj.extra.hrefInfo.minimumHashOnly;
	var empty     = urlObj.extra.hrefInfo.empty;	// not required, but self-documenting
	
	// From upToPath()
	var minimumPort   = urlObj.extra.relation.minimumPort;
	var minimumScheme = urlObj.extra.relation.minimumScheme;
	
	// Matching port and path
	var minimumPath = minimumPort && urlObj.path.absolute.string===siteUrlObj.path.absolute.string;
	
	// Matching resource or query/hash-only or empty
	var matchingResource = (urlObj.resource===siteUrlObj.resource || !urlObj.resource && siteUrlObj.extra.resourceIsIndex) || (options.removeDirectoryIndexes && urlObj.extra.resourceIsIndex && !siteUrlObj.resource);
	var minimumResource = minimumPath && (matchingResource || queryOnly || hashOnly || empty);
	
	// Matching query or hash-only/empty
	var query = options.removeEmptyQueries ? "stripped" : "full";
	var urlQuery = urlObj.query.string[query];
	var siteUrlQuery = siteUrlObj.query.string[query];
	var minimumQuery = (minimumResource && !!urlQuery && urlQuery===siteUrlQuery) || ((hashOnly || empty) && !urlObj.extra.hrefInfo.separatorOnlyQuery);
	
	var minimumHash = minimumQuery && urlObj.hash===siteUrlObj.hash;
	
	urlObj.extra.relation.minimumPath     = minimumPath;
	urlObj.extra.relation.minimumResource = minimumResource;
	urlObj.extra.relation.minimumQuery    = minimumQuery;
	urlObj.extra.relation.minimumHash     = minimumHash;
	
	urlObj.extra.relation.maximumPort     = !minimumScheme || minimumScheme && !minimumPath;
	urlObj.extra.relation.maximumPath     = !minimumScheme || minimumScheme && !minimumResource;
	urlObj.extra.relation.maximumResource = !minimumScheme || minimumScheme && !minimumQuery;
	urlObj.extra.relation.maximumQuery    = !minimumScheme || minimumScheme && !minimumHash;
	urlObj.extra.relation.maximumHash     = !minimumScheme || minimumScheme && !minimumHash;	// there's nothing after hash, so it's the same as maximumQuery
	
	// Matching path and/or resource with existing but non-matching site query
	urlObj.extra.relation.overridesQuery  = minimumPath && urlObj.extra.relation.maximumResource && !minimumQuery && !!siteUrlQuery;
}



module.exports =
{
	pathOn:   findRelation_pathOn,
	upToPath: findRelation_upToPath
};


/***/ }),

/***/ 550:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var absolutize = __webpack_require__(57);
var relativize = __webpack_require__(376);



function relateUrl(siteUrlObj, urlObj, options)
{
	absolutize(urlObj, siteUrlObj, options);
	relativize(urlObj, siteUrlObj, options);
	
	return urlObj;
}



module.exports = relateUrl;


/***/ }),

/***/ 376:
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var pathUtils = __webpack_require__(670);



/*
	Get a path relative to the site path.
*/
function relatePath(absolutePath, siteAbsolutePath)
{
	var relativePath = [];
	
	// At this point, it's related to the host/port
	var related = true;
	var parentIndex = -1;
	
	// Find parents
	siteAbsolutePath.forEach( function(siteAbsoluteDir, i)
	{
		if (related)
		{
			if (absolutePath[i] !== siteAbsoluteDir)
			{
				related = false;
			}
			else
			{
				parentIndex = i;
			}
		}
		
		if (!related)
		{
			// Up one level
			relativePath.push("..");
		}
	});
	
	// Form path
	absolutePath.forEach( function(dir, i)
	{
		if (i > parentIndex)
		{
			relativePath.push(dir);
		}
	});
	
	return relativePath;
}



function relativize(urlObj, siteUrlObj, options)
{
	if (urlObj.extra.relation.minimumScheme)
	{
		var pathArray = relatePath(urlObj.path.absolute.array, siteUrlObj.path.absolute.array);
		
		urlObj.path.relative.array  = pathArray;
		urlObj.path.relative.string = pathUtils.join(pathArray);
	}
}



module.exports = relativize;


/***/ }),

/***/ 900:
/***/ ((module) => {

"use strict";


/*
	Deep-clone an object.
*/
function clone(obj)
{
	if (obj instanceof Object)
	{
		var clonedObj = (obj instanceof Array) ? [] : {};
		
		for (var i in obj)
		{
			if ( obj.hasOwnProperty(i) )
			{
				clonedObj[i] = clone( obj[i] );
			}
		}
		
		return clonedObj;
	}
	
	return obj;
}



/*
	https://github.com/jonschlinkert/is-plain-object
*/
function isPlainObject(obj)
{
	return !!obj && typeof obj==="object" && obj.constructor===Object;
}



/*
	Shallow-merge two objects.
*/
function shallowMerge(target, source)
{
	if (target instanceof Object && source instanceof Object)
	{
		for (var i in source)
		{
			if ( source.hasOwnProperty(i) )
			{
				target[i] = source[i];
			}
		}
	}
	
	return target;
}



module.exports =
{
	clone: clone,
	isPlainObject: isPlainObject,
	shallowMerge: shallowMerge
};


/***/ }),

/***/ 670:
/***/ ((module) => {

"use strict";


function joinPath(pathArray)
{
	if (pathArray.length > 0)
	{
		return pathArray.join("/") + "/";
	}
	else
	{
		return "";
	}
}



function resolveDotSegments(pathArray)
{
	var pathAbsolute = [];
	
	pathArray.forEach( function(dir)
	{
		if (dir !== "..")
		{
			if (dir !== ".")
			{
				pathAbsolute.push(dir);
			}
		}
		else
		{
			// Remove parent
			if (pathAbsolute.length > 0)
			{
				pathAbsolute.splice(pathAbsolute.length-1, 1);
			}
		}
	});
	
	return pathAbsolute;
}



module.exports =
{
	join: joinPath,
	resolveDotSegments: resolveDotSegments
};


/***/ }),

/***/ 135:
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ 970:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/**
 * marked - a markdown parser
 * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/markedjs/marked
 */

/**
 * DO NOT EDIT THIS FILE
 * The code in this file is generated from files in ./src/
 */



Object.defineProperty(exports, "__esModule", ({ value: true }));

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function getDefaults() {
  return {
    baseUrl: null,
    breaks: false,
    extensions: null,
    gfm: true,
    headerIds: true,
    headerPrefix: '',
    highlight: null,
    langPrefix: 'language-',
    mangle: true,
    pedantic: false,
    renderer: null,
    sanitize: false,
    sanitizer: null,
    silent: false,
    smartLists: false,
    smartypants: false,
    tokenizer: null,
    walkTokens: null,
    xhtml: false
  };
}
exports.defaults = getDefaults();
function changeDefaults(newDefaults) {
  exports.defaults = newDefaults;
}

/**
 * Helpers
 */
var escapeTest = /[&<>"']/;
var escapeReplace = /[&<>"']/g;
var escapeTestNoEncode = /[<>"']|&(?!#?\w+;)/;
var escapeReplaceNoEncode = /[<>"']|&(?!#?\w+;)/g;
var escapeReplacements = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;',
  "'": '&#39;'
};

var getEscapeReplacement = function getEscapeReplacement(ch) {
  return escapeReplacements[ch];
};

function escape(html, encode) {
  if (encode) {
    if (escapeTest.test(html)) {
      return html.replace(escapeReplace, getEscapeReplacement);
    }
  } else {
    if (escapeTestNoEncode.test(html)) {
      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);
    }
  }

  return html;
}
var unescapeTest = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/ig;
/**
 * @param {string} html
 */

function unescape(html) {
  // explicitly match decimal, hex, and named HTML entities
  return html.replace(unescapeTest, function (_, n) {
    n = n.toLowerCase();
    if (n === 'colon') return ':';

    if (n.charAt(0) === '#') {
      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));
    }

    return '';
  });
}
var caret = /(^|[^\[])\^/g;
/**
 * @param {string | RegExp} regex
 * @param {string} opt
 */

function edit(regex, opt) {
  regex = typeof regex === 'string' ? regex : regex.source;
  opt = opt || '';
  var obj = {
    replace: function replace(name, val) {
      val = val.source || val;
      val = val.replace(caret, '$1');
      regex = regex.replace(name, val);
      return obj;
    },
    getRegex: function getRegex() {
      return new RegExp(regex, opt);
    }
  };
  return obj;
}
var nonWordAndColonTest = /[^\w:]/g;
var originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;
/**
 * @param {boolean} sanitize
 * @param {string} base
 * @param {string} href
 */

function cleanUrl(sanitize, base, href) {
  if (sanitize) {
    var prot;

    try {
      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();
    } catch (e) {
      return null;
    }

    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {
      return null;
    }
  }

  if (base && !originIndependentUrl.test(href)) {
    href = resolveUrl(base, href);
  }

  try {
    href = encodeURI(href).replace(/%25/g, '%');
  } catch (e) {
    return null;
  }

  return href;
}
var baseUrls = {};
var justDomain = /^[^:]+:\/*[^/]*$/;
var protocol = /^([^:]+:)[\s\S]*$/;
var domain = /^([^:]+:\/*[^/]*)[\s\S]*$/;
/**
 * @param {string} base
 * @param {string} href
 */

function resolveUrl(base, href) {
  if (!baseUrls[' ' + base]) {
    // we can ignore everything in base after the last slash of its path component,
    // but we might need to add _that_
    // https://tools.ietf.org/html/rfc3986#section-3
    if (justDomain.test(base)) {
      baseUrls[' ' + base] = base + '/';
    } else {
      baseUrls[' ' + base] = rtrim(base, '/', true);
    }
  }

  base = baseUrls[' ' + base];
  var relativeBase = base.indexOf(':') === -1;

  if (href.substring(0, 2) === '//') {
    if (relativeBase) {
      return href;
    }

    return base.replace(protocol, '$1') + href;
  } else if (href.charAt(0) === '/') {
    if (relativeBase) {
      return href;
    }

    return base.replace(domain, '$1') + href;
  } else {
    return base + href;
  }
}
var noopTest = {
  exec: function noopTest() {}
};
function merge(obj) {
  var i = 1,
      target,
      key;

  for (; i < arguments.length; i++) {
    target = arguments[i];

    for (key in target) {
      if (Object.prototype.hasOwnProperty.call(target, key)) {
        obj[key] = target[key];
      }
    }
  }

  return obj;
}
function splitCells(tableRow, count) {
  // ensure that every cell-delimiting pipe has a space
  // before it to distinguish it from an escaped pipe
  var row = tableRow.replace(/\|/g, function (match, offset, str) {
    var escaped = false,
        curr = offset;

    while (--curr >= 0 && str[curr] === '\\') {
      escaped = !escaped;
    }

    if (escaped) {
      // odd number of slashes means | is escaped
      // so we leave it alone
      return '|';
    } else {
      // add space before unescaped |
      return ' |';
    }
  }),
      cells = row.split(/ \|/);
  var i = 0; // First/last cell in a row cannot be empty if it has no leading/trailing pipe

  if (!cells[0].trim()) {
    cells.shift();
  }

  if (cells.length > 0 && !cells[cells.length - 1].trim()) {
    cells.pop();
  }

  if (cells.length > count) {
    cells.splice(count);
  } else {
    while (cells.length < count) {
      cells.push('');
    }
  }

  for (; i < cells.length; i++) {
    // leading or trailing whitespace is ignored per the gfm spec
    cells[i] = cells[i].trim().replace(/\\\|/g, '|');
  }

  return cells;
}
/**
 * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').
 * /c*$/ is vulnerable to REDOS.
 *
 * @param {string} str
 * @param {string} c
 * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.
 */

function rtrim(str, c, invert) {
  var l = str.length;

  if (l === 0) {
    return '';
  } // Length of suffix matching the invert condition.


  var suffLen = 0; // Step left until we fail to match the invert condition.

  while (suffLen < l) {
    var currChar = str.charAt(l - suffLen - 1);

    if (currChar === c && !invert) {
      suffLen++;
    } else if (currChar !== c && invert) {
      suffLen++;
    } else {
      break;
    }
  }

  return str.slice(0, l - suffLen);
}
function findClosingBracket(str, b) {
  if (str.indexOf(b[1]) === -1) {
    return -1;
  }

  var l = str.length;
  var level = 0,
      i = 0;

  for (; i < l; i++) {
    if (str[i] === '\\') {
      i++;
    } else if (str[i] === b[0]) {
      level++;
    } else if (str[i] === b[1]) {
      level--;

      if (level < 0) {
        return i;
      }
    }
  }

  return -1;
}
function checkSanitizeDeprecation(opt) {
  if (opt && opt.sanitize && !opt.silent) {
    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');
  }
} // copied from https://stackoverflow.com/a/5450113/806777

/**
 * @param {string} pattern
 * @param {number} count
 */

function repeatString(pattern, count) {
  if (count < 1) {
    return '';
  }

  var result = '';

  while (count > 1) {
    if (count & 1) {
      result += pattern;
    }

    count >>= 1;
    pattern += pattern;
  }

  return result + pattern;
}

function outputLink(cap, link, raw, lexer) {
  var href = link.href;
  var title = link.title ? escape(link.title) : null;
  var text = cap[1].replace(/\\([\[\]])/g, '$1');

  if (cap[0].charAt(0) !== '!') {
    lexer.state.inLink = true;
    var token = {
      type: 'link',
      raw: raw,
      href: href,
      title: title,
      text: text,
      tokens: lexer.inlineTokens(text, [])
    };
    lexer.state.inLink = false;
    return token;
  }

  return {
    type: 'image',
    raw: raw,
    href: href,
    title: title,
    text: escape(text)
  };
}

function indentCodeCompensation(raw, text) {
  var matchIndentToCode = raw.match(/^(\s+)(?:```)/);

  if (matchIndentToCode === null) {
    return text;
  }

  var indentToCode = matchIndentToCode[1];
  return text.split('\n').map(function (node) {
    var matchIndentInNode = node.match(/^\s+/);

    if (matchIndentInNode === null) {
      return node;
    }

    var indentInNode = matchIndentInNode[0];

    if (indentInNode.length >= indentToCode.length) {
      return node.slice(indentToCode.length);
    }

    return node;
  }).join('\n');
}
/**
 * Tokenizer
 */


var Tokenizer = /*#__PURE__*/function () {
  function Tokenizer(options) {
    this.options = options || exports.defaults;
  }

  var _proto = Tokenizer.prototype;

  _proto.space = function space(src) {
    var cap = this.rules.block.newline.exec(src);

    if (cap && cap[0].length > 0) {
      return {
        type: 'space',
        raw: cap[0]
      };
    }
  };

  _proto.code = function code(src) {
    var cap = this.rules.block.code.exec(src);

    if (cap) {
      var text = cap[0].replace(/^ {1,4}/gm, '');
      return {
        type: 'code',
        raw: cap[0],
        codeBlockStyle: 'indented',
        text: !this.options.pedantic ? rtrim(text, '\n') : text
      };
    }
  };

  _proto.fences = function fences(src) {
    var cap = this.rules.block.fences.exec(src);

    if (cap) {
      var raw = cap[0];
      var text = indentCodeCompensation(raw, cap[3] || '');
      return {
        type: 'code',
        raw: raw,
        lang: cap[2] ? cap[2].trim() : cap[2],
        text: text
      };
    }
  };

  _proto.heading = function heading(src) {
    var cap = this.rules.block.heading.exec(src);

    if (cap) {
      var text = cap[2].trim(); // remove trailing #s

      if (/#$/.test(text)) {
        var trimmed = rtrim(text, '#');

        if (this.options.pedantic) {
          text = trimmed.trim();
        } else if (!trimmed || / $/.test(trimmed)) {
          // CommonMark requires space before trailing #s
          text = trimmed.trim();
        }
      }

      var token = {
        type: 'heading',
        raw: cap[0],
        depth: cap[1].length,
        text: text,
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  };

  _proto.hr = function hr(src) {
    var cap = this.rules.block.hr.exec(src);

    if (cap) {
      return {
        type: 'hr',
        raw: cap[0]
      };
    }
  };

  _proto.blockquote = function blockquote(src) {
    var cap = this.rules.block.blockquote.exec(src);

    if (cap) {
      var text = cap[0].replace(/^ *>[ \t]?/gm, '');
      return {
        type: 'blockquote',
        raw: cap[0],
        tokens: this.lexer.blockTokens(text, []),
        text: text
      };
    }
  };

  _proto.list = function list(src) {
    var cap = this.rules.block.list.exec(src);

    if (cap) {
      var raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;
      var bull = cap[1].trim();
      var isordered = bull.length > 1;
      var list = {
        type: 'list',
        raw: '',
        ordered: isordered,
        start: isordered ? +bull.slice(0, -1) : '',
        loose: false,
        items: []
      };
      bull = isordered ? "\\d{1,9}\\" + bull.slice(-1) : "\\" + bull;

      if (this.options.pedantic) {
        bull = isordered ? bull : '[*+-]';
      } // Get next list item


      var itemRegex = new RegExp("^( {0,3}" + bull + ")((?:[\t ][^\\n]*)?(?:\\n|$))"); // Check if current bullet point can start a new List Item

      while (src) {
        endEarly = false;

        if (!(cap = itemRegex.exec(src))) {
          break;
        }

        if (this.rules.block.hr.test(src)) {
          // End list if bullet was actually HR (possibly move into itemRegex?)
          break;
        }

        raw = cap[0];
        src = src.substring(raw.length);
        line = cap[2].split('\n', 1)[0];
        nextLine = src.split('\n', 1)[0];

        if (this.options.pedantic) {
          indent = 2;
          itemContents = line.trimLeft();
        } else {
          indent = cap[2].search(/[^ ]/); // Find first non-space char

          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent

          itemContents = line.slice(indent);
          indent += cap[1].length;
        }

        blankLine = false;

        if (!line && /^ *$/.test(nextLine)) {
          // Items begin with at most one blank line
          raw += nextLine + '\n';
          src = src.substring(nextLine.length + 1);
          endEarly = true;
        }

        if (!endEarly) {
          var nextBulletRegex = new RegExp("^ {0," + Math.min(3, indent - 1) + "}(?:[*+-]|\\d{1,9}[.)])((?: [^\\n]*)?(?:\\n|$))");
          var hrRegex = new RegExp("^ {0," + Math.min(3, indent - 1) + "}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)");
          var fencesBeginRegex = new RegExp("^( {0," + Math.min(3, indent - 1) + "})(```|~~~)"); // Check if following lines should be included in List Item

          while (src) {
            rawLine = src.split('\n', 1)[0];
            line = rawLine; // Re-align to follow commonmark nesting rules

            if (this.options.pedantic) {
              line = line.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');
            } // End list item if found code fences


            if (fencesBeginRegex.test(line)) {
              break;
            } // End list item if found start of new heading


            if (this.rules.block.heading.test(line)) {
              break;
            } // End list item if found start of new bullet


            if (nextBulletRegex.test(line)) {
              break;
            } // Horizontal rule found


            if (hrRegex.test(src)) {
              break;
            }

            if (line.search(/[^ ]/) >= indent || !line.trim()) {
              // Dedent if possible
              itemContents += '\n' + line.slice(indent);
            } else if (!blankLine) {
              // Until blank line, item doesn't need indentation
              itemContents += '\n' + line;
            } else {
              // Otherwise, improper indentation ends this item
              break;
            }

            if (!blankLine && !line.trim()) {
              // Check if current line is blank
              blankLine = true;
            }

            raw += rawLine + '\n';
            src = src.substring(rawLine.length + 1);
          }
        }

        if (!list.loose) {
          // If the previous item ended with a blank line, the list is loose
          if (endsWithBlankLine) {
            list.loose = true;
          } else if (/\n *\n *$/.test(raw)) {
            endsWithBlankLine = true;
          }
        } // Check for task list items


        if (this.options.gfm) {
          istask = /^\[[ xX]\] /.exec(itemContents);

          if (istask) {
            ischecked = istask[0] !== '[ ] ';
            itemContents = itemContents.replace(/^\[[ xX]\] +/, '');
          }
        }

        list.items.push({
          type: 'list_item',
          raw: raw,
          task: !!istask,
          checked: ischecked,
          loose: false,
          text: itemContents
        });
        list.raw += raw;
      } // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic


      list.items[list.items.length - 1].raw = raw.trimRight();
      list.items[list.items.length - 1].text = itemContents.trimRight();
      list.raw = list.raw.trimRight();
      var l = list.items.length; // Item child tokens handled here at end because we needed to have the final item to trim it first

      for (i = 0; i < l; i++) {
        this.lexer.state.top = false;
        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);
        var spacers = list.items[i].tokens.filter(function (t) {
          return t.type === 'space';
        });
        var hasMultipleLineBreaks = spacers.every(function (t) {
          var chars = t.raw.split('');
          var lineBreaks = 0;

          for (var _iterator = _createForOfIteratorHelperLoose(chars), _step; !(_step = _iterator()).done;) {
            var _char = _step.value;

            if (_char === '\n') {
              lineBreaks += 1;
            }

            if (lineBreaks > 1) {
              return true;
            }
          }

          return false;
        });

        if (!list.loose && spacers.length && hasMultipleLineBreaks) {
          // Having a single line break doesn't mean a list is loose. A single line break is terminating the last list item
          list.loose = true;
          list.items[i].loose = true;
        }
      }

      return list;
    }
  };

  _proto.html = function html(src) {
    var cap = this.rules.block.html.exec(src);

    if (cap) {
      var token = {
        type: 'html',
        raw: cap[0],
        pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),
        text: cap[0]
      };

      if (this.options.sanitize) {
        token.type = 'paragraph';
        token.text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);
        token.tokens = [];
        this.lexer.inline(token.text, token.tokens);
      }

      return token;
    }
  };

  _proto.def = function def(src) {
    var cap = this.rules.block.def.exec(src);

    if (cap) {
      if (cap[3]) cap[3] = cap[3].substring(1, cap[3].length - 1);
      var tag = cap[1].toLowerCase().replace(/\s+/g, ' ');
      return {
        type: 'def',
        tag: tag,
        raw: cap[0],
        href: cap[2],
        title: cap[3]
      };
    }
  };

  _proto.table = function table(src) {
    var cap = this.rules.block.table.exec(src);

    if (cap) {
      var item = {
        type: 'table',
        header: splitCells(cap[1]).map(function (c) {
          return {
            text: c
          };
        }),
        align: cap[2].replace(/^ *|\| *$/g, '').split(/ *\| */),
        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\n[ \t]*$/, '').split('\n') : []
      };

      if (item.header.length === item.align.length) {
        item.raw = cap[0];
        var l = item.align.length;
        var i, j, k, row;

        for (i = 0; i < l; i++) {
          if (/^ *-+: *$/.test(item.align[i])) {
            item.align[i] = 'right';
          } else if (/^ *:-+: *$/.test(item.align[i])) {
            item.align[i] = 'center';
          } else if (/^ *:-+ *$/.test(item.align[i])) {
            item.align[i] = 'left';
          } else {
            item.align[i] = null;
          }
        }

        l = item.rows.length;

        for (i = 0; i < l; i++) {
          item.rows[i] = splitCells(item.rows[i], item.header.length).map(function (c) {
            return {
              text: c
            };
          });
        } // parse child tokens inside headers and cells
        // header child tokens


        l = item.header.length;

        for (j = 0; j < l; j++) {
          item.header[j].tokens = [];
          this.lexer.inline(item.header[j].text, item.header[j].tokens);
        } // cell child tokens


        l = item.rows.length;

        for (j = 0; j < l; j++) {
          row = item.rows[j];

          for (k = 0; k < row.length; k++) {
            row[k].tokens = [];
            this.lexer.inline(row[k].text, row[k].tokens);
          }
        }

        return item;
      }
    }
  };

  _proto.lheading = function lheading(src) {
    var cap = this.rules.block.lheading.exec(src);

    if (cap) {
      var token = {
        type: 'heading',
        raw: cap[0],
        depth: cap[2].charAt(0) === '=' ? 1 : 2,
        text: cap[1],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  };

  _proto.paragraph = function paragraph(src) {
    var cap = this.rules.block.paragraph.exec(src);

    if (cap) {
      var token = {
        type: 'paragraph',
        raw: cap[0],
        text: cap[1].charAt(cap[1].length - 1) === '\n' ? cap[1].slice(0, -1) : cap[1],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  };

  _proto.text = function text(src) {
    var cap = this.rules.block.text.exec(src);

    if (cap) {
      var token = {
        type: 'text',
        raw: cap[0],
        text: cap[0],
        tokens: []
      };
      this.lexer.inline(token.text, token.tokens);
      return token;
    }
  };

  _proto.escape = function escape$1(src) {
    var cap = this.rules.inline.escape.exec(src);

    if (cap) {
      return {
        type: 'escape',
        raw: cap[0],
        text: escape(cap[1])
      };
    }
  };

  _proto.tag = function tag(src) {
    var cap = this.rules.inline.tag.exec(src);

    if (cap) {
      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {
        this.lexer.state.inLink = true;
      } else if (this.lexer.state.inLink && /^<\/a>/i.test(cap[0])) {
        this.lexer.state.inLink = false;
      }

      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = true;
      } else if (this.lexer.state.inRawBlock && /^<\/(pre|code|kbd|script)(\s|>)/i.test(cap[0])) {
        this.lexer.state.inRawBlock = false;
      }

      return {
        type: this.options.sanitize ? 'text' : 'html',
        raw: cap[0],
        inLink: this.lexer.state.inLink,
        inRawBlock: this.lexer.state.inRawBlock,
        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]
      };
    }
  };

  _proto.link = function link(src) {
    var cap = this.rules.inline.link.exec(src);

    if (cap) {
      var trimmedUrl = cap[2].trim();

      if (!this.options.pedantic && /^</.test(trimmedUrl)) {
        // commonmark requires matching angle brackets
        if (!/>$/.test(trimmedUrl)) {
          return;
        } // ending angle bracket cannot be escaped


        var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\');

        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {
          return;
        }
      } else {
        // find closing parenthesis
        var lastParenIndex = findClosingBracket(cap[2], '()');

        if (lastParenIndex > -1) {
          var start = cap[0].indexOf('!') === 0 ? 5 : 4;
          var linkLen = start + cap[1].length + lastParenIndex;
          cap[2] = cap[2].substring(0, lastParenIndex);
          cap[0] = cap[0].substring(0, linkLen).trim();
          cap[3] = '';
        }
      }

      var href = cap[2];
      var title = '';

      if (this.options.pedantic) {
        // split pedantic href and title
        var link = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(href);

        if (link) {
          href = link[1];
          title = link[3];
        }
      } else {
        title = cap[3] ? cap[3].slice(1, -1) : '';
      }

      href = href.trim();

      if (/^</.test(href)) {
        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {
          // pedantic allows starting angle bracket without ending angle bracket
          href = href.slice(1);
        } else {
          href = href.slice(1, -1);
        }
      }

      return outputLink(cap, {
        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,
        title: title ? title.replace(this.rules.inline._escapes, '$1') : title
      }, cap[0], this.lexer);
    }
  };

  _proto.reflink = function reflink(src, links) {
    var cap;

    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {
      var link = (cap[2] || cap[1]).replace(/\s+/g, ' ');
      link = links[link.toLowerCase()];

      if (!link || !link.href) {
        var text = cap[0].charAt(0);
        return {
          type: 'text',
          raw: text,
          text: text
        };
      }

      return outputLink(cap, link, cap[0], this.lexer);
    }
  };

  _proto.emStrong = function emStrong(src, maskedSrc, prevChar) {
    if (prevChar === void 0) {
      prevChar = '';
    }

    var match = this.rules.inline.emStrong.lDelim.exec(src);
    if (!match) return; // _ can't be between two alphanumerics. \p{L}\p{N} includes non-english alphabet/numbers as well

    if (match[3] && prevChar.match(/(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDF70-\uDF81\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDE70-\uDEBE\uDEC0-\uDEC9\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/)) return;
    var nextChar = match[1] || match[2] || '';

    if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {
      var lLength = match[0].length - 1;
      var rDelim,
          rLength,
          delimTotal = lLength,
          midDelimTotal = 0;
      var endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;
      endReg.lastIndex = 0; // Clip maskedSrc to same section of string as src (move to lexer?)

      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);

      while ((match = endReg.exec(maskedSrc)) != null) {
        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];
        if (!rDelim) continue; // skip single * in __abc*abc__

        rLength = rDelim.length;

        if (match[3] || match[4]) {
          // found another Left Delim
          delimTotal += rLength;
          continue;
        } else if (match[5] || match[6]) {
          // either Left or Right Delim
          if (lLength % 3 && !((lLength + rLength) % 3)) {
            midDelimTotal += rLength;
            continue; // CommonMark Emphasis Rules 9-10
          }
        }

        delimTotal -= rLength;
        if (delimTotal > 0) continue; // Haven't found enough closing delimiters
        // Remove extra characters. *a*** -> *a*

        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal); // Create `em` if smallest delimiter has odd char count. *a***

        if (Math.min(lLength, rLength) % 2) {
          var _text = src.slice(1, lLength + match.index + rLength);

          return {
            type: 'em',
            raw: src.slice(0, lLength + match.index + rLength + 1),
            text: _text,
            tokens: this.lexer.inlineTokens(_text, [])
          };
        } // Create 'strong' if smallest delimiter has even char count. **a***


        var text = src.slice(2, lLength + match.index + rLength - 1);
        return {
          type: 'strong',
          raw: src.slice(0, lLength + match.index + rLength + 1),
          text: text,
          tokens: this.lexer.inlineTokens(text, [])
        };
      }
    }
  };

  _proto.codespan = function codespan(src) {
    var cap = this.rules.inline.code.exec(src);

    if (cap) {
      var text = cap[2].replace(/\n/g, ' ');
      var hasNonSpaceChars = /[^ ]/.test(text);
      var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);

      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {
        text = text.substring(1, text.length - 1);
      }

      text = escape(text, true);
      return {
        type: 'codespan',
        raw: cap[0],
        text: text
      };
    }
  };

  _proto.br = function br(src) {
    var cap = this.rules.inline.br.exec(src);

    if (cap) {
      return {
        type: 'br',
        raw: cap[0]
      };
    }
  };

  _proto.del = function del(src) {
    var cap = this.rules.inline.del.exec(src);

    if (cap) {
      return {
        type: 'del',
        raw: cap[0],
        text: cap[2],
        tokens: this.lexer.inlineTokens(cap[2], [])
      };
    }
  };

  _proto.autolink = function autolink(src, mangle) {
    var cap = this.rules.inline.autolink.exec(src);

    if (cap) {
      var text, href;

      if (cap[2] === '@') {
        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);
        href = 'mailto:' + text;
      } else {
        text = escape(cap[1]);
        href = text;
      }

      return {
        type: 'link',
        raw: cap[0],
        text: text,
        href: href,
        tokens: [{
          type: 'text',
          raw: text,
          text: text
        }]
      };
    }
  };

  _proto.url = function url(src, mangle) {
    var cap;

    if (cap = this.rules.inline.url.exec(src)) {
      var text, href;

      if (cap[2] === '@') {
        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);
        href = 'mailto:' + text;
      } else {
        // do extended autolink path validation
        var prevCapZero;

        do {
          prevCapZero = cap[0];
          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];
        } while (prevCapZero !== cap[0]);

        text = escape(cap[0]);

        if (cap[1] === 'www.') {
          href = 'http://' + text;
        } else {
          href = text;
        }
      }

      return {
        type: 'link',
        raw: cap[0],
        text: text,
        href: href,
        tokens: [{
          type: 'text',
          raw: text,
          text: text
        }]
      };
    }
  };

  _proto.inlineText = function inlineText(src, smartypants) {
    var cap = this.rules.inline.text.exec(src);

    if (cap) {
      var text;

      if (this.lexer.state.inRawBlock) {
        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];
      } else {
        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);
      }

      return {
        type: 'text',
        raw: cap[0],
        text: text
      };
    }
  };

  return Tokenizer;
}();

/**
 * Block-Level Grammar
 */

var block = {
  newline: /^(?: *(?:\n|$))+/,
  code: /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/,
  fences: /^ {0,3}(`{3,}(?=[^`\n]*\n)|~{3,})([^\n]*)\n(?:|([\s\S]*?)\n)(?: {0,3}\1[~`]* *(?=\n|$)|$)/,
  hr: /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,
  heading: /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,
  blockquote: /^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,
  list: /^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/,
  html: '^ {0,3}(?:' // optional indentation
  + '<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' // (1)
  + '|comment[^\\n]*(\\n+|$)' // (2)
  + '|<\\?[\\s\\S]*?(?:\\?>\\n*|$)' // (3)
  + '|<![A-Z][\\s\\S]*?(?:>\\n*|$)' // (4)
  + '|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)' // (5)
  + '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (6)
  + '|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (7) open tag
  + '|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' // (7) closing tag
  + ')',
  def: /^ {0,3}\[(label)\]: *(?:\n *)?<?([^\s>]+)>?(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/,
  table: noopTest,
  lheading: /^([^\n]+)\n {0,3}(=+|-+) *(?:\n+|$)/,
  // regex template, placeholders will be replaced according to different paragraph
  // interruption rules of commonmark and the original markdown spec:
  _paragraph: /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,
  text: /^[^\n]+/
};
block._label = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
block._title = /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/;
block.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();
block.bullet = /(?:[*+-]|\d{1,9}[.)])/;
block.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();
block.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))').replace('def', '\\n+(?=' + block.def.source + ')').getRegex();
block._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';
block._comment = /<!--(?!-?>)[\s\S]*?(?:-->|$)/;
block.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex();
block.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
.replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
.getRegex();
block.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();
/**
 * Normal Block Grammar
 */

block.normal = merge({}, block);
/**
 * GFM Block Grammar
 */

block.gfm = merge({}, block.normal, {
  table: '^ *([^\\n ].*\\|.*)\\n' // Header
  + ' {0,3}(?:\\| *)?(:?-+:? *(?:\\| *:?-+:? *)*)(?:\\| *)?' // Align
  + '(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)' // Cells

});
block.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
.replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks
.getRegex();
block.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs
.replace('table', block.gfm.table) // interrupt paragraphs with table
.replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt
.replace('html', '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks
.getRegex();
/**
 * Pedantic grammar (original John Gruber's loose markdown specification)
 */

block.pedantic = merge({}, block.normal, {
  html: edit('^ *(?:comment *(?:\\n|\\s*$)' + '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' // closed tag
  + '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b').getRegex(),
  def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
  heading: /^(#{1,6})(.*)(?:\n+|$)/,
  fences: noopTest,
  // fences not supported
  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()
});
/**
 * Inline-Level Grammar
 */

var inline = {
  escape: /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,
  autolink: /^<(scheme:[^\s\x00-\x1f<>]*|email)>/,
  url: noopTest,
  tag: '^comment' + '|^</[a-zA-Z][\\w:-]*\\s*>' // self-closing tag
  + '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' // open tag
  + '|^<\\?[\\s\\S]*?\\?>' // processing instruction, e.g. <?php ?>
  + '|^<![a-zA-Z]+\\s[\\s\\S]*?>' // declaration, e.g. <!DOCTYPE html>
  + '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>',
  // CDATA section
  link: /^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/,
  reflink: /^!?\[(label)\]\[(ref)\]/,
  nolink: /^!?\[(ref)\](?:\[\])?/,
  reflinkSearch: 'reflink|nolink(?!\\()',
  emStrong: {
    lDelim: /^(?:\*+(?:([punct_])|[^\s*]))|^_+(?:([punct*])|([^\s_]))/,
    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.
    //          () Skip orphan inside strong  () Consume to delim (1) #***                (2) a***#, a***                   (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a
    rDelimAst: /^[^_*]*?\_\_[^_*]*?\*[^_*]*?(?=\_\_)|[^*]+(?=[^*])|[punct_](\*+)(?=[\s]|$)|[^punct*_\s](\*+)(?=[punct_\s]|$)|[punct_\s](\*+)(?=[^punct*_\s])|[\s](\*+)(?=[punct_])|[punct_](\*+)(?=[punct_])|[^punct*_\s](\*+)(?=[^punct*_\s])/,
    rDelimUnd: /^[^_*]*?\*\*[^_*]*?\_[^_*]*?(?=\*\*)|[^_]+(?=[^_])|[punct*](\_+)(?=[\s]|$)|[^punct*_\s](\_+)(?=[punct*\s]|$)|[punct*\s](\_+)(?=[^punct*_\s])|[\s](\_+)(?=[punct*])|[punct*](\_+)(?=[punct*])/ // ^- Not allowed for _

  },
  code: /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,
  br: /^( {2,}|\\)\n(?!\s*$)/,
  del: noopTest,
  text: /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,
  punctuation: /^([\spunctuation])/
}; // list of punctuation marks from CommonMark spec
// without * and _ to handle the different emphasis markers * and _

inline._punctuation = '!"#$%&\'()+\\-.,/:;<=>?@\\[\\]`^{|}~';
inline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex(); // sequences em should skip over [title](link), `code`, <html>

inline.blockSkip = /\[[^\]]*?\]\([^\)]*?\)|`[^`]*?`|<[^>]*?>/g;
inline.escapedEmSt = /\\\*|\\_/g;
inline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();
inline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();
inline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();
inline._escapes = /\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/g;
inline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;
inline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;
inline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();
inline._attribute = /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/;
inline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();
inline._label = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
inline._href = /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/;
inline._title = /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/;
inline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();
inline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();
inline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();
inline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();
/**
 * Normal Inline Grammar
 */

inline.normal = merge({}, inline);
/**
 * Pedantic Inline Grammar
 */

inline.pedantic = merge({}, inline.normal, {
  strong: {
    start: /^__|\*\*/,
    middle: /^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,
    endAst: /\*\*(?!\*)/g,
    endUnd: /__(?!_)/g
  },
  em: {
    start: /^_|\*/,
    middle: /^()\*(?=\S)([\s\S]*?\S)\*(?!\*)|^_(?=\S)([\s\S]*?\S)_(?!_)/,
    endAst: /\*(?!\*)/g,
    endUnd: /_(?!_)/g
  },
  link: edit(/^!?\[(label)\]\((.*?)\)/).replace('label', inline._label).getRegex(),
  reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace('label', inline._label).getRegex()
});
/**
 * GFM Inline Grammar
 */

inline.gfm = merge({}, inline.normal, {
  escape: edit(inline.escape).replace('])', '~|])').getRegex(),
  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,
  url: /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
  _backpedal: /(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,
  del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
  text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
});
inline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();
/**
 * GFM + Line Breaks Inline Grammar
 */

inline.breaks = merge({}, inline.gfm, {
  br: edit(inline.br).replace('{2,}', '*').getRegex(),
  text: edit(inline.gfm.text).replace('\\b_', '\\b_| {2,}\\n').replace(/\{2,\}/g, '*').getRegex()
});

/**
 * smartypants text replacement
 * @param {string} text
 */

function smartypants(text) {
  return text // em-dashes
  .replace(/---/g, "\u2014") // en-dashes
  .replace(/--/g, "\u2013") // opening singles
  .replace(/(^|[-\u2014/(\[{"\s])'/g, "$1\u2018") // closing singles & apostrophes
  .replace(/'/g, "\u2019") // opening doubles
  .replace(/(^|[-\u2014/(\[{\u2018\s])"/g, "$1\u201C") // closing doubles
  .replace(/"/g, "\u201D") // ellipses
  .replace(/\.{3}/g, "\u2026");
}
/**
 * mangle email addresses
 * @param {string} text
 */


function mangle(text) {
  var out = '',
      i,
      ch;
  var l = text.length;

  for (i = 0; i < l; i++) {
    ch = text.charCodeAt(i);

    if (Math.random() > 0.5) {
      ch = 'x' + ch.toString(16);
    }

    out += '&#' + ch + ';';
  }

  return out;
}
/**
 * Block Lexer
 */


var Lexer = /*#__PURE__*/function () {
  function Lexer(options) {
    this.tokens = [];
    this.tokens.links = Object.create(null);
    this.options = options || exports.defaults;
    this.options.tokenizer = this.options.tokenizer || new Tokenizer();
    this.tokenizer = this.options.tokenizer;
    this.tokenizer.options = this.options;
    this.tokenizer.lexer = this;
    this.inlineQueue = [];
    this.state = {
      inLink: false,
      inRawBlock: false,
      top: true
    };
    var rules = {
      block: block.normal,
      inline: inline.normal
    };

    if (this.options.pedantic) {
      rules.block = block.pedantic;
      rules.inline = inline.pedantic;
    } else if (this.options.gfm) {
      rules.block = block.gfm;

      if (this.options.breaks) {
        rules.inline = inline.breaks;
      } else {
        rules.inline = inline.gfm;
      }
    }

    this.tokenizer.rules = rules;
  }
  /**
   * Expose Rules
   */


  /**
   * Static Lex Method
   */
  Lexer.lex = function lex(src, options) {
    var lexer = new Lexer(options);
    return lexer.lex(src);
  }
  /**
   * Static Lex Inline Method
   */
  ;

  Lexer.lexInline = function lexInline(src, options) {
    var lexer = new Lexer(options);
    return lexer.inlineTokens(src);
  }
  /**
   * Preprocessing
   */
  ;

  var _proto = Lexer.prototype;

  _proto.lex = function lex(src) {
    src = src.replace(/\r\n|\r/g, '\n');
    this.blockTokens(src, this.tokens);
    var next;

    while (next = this.inlineQueue.shift()) {
      this.inlineTokens(next.src, next.tokens);
    }

    return this.tokens;
  }
  /**
   * Lexing
   */
  ;

  _proto.blockTokens = function blockTokens(src, tokens) {
    var _this = this;

    if (tokens === void 0) {
      tokens = [];
    }

    if (this.options.pedantic) {
      src = src.replace(/\t/g, '    ').replace(/^ +$/gm, '');
    } else {
      src = src.replace(/^( *)(\t+)/gm, function (_, leading, tabs) {
        return leading + '    '.repeat(tabs.length);
      });
    }

    var token, lastToken, cutSrc, lastParagraphClipped;

    while (src) {
      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(function (extTokenizer) {
        if (token = extTokenizer.call({
          lexer: _this
        }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }

        return false;
      })) {
        continue;
      } // newline


      if (token = this.tokenizer.space(src)) {
        src = src.substring(token.raw.length);

        if (token.raw.length === 1 && tokens.length > 0) {
          // if there's a single \n as a spacer, it's terminating the last line,
          // so move it there so that we don't get unecessary paragraph tags
          tokens[tokens.length - 1].raw += '\n';
        } else {
          tokens.push(token);
        }

        continue;
      } // code


      if (token = this.tokenizer.code(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1]; // An indented code block cannot interrupt a paragraph.

        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
          lastToken.raw += '\n' + token.raw;
          lastToken.text += '\n' + token.text;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }

        continue;
      } // fences


      if (token = this.tokenizer.fences(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // heading


      if (token = this.tokenizer.heading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // hr


      if (token = this.tokenizer.hr(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // blockquote


      if (token = this.tokenizer.blockquote(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // list


      if (token = this.tokenizer.list(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // html


      if (token = this.tokenizer.html(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // def


      if (token = this.tokenizer.def(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];

        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {
          lastToken.raw += '\n' + token.raw;
          lastToken.text += '\n' + token.raw;
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else if (!this.tokens.links[token.tag]) {
          this.tokens.links[token.tag] = {
            href: token.href,
            title: token.title
          };
        }

        continue;
      } // table (gfm)


      if (token = this.tokenizer.table(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // lheading


      if (token = this.tokenizer.lheading(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // top-level paragraph
      // prevent paragraph consuming extensions by clipping 'src' to extension start


      cutSrc = src;

      if (this.options.extensions && this.options.extensions.startBlock) {
        (function () {
          var startIndex = Infinity;
          var tempSrc = src.slice(1);
          var tempStart = void 0;

          _this.options.extensions.startBlock.forEach(function (getStartIndex) {
            tempStart = getStartIndex.call({
              lexer: this
            }, tempSrc);

            if (typeof tempStart === 'number' && tempStart >= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });

          if (startIndex < Infinity && startIndex >= 0) {
            cutSrc = src.substring(0, startIndex + 1);
          }
        })();
      }

      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {
        lastToken = tokens[tokens.length - 1];

        if (lastParagraphClipped && lastToken.type === 'paragraph') {
          lastToken.raw += '\n' + token.raw;
          lastToken.text += '\n' + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }

        lastParagraphClipped = cutSrc.length !== src.length;
        src = src.substring(token.raw.length);
        continue;
      } // text


      if (token = this.tokenizer.text(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];

        if (lastToken && lastToken.type === 'text') {
          lastToken.raw += '\n' + token.raw;
          lastToken.text += '\n' + token.text;
          this.inlineQueue.pop();
          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;
        } else {
          tokens.push(token);
        }

        continue;
      }

      if (src) {
        var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);

        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }

    this.state.top = true;
    return tokens;
  };

  _proto.inline = function inline(src, tokens) {
    this.inlineQueue.push({
      src: src,
      tokens: tokens
    });
  }
  /**
   * Lexing/Compiling
   */
  ;

  _proto.inlineTokens = function inlineTokens(src, tokens) {
    var _this2 = this;

    if (tokens === void 0) {
      tokens = [];
    }

    var token, lastToken, cutSrc; // String with links masked to avoid interference with em and strong

    var maskedSrc = src;
    var match;
    var keepPrevChar, prevChar; // Mask out reflinks

    if (this.tokens.links) {
      var links = Object.keys(this.tokens.links);

      if (links.length > 0) {
        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {
          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {
            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
          }
        }
      }
    } // Mask out other blocks


    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
    } // Mask out escaped em & strong delimiters


    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {
      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);
    }

    while (src) {
      if (!keepPrevChar) {
        prevChar = '';
      }

      keepPrevChar = false; // extensions

      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(function (extTokenizer) {
        if (token = extTokenizer.call({
          lexer: _this2
        }, src, tokens)) {
          src = src.substring(token.raw.length);
          tokens.push(token);
          return true;
        }

        return false;
      })) {
        continue;
      } // escape


      if (token = this.tokenizer.escape(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // tag


      if (token = this.tokenizer.tag(src)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];

        if (lastToken && token.type === 'text' && lastToken.type === 'text') {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }

        continue;
      } // link


      if (token = this.tokenizer.link(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // reflink, nolink


      if (token = this.tokenizer.reflink(src, this.tokens.links)) {
        src = src.substring(token.raw.length);
        lastToken = tokens[tokens.length - 1];

        if (lastToken && token.type === 'text' && lastToken.type === 'text') {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }

        continue;
      } // em & strong


      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // code


      if (token = this.tokenizer.codespan(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // br


      if (token = this.tokenizer.br(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // del (gfm)


      if (token = this.tokenizer.del(src)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // autolink


      if (token = this.tokenizer.autolink(src, mangle)) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // url (gfm)


      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {
        src = src.substring(token.raw.length);
        tokens.push(token);
        continue;
      } // text
      // prevent inlineText consuming extensions by clipping 'src' to extension start


      cutSrc = src;

      if (this.options.extensions && this.options.extensions.startInline) {
        (function () {
          var startIndex = Infinity;
          var tempSrc = src.slice(1);
          var tempStart = void 0;

          _this2.options.extensions.startInline.forEach(function (getStartIndex) {
            tempStart = getStartIndex.call({
              lexer: this
            }, tempSrc);

            if (typeof tempStart === 'number' && tempStart >= 0) {
              startIndex = Math.min(startIndex, tempStart);
            }
          });

          if (startIndex < Infinity && startIndex >= 0) {
            cutSrc = src.substring(0, startIndex + 1);
          }
        })();
      }

      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {
        src = src.substring(token.raw.length);

        if (token.raw.slice(-1) !== '_') {
          // Track prevChar before string of ____ started
          prevChar = token.raw.slice(-1);
        }

        keepPrevChar = true;
        lastToken = tokens[tokens.length - 1];

        if (lastToken && lastToken.type === 'text') {
          lastToken.raw += token.raw;
          lastToken.text += token.text;
        } else {
          tokens.push(token);
        }

        continue;
      }

      if (src) {
        var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);

        if (this.options.silent) {
          console.error(errMsg);
          break;
        } else {
          throw new Error(errMsg);
        }
      }
    }

    return tokens;
  };

  _createClass(Lexer, null, [{
    key: "rules",
    get: function get() {
      return {
        block: block,
        inline: inline
      };
    }
  }]);

  return Lexer;
}();

/**
 * Renderer
 */

var Renderer = /*#__PURE__*/function () {
  function Renderer(options) {
    this.options = options || exports.defaults;
  }

  var _proto = Renderer.prototype;

  _proto.code = function code(_code, infostring, escaped) {
    var lang = (infostring || '').match(/\S*/)[0];

    if (this.options.highlight) {
      var out = this.options.highlight(_code, lang);

      if (out != null && out !== _code) {
        escaped = true;
        _code = out;
      }
    }

    _code = _code.replace(/\n$/, '') + '\n';

    if (!lang) {
      return '<pre><code>' + (escaped ? _code : escape(_code, true)) + '</code></pre>\n';
    }

    return '<pre><code class="' + this.options.langPrefix + escape(lang, true) + '">' + (escaped ? _code : escape(_code, true)) + '</code></pre>\n';
  }
  /**
   * @param {string} quote
   */
  ;

  _proto.blockquote = function blockquote(quote) {
    return "<blockquote>\n" + quote + "</blockquote>\n";
  };

  _proto.html = function html(_html) {
    return _html;
  }
  /**
   * @param {string} text
   * @param {string} level
   * @param {string} raw
   * @param {any} slugger
   */
  ;

  _proto.heading = function heading(text, level, raw, slugger) {
    if (this.options.headerIds) {
      var id = this.options.headerPrefix + slugger.slug(raw);
      return "<h" + level + " id=\"" + id + "\">" + text + "</h" + level + ">\n";
    } // ignore IDs


    return "<h" + level + ">" + text + "</h" + level + ">\n";
  };

  _proto.hr = function hr() {
    return this.options.xhtml ? '<hr/>\n' : '<hr>\n';
  };

  _proto.list = function list(body, ordered, start) {
    var type = ordered ? 'ol' : 'ul',
        startatt = ordered && start !== 1 ? ' start="' + start + '"' : '';
    return '<' + type + startatt + '>\n' + body + '</' + type + '>\n';
  }
  /**
   * @param {string} text
   */
  ;

  _proto.listitem = function listitem(text) {
    return "<li>" + text + "</li>\n";
  };

  _proto.checkbox = function checkbox(checked) {
    return '<input ' + (checked ? 'checked="" ' : '') + 'disabled="" type="checkbox"' + (this.options.xhtml ? ' /' : '') + '> ';
  }
  /**
   * @param {string} text
   */
  ;

  _proto.paragraph = function paragraph(text) {
    return "<p>" + text + "</p>\n";
  }
  /**
   * @param {string} header
   * @param {string} body
   */
  ;

  _proto.table = function table(header, body) {
    if (body) body = "<tbody>" + body + "</tbody>";
    return '<table>\n' + '<thead>\n' + header + '</thead>\n' + body + '</table>\n';
  }
  /**
   * @param {string} content
   */
  ;

  _proto.tablerow = function tablerow(content) {
    return "<tr>\n" + content + "</tr>\n";
  };

  _proto.tablecell = function tablecell(content, flags) {
    var type = flags.header ? 'th' : 'td';
    var tag = flags.align ? "<" + type + " align=\"" + flags.align + "\">" : "<" + type + ">";
    return tag + content + ("</" + type + ">\n");
  }
  /**
   * span level renderer
   * @param {string} text
   */
  ;

  _proto.strong = function strong(text) {
    return "<strong>" + text + "</strong>";
  }
  /**
   * @param {string} text
   */
  ;

  _proto.em = function em(text) {
    return "<em>" + text + "</em>";
  }
  /**
   * @param {string} text
   */
  ;

  _proto.codespan = function codespan(text) {
    return "<code>" + text + "</code>";
  };

  _proto.br = function br() {
    return this.options.xhtml ? '<br/>' : '<br>';
  }
  /**
   * @param {string} text
   */
  ;

  _proto.del = function del(text) {
    return "<del>" + text + "</del>";
  }
  /**
   * @param {string} href
   * @param {string} title
   * @param {string} text
   */
  ;

  _proto.link = function link(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);

    if (href === null) {
      return text;
    }

    var out = '<a href="' + escape(href) + '"';

    if (title) {
      out += ' title="' + title + '"';
    }

    out += '>' + text + '</a>';
    return out;
  }
  /**
   * @param {string} href
   * @param {string} title
   * @param {string} text
   */
  ;

  _proto.image = function image(href, title, text) {
    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);

    if (href === null) {
      return text;
    }

    var out = "<img src=\"" + href + "\" alt=\"" + text + "\"";

    if (title) {
      out += " title=\"" + title + "\"";
    }

    out += this.options.xhtml ? '/>' : '>';
    return out;
  };

  _proto.text = function text(_text) {
    return _text;
  };

  return Renderer;
}();

/**
 * TextRenderer
 * returns only the textual part of the token
 */
var TextRenderer = /*#__PURE__*/function () {
  function TextRenderer() {}

  var _proto = TextRenderer.prototype;

  // no need for block level renderers
  _proto.strong = function strong(text) {
    return text;
  };

  _proto.em = function em(text) {
    return text;
  };

  _proto.codespan = function codespan(text) {
    return text;
  };

  _proto.del = function del(text) {
    return text;
  };

  _proto.html = function html(text) {
    return text;
  };

  _proto.text = function text(_text) {
    return _text;
  };

  _proto.link = function link(href, title, text) {
    return '' + text;
  };

  _proto.image = function image(href, title, text) {
    return '' + text;
  };

  _proto.br = function br() {
    return '';
  };

  return TextRenderer;
}();

/**
 * Slugger generates header id
 */
var Slugger = /*#__PURE__*/function () {
  function Slugger() {
    this.seen = {};
  }
  /**
   * @param {string} value
   */


  var _proto = Slugger.prototype;

  _proto.serialize = function serialize(value) {
    return value.toLowerCase().trim() // remove html tags
    .replace(/<[!\/a-z].*?>/ig, '') // remove unwanted chars
    .replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~]/g, '').replace(/\s/g, '-');
  }
  /**
   * Finds the next safe (unique) slug to use
   * @param {string} originalSlug
   * @param {boolean} isDryRun
   */
  ;

  _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) {
    var slug = originalSlug;
    var occurenceAccumulator = 0;

    if (this.seen.hasOwnProperty(slug)) {
      occurenceAccumulator = this.seen[originalSlug];

      do {
        occurenceAccumulator++;
        slug = originalSlug + '-' + occurenceAccumulator;
      } while (this.seen.hasOwnProperty(slug));
    }

    if (!isDryRun) {
      this.seen[originalSlug] = occurenceAccumulator;
      this.seen[slug] = 0;
    }

    return slug;
  }
  /**
   * Convert string to unique id
   * @param {object} [options]
   * @param {boolean} [options.dryrun] Generates the next unique slug without
   * updating the internal accumulator.
   */
  ;

  _proto.slug = function slug(value, options) {
    if (options === void 0) {
      options = {};
    }

    var slug = this.serialize(value);
    return this.getNextSafeSlug(slug, options.dryrun);
  };

  return Slugger;
}();

/**
 * Parsing & Compiling
 */

var Parser = /*#__PURE__*/function () {
  function Parser(options) {
    this.options = options || exports.defaults;
    this.options.renderer = this.options.renderer || new Renderer();
    this.renderer = this.options.renderer;
    this.renderer.options = this.options;
    this.textRenderer = new TextRenderer();
    this.slugger = new Slugger();
  }
  /**
   * Static Parse Method
   */


  Parser.parse = function parse(tokens, options) {
    var parser = new Parser(options);
    return parser.parse(tokens);
  }
  /**
   * Static Parse Inline Method
   */
  ;

  Parser.parseInline = function parseInline(tokens, options) {
    var parser = new Parser(options);
    return parser.parseInline(tokens);
  }
  /**
   * Parse Loop
   */
  ;

  var _proto = Parser.prototype;

  _proto.parse = function parse(tokens, top) {
    if (top === void 0) {
      top = true;
    }

    var out = '',
        i,
        j,
        k,
        l2,
        l3,
        row,
        cell,
        header,
        body,
        token,
        ordered,
        start,
        loose,
        itemBody,
        item,
        checked,
        task,
        checkbox,
        ret;
    var l = tokens.length;

    for (i = 0; i < l; i++) {
      token = tokens[i]; // Run any renderer extensions

      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({
          parser: this
        }, token);

        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {
          out += ret || '';
          continue;
        }
      }

      switch (token.type) {
        case 'space':
          {
            continue;
          }

        case 'hr':
          {
            out += this.renderer.hr();
            continue;
          }

        case 'heading':
          {
            out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);
            continue;
          }

        case 'code':
          {
            out += this.renderer.code(token.text, token.lang, token.escaped);
            continue;
          }

        case 'table':
          {
            header = ''; // header

            cell = '';
            l2 = token.header.length;

            for (j = 0; j < l2; j++) {
              cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {
                header: true,
                align: token.align[j]
              });
            }

            header += this.renderer.tablerow(cell);
            body = '';
            l2 = token.rows.length;

            for (j = 0; j < l2; j++) {
              row = token.rows[j];
              cell = '';
              l3 = row.length;

              for (k = 0; k < l3; k++) {
                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {
                  header: false,
                  align: token.align[k]
                });
              }

              body += this.renderer.tablerow(cell);
            }

            out += this.renderer.table(header, body);
            continue;
          }

        case 'blockquote':
          {
            body = this.parse(token.tokens);
            out += this.renderer.blockquote(body);
            continue;
          }

        case 'list':
          {
            ordered = token.ordered;
            start = token.start;
            loose = token.loose;
            l2 = token.items.length;
            body = '';

            for (j = 0; j < l2; j++) {
              item = token.items[j];
              checked = item.checked;
              task = item.task;
              itemBody = '';

              if (item.task) {
                checkbox = this.renderer.checkbox(checked);

                if (loose) {
                  if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {
                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;

                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {
                      item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;
                    }
                  } else {
                    item.tokens.unshift({
                      type: 'text',
                      text: checkbox
                    });
                  }
                } else {
                  itemBody += checkbox;
                }
              }

              itemBody += this.parse(item.tokens, loose);
              body += this.renderer.listitem(itemBody, task, checked);
            }

            out += this.renderer.list(body, ordered, start);
            continue;
          }

        case 'html':
          {
            // TODO parse inline content if parameter markdown=1
            out += this.renderer.html(token.text);
            continue;
          }

        case 'paragraph':
          {
            out += this.renderer.paragraph(this.parseInline(token.tokens));
            continue;
          }

        case 'text':
          {
            body = token.tokens ? this.parseInline(token.tokens) : token.text;

            while (i + 1 < l && tokens[i + 1].type === 'text') {
              token = tokens[++i];
              body += '\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);
            }

            out += top ? this.renderer.paragraph(body) : body;
            continue;
          }

        default:
          {
            var errMsg = 'Token with "' + token.type + '" type was not found.';

            if (this.options.silent) {
              console.error(errMsg);
              return;
            } else {
              throw new Error(errMsg);
            }
          }
      }
    }

    return out;
  }
  /**
   * Parse Inline Tokens
   */
  ;

  _proto.parseInline = function parseInline(tokens, renderer) {
    renderer = renderer || this.renderer;
    var out = '',
        i,
        token,
        ret;
    var l = tokens.length;

    for (i = 0; i < l; i++) {
      token = tokens[i]; // Run any renderer extensions

      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {
        ret = this.options.extensions.renderers[token.type].call({
          parser: this
        }, token);

        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {
          out += ret || '';
          continue;
        }
      }

      switch (token.type) {
        case 'escape':
          {
            out += renderer.text(token.text);
            break;
          }

        case 'html':
          {
            out += renderer.html(token.text);
            break;
          }

        case 'link':
          {
            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));
            break;
          }

        case 'image':
          {
            out += renderer.image(token.href, token.title, token.text);
            break;
          }

        case 'strong':
          {
            out += renderer.strong(this.parseInline(token.tokens, renderer));
            break;
          }

        case 'em':
          {
            out += renderer.em(this.parseInline(token.tokens, renderer));
            break;
          }

        case 'codespan':
          {
            out += renderer.codespan(token.text);
            break;
          }

        case 'br':
          {
            out += renderer.br();
            break;
          }

        case 'del':
          {
            out += renderer.del(this.parseInline(token.tokens, renderer));
            break;
          }

        case 'text':
          {
            out += renderer.text(token.text);
            break;
          }

        default:
          {
            var errMsg = 'Token with "' + token.type + '" type was not found.';

            if (this.options.silent) {
              console.error(errMsg);
              return;
            } else {
              throw new Error(errMsg);
            }
          }
      }
    }

    return out;
  };

  return Parser;
}();

/**
 * Marked
 */

function marked(src, opt, callback) {
  // throw error in case of non string input
  if (typeof src === 'undefined' || src === null) {
    throw new Error('marked(): input parameter is undefined or null');
  }

  if (typeof src !== 'string') {
    throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
  }

  if (typeof opt === 'function') {
    callback = opt;
    opt = null;
  }

  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);

  if (callback) {
    var highlight = opt.highlight;
    var tokens;

    try {
      tokens = Lexer.lex(src, opt);
    } catch (e) {
      return callback(e);
    }

    var done = function done(err) {
      var out;

      if (!err) {
        try {
          if (opt.walkTokens) {
            marked.walkTokens(tokens, opt.walkTokens);
          }

          out = Parser.parse(tokens, opt);
        } catch (e) {
          err = e;
        }
      }

      opt.highlight = highlight;
      return err ? callback(err) : callback(null, out);
    };

    if (!highlight || highlight.length < 3) {
      return done();
    }

    delete opt.highlight;
    if (!tokens.length) return done();
    var pending = 0;
    marked.walkTokens(tokens, function (token) {
      if (token.type === 'code') {
        pending++;
        setTimeout(function () {
          highlight(token.text, token.lang, function (err, code) {
            if (err) {
              return done(err);
            }

            if (code != null && code !== token.text) {
              token.text = code;
              token.escaped = true;
            }

            pending--;

            if (pending === 0) {
              done();
            }
          });
        }, 0);
      }
    });

    if (pending === 0) {
      done();
    }

    return;
  }

  try {
    var _tokens = Lexer.lex(src, opt);

    if (opt.walkTokens) {
      marked.walkTokens(_tokens, opt.walkTokens);
    }

    return Parser.parse(_tokens, opt);
  } catch (e) {
    e.message += '\nPlease report this to https://github.com/markedjs/marked.';

    if (opt.silent) {
      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';
    }

    throw e;
  }
}
/**
 * Options
 */

marked.options = marked.setOptions = function (opt) {
  merge(marked.defaults, opt);
  changeDefaults(marked.defaults);
  return marked;
};

marked.getDefaults = getDefaults;
marked.defaults = exports.defaults;
/**
 * Use Extension
 */

marked.use = function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var opts = merge.apply(void 0, [{}].concat(args));
  var extensions = marked.defaults.extensions || {
    renderers: {},
    childTokens: {}
  };
  var hasExtensions;
  args.forEach(function (pack) {
    // ==-- Parse "addon" extensions --== //
    if (pack.extensions) {
      hasExtensions = true;
      pack.extensions.forEach(function (ext) {
        if (!ext.name) {
          throw new Error('extension name required');
        }

        if (ext.renderer) {
          // Renderer extensions
          var prevRenderer = extensions.renderers ? extensions.renderers[ext.name] : null;

          if (prevRenderer) {
            // Replace extension with func to run new extension but fall back if false
            extensions.renderers[ext.name] = function () {
              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
              }

              var ret = ext.renderer.apply(this, args);

              if (ret === false) {
                ret = prevRenderer.apply(this, args);
              }

              return ret;
            };
          } else {
            extensions.renderers[ext.name] = ext.renderer;
          }
        }

        if (ext.tokenizer) {
          // Tokenizer Extensions
          if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {
            throw new Error("extension level must be 'block' or 'inline'");
          }

          if (extensions[ext.level]) {
            extensions[ext.level].unshift(ext.tokenizer);
          } else {
            extensions[ext.level] = [ext.tokenizer];
          }

          if (ext.start) {
            // Function to check for start of token
            if (ext.level === 'block') {
              if (extensions.startBlock) {
                extensions.startBlock.push(ext.start);
              } else {
                extensions.startBlock = [ext.start];
              }
            } else if (ext.level === 'inline') {
              if (extensions.startInline) {
                extensions.startInline.push(ext.start);
              } else {
                extensions.startInline = [ext.start];
              }
            }
          }
        }

        if (ext.childTokens) {
          // Child tokens to be visited by walkTokens
          extensions.childTokens[ext.name] = ext.childTokens;
        }
      });
    } // ==-- Parse "overwrite" extensions --== //


    if (pack.renderer) {
      (function () {
        var renderer = marked.defaults.renderer || new Renderer();

        var _loop = function _loop(prop) {
          var prevRenderer = renderer[prop]; // Replace renderer with func to run extension, but fall back if false

          renderer[prop] = function () {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }

            var ret = pack.renderer[prop].apply(renderer, args);

            if (ret === false) {
              ret = prevRenderer.apply(renderer, args);
            }

            return ret;
          };
        };

        for (var prop in pack.renderer) {
          _loop(prop);
        }

        opts.renderer = renderer;
      })();
    }

    if (pack.tokenizer) {
      (function () {
        var tokenizer = marked.defaults.tokenizer || new Tokenizer();

        var _loop2 = function _loop2(prop) {
          var prevTokenizer = tokenizer[prop]; // Replace tokenizer with func to run extension, but fall back if false

          tokenizer[prop] = function () {
            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }

            var ret = pack.tokenizer[prop].apply(tokenizer, args);

            if (ret === false) {
              ret = prevTokenizer.apply(tokenizer, args);
            }

            return ret;
          };
        };

        for (var prop in pack.tokenizer) {
          _loop2(prop);
        }

        opts.tokenizer = tokenizer;
      })();
    } // ==-- Parse WalkTokens extensions --== //


    if (pack.walkTokens) {
      var _walkTokens = marked.defaults.walkTokens;

      opts.walkTokens = function (token) {
        pack.walkTokens.call(this, token);

        if (_walkTokens) {
          _walkTokens.call(this, token);
        }
      };
    }

    if (hasExtensions) {
      opts.extensions = extensions;
    }

    marked.setOptions(opts);
  });
};
/**
 * Run callback for every token
 */


marked.walkTokens = function (tokens, callback) {
  var _loop3 = function _loop3() {
    var token = _step.value;
    callback.call(marked, token);

    switch (token.type) {
      case 'table':
        {
          for (var _iterator2 = _createForOfIteratorHelperLoose(token.header), _step2; !(_step2 = _iterator2()).done;) {
            var cell = _step2.value;
            marked.walkTokens(cell.tokens, callback);
          }

          for (var _iterator3 = _createForOfIteratorHelperLoose(token.rows), _step3; !(_step3 = _iterator3()).done;) {
            var row = _step3.value;

            for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;) {
              var _cell = _step4.value;
              marked.walkTokens(_cell.tokens, callback);
            }
          }

          break;
        }

      case 'list':
        {
          marked.walkTokens(token.items, callback);
          break;
        }

      default:
        {
          if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {
            // Walk any extensions
            marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {
              marked.walkTokens(token[childTokens], callback);
            });
          } else if (token.tokens) {
            marked.walkTokens(token.tokens, callback);
          }
        }
    }
  };

  for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {
    _loop3();
  }
};
/**
 * Parse Inline
 * @param {string} src
 */


marked.parseInline = function (src, opt) {
  // throw error in case of non string input
  if (typeof src === 'undefined' || src === null) {
    throw new Error('marked.parseInline(): input parameter is undefined or null');
  }

  if (typeof src !== 'string') {
    throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');
  }

  opt = merge({}, marked.defaults, opt || {});
  checkSanitizeDeprecation(opt);

  try {
    var tokens = Lexer.lexInline(src, opt);

    if (opt.walkTokens) {
      marked.walkTokens(tokens, opt.walkTokens);
    }

    return Parser.parseInline(tokens, opt);
  } catch (e) {
    e.message += '\nPlease report this to https://github.com/markedjs/marked.';

    if (opt.silent) {
      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';
    }

    throw e;
  }
};
/**
 * Expose
 */


marked.Parser = Parser;
marked.parser = Parser.parse;
marked.Renderer = Renderer;
marked.TextRenderer = TextRenderer;
marked.Lexer = Lexer;
marked.lexer = Lexer.lex;
marked.Tokenizer = Tokenizer;
marked.Slugger = Slugger;
marked.parse = marked;
var options = marked.options;
var setOptions = marked.setOptions;
var use = marked.use;
var walkTokens = marked.walkTokens;
var parseInline = marked.parseInline;
var parse = marked;
var parser = Parser.parse;
var lexer = Lexer.lex;

exports.Lexer = Lexer;
exports.Parser = Parser;
exports.Renderer = Renderer;
exports.Slugger = Slugger;
exports.TextRenderer = TextRenderer;
exports.Tokenizer = Tokenizer;
exports.getDefaults = getDefaults;
exports.lexer = lexer;
exports.marked = marked;
exports.options = options;
exports.parse = parse;
exports.parseInline = parseInline;
exports.parser = parser;
exports.setOptions = setOptions;
exports.use = use;
exports.walkTokens = walkTokens;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
// Convert ShEx to FHIR Logical Tables

const ShExParser = __webpack_require__(210);
const Marked = __webpack_require__(970);

// Global configuration and control variables.
var TOGGLE_TIME = 50 // time in μsec to toggle collapsed lists.
const RENDER_DELAY = 50 // time to pause for display (horrible heuristics). Could try: .css('opacity', .99)
var BUILD_PRODUCTS = true // can disable if OWL and ShEx construction crashes.
var SUPPRESS_DUPLICATE_CLASSES = true // Don't list subclasses in parent's package.
var UPPER_UNLIMITED = '*'

var Getables = [
];

function prepareControls () {
  $("#menu-button").on("click", toggleControls);
  // $("#interface").on("change", setInterface);
  // $("#regexpEngine").on("change", toggleControls);
  // $("#validate").on("click", disableResultsAndValidate);
  // $("#clear").on("click", clearAll);
  // $("#download-results-button").on("click", downloadResults);

  $("#loadForm").dialog({
    autoOpen: false,
    modal: true,
    buttons: {
      "GET": function (evt, ui) {
        results.clear();
        var target = Getables.find(g => g.queryStringParm === $("#loadForm span").text());
        var url = $("#loadInput").val();
        var tips = $(".validateTips");
        function updateTips (t) {
          tips
            .text( t )
            .addClass( "ui-state-highlight" );
          setTimeout(function() {
            tips.removeClass( "ui-state-highlight", 1500 );
          }, 500 );
        }
        if (url.length < 5) {
          $("#loadInput").addClass("ui-state-error");
          updateTips("URL \"" + url + "\" is way too short.");
          return;
        }
        tips.removeClass("ui-state-highlight").text();
        target.cache.asyncGet(url).catch(function (e) {
          updateTips(e.message);
        });
      },
      Cancel: function() {
        $("#loadInput").removeClass("ui-state-error");
        $("#loadForm").dialog("close");
        toggleControls();
      }
    },
    close: function() {
      $("#loadInput").removeClass("ui-state-error");
      $("#loadForm").dialog("close");
      toggleControls();
    }
  });
  Getables.forEach(target => {
    var type = target.queryStringParm
    $("#load-"+type+"-button").click(evt => {
      var prefillURL = target.url ? target.url :
          target.cache.meta.base && target.cache.meta.base !== DefaultBase ? target.cache.meta.base :
          "";
      $("#loadInput").val(prefillURL);
      $("#loadForm").attr("class", type).find("span").text(type);
      $("#loadForm").dialog("open");
    });
  });

  $("#about").dialog({
    autoOpen: false,
    modal: true,
    width: "50%",
    buttons: {
      "Dismiss": dismissModal
    },
    close: dismissModal
  });

  $("#about-button").click(evt => {
    $("#about").dialog("open");
  });

  function dismissModal (evt) {
    // $.unblockUI();
    $("#about").dialog("close");
    toggleControls();
    return true;
  }

  // Prepare file uploads
  $("input.inputfile").each((idx, elt) => {
    $(elt).on("change", function (evt) {
      var reader = new FileReader();

      reader.onload = function(evt) {
        if(evt.target.readyState != 2) return;
        if(evt.target.error) {
          alert("Error while reading file");
          return;
        }
        $($(elt).attr("data-target")).val(evt.target.result);
      };

      reader.readAsText(evt.target.files[0]);
    });
  });

  document.addEventListener('keypress', rerender, false);

  function rerender (evt) {
    if (/*evt.ctrlKey && */evt.key === 'r') {
      $('#render').empty();
      setTimeout(() => {
        $("#reparse").click();
      }, 500)
    }
  }
}

function toggleControls (evt) {
  var revealing = evt && $("#controls").css("display") !== "flex";
  $("#controls").css("display", revealing ? "flex" : "none");
  toggleControlsArrow(revealing ? "up" : "down");
  if (revealing) {
    var target = evt.target;
    while (target.tagName !== "BUTTON")
      target = target.parentElement;
    if ($("#menuForm").css("position") === "absolute") {
      $("#controls").
        css("top", 0).
        css("left", $("#menu-button").css("margin-left"));
    } else {
      var bottonBBox = target.getBoundingClientRect();
      var controlsBBox = $("#menuForm").get(0).getBoundingClientRect();
      var left = bottonBBox.right - bottonBBox.width; // - controlsBBox.width;
      $("#controls").css("top", bottonBBox.bottom).css("left", left);
    }
    $("#permalink a").attr("href", getPermalink());
  }
  return false;
}

function toggleControlsArrow (which) {
  // jQuery can't find() a prefixed attribute (xlink:href); fall back to DOM:
  if (document.getElementById("menu-button") === null)
    return;
  var down = $(document.getElementById("menu-button").
               querySelectorAll('use[*|href="#down-arrow"]'));
  var up = $(document.getElementById("menu-button").
             querySelectorAll('use[*|href="#up-arrow"]'));

  switch (which) {
  case "down":
    down.show();
    up.hide();
    break;
  case "up":
    down.hide();
    up.show();
    break;
  default:
    throw Error("toggleControlsArrow expected [up|down], got \"" + which + "\"");
  }
}

async function main () {
  let $ = window.jQuery

  $('#load-file').on('change', function (evt) {
    if (!window.FileReader) {
      return // not supported
    }
    for (let i = 0; i < evt.target.files.length; ++i) {
      (function (file) {
        // Give user some interface feedback before reading.
        let div = $('<div/>', {'id': file.name}).appendTo('#loaded')
        $('<li/>').append($('<a/>', {href: '#' + file.name}).text(file.name)).appendTo('#toc')
        let status = $('<span/>').addClass('status').text('loading...')
        $('<h2/>').append(file.name, ' ', status).appendTo(div)
        window.setTimeout(() => {
          let loader = new window.FileReader()
          loader.onload = function (loadEvent) {
            if (loadEvent.target.readyState !== 2) {
              return
            }
            if (loadEvent.target.error) {
              window.alert('Error while reading file ' + file.name + ': ' + loadEvent.target.error)
              return
            }
            // This may take a long time to render.
            $('<textarea/>', {cols: 60, rows: 10}).val(loadEvent.target.result).appendTo(div)
            let doIt = evt => parseAndRender(
              loadEvent.target.result,
              'uploaded ' + file.name,
              status,
              $('#namespace').val()
            )
            div.append($('<button/>', {id: "reparse"}).text('reparse').on('click', doIt))
            doIt(null)
          }
          loader.readAsText(file)
        }, RENDER_DELAY)
      })(evt.target.files[i])
    }
  })

  const cgiParms = location.search.substr(1).split(/[,&]/).map(
    pair => pair.split("=").map(decodeURIComponent)
  ).filter(pair => Array.isArray(pair) && pair.length === 2)
  cgiParms.reduce((acc, pair) => {
    const [name, value] = pair
    switch (name) {
    case 'NS':
      $('#namespace').val(value)
      return acc
    case 'URL':
      $('#load-url').val(value)
      return acc.concat([[value, $('#namespace').val()]]);
    }
  }, []).forEach(([source, namespace]) => load(source, namespace))

  $('#load-url').on('change', function (evt) { load($(this).val(), $('#namespace').val()); })

  function load (source, namespace) {
    // Give user some interface feedback before reading.
    let div = $('<div/>', {'id': source}).appendTo('#loaded')
    $('<li/>').append($('<a/>', {href: '#' + source}).text(source)).appendTo('#toc')
    let status = $('<span/>').addClass('status').text('fetching...')
    $('<h2/>').append(source, ' ', status).appendTo(div)
    window.fetch(source).then(function (response) {
      if (!response.ok) {
        throw Error('got ' + response.status + ' ' + response.statusText)
      }
      return response.text()
    }).then(function (text) {
      window.setTimeout(() => {
        $('<textarea/>', {cols: 60, rows: 10}).val(text).appendTo(div)
        let doIt = evt => parseAndRender(text, 'fetched ' + source, status, namespace)
        div.append($('<button/>', {id: "reparse"}).text('reparse').on('click', doIt))
        doIt(null)
      }, RENDER_DELAY)
    }).catch(function (error) {
      div.append($('<pre/>').text(error)).addClass('error')
    })
    return true
  }
  prepareControls()

  async function parseAndRender (text, title, status, namespace) {
    let shexParser = ShExParser.construct(namespace, null, {index: true})
    let schema = shexParser.parse(text)
    const schemaBox = $('<div/>')
    $('#render').append(schemaBox)
    // progressive rendering
    await ShExHTML($, Marked).asTree(schema, schema._base || namespace, schema._prefixes, schemaBox)
    if (location.hash !== '') {
      const elt = document.getElementById(decodeURIComponent(location.hash.substr(1)))
      if (elt) {
        // elt.classList.add('selected')
        $(document).scrollTop($(elt).offset().top)
        // $(document).animate({ scrollTop: $(elt).offset().top }, 100)
        $(elt).delay(100).animate({ backgroundColor: '#fff8c5'}, 250)
        $(elt).delay(350).animate({ backgroundColor: '#ffffff'}, 2500)
      }
    }
  }

}

window.onload = main

})();

/******/ })()
;